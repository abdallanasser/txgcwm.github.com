<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 茶余酒后 | 残剑]]></title>
  <link href="http://txgcwm.github.io/blog/categories/cha-yu-jiu-hou/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2015-11-21T22:30:48+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈营销文案]]></title>
    <link href="http://txgcwm.github.io/blog/2015/11/21/qian-tan-ying-xiao-wen-an/"/>
    <updated>2015-11-21T22:29:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/11/21/qian-tan-ying-xiao-wen-an</id>
    <content type="html"><![CDATA[<p>现在非常流行“产品未出，营销先行”，这样做有很多的好处：一、可以提升产品本身的影响力；二、还能试探市场的反应，了解其需求度。好处是显而易见的，但只有好的文案才能达到理想中的效果。以下观点纯属个人的浅见，仅供看看。</p>

<p>提到文案，那么标题是至关重要的，一个好的标题决定着读者是否要点击进去查阅。标题的设定根据营销对象而定，比如针对那些果粉，若是要宣传iphone 6s，若是写《iphone 6s功能特性》肯定没有多少人愿意点击进去看，更改成《iphone 6s的十大新功能》则会吸引到一部分人，换成《iphone 6s，你所不知道的十大新奇功能》则能让人迫不及待地想去了解它。所以，即便内容一样，不同的标题对点击的吸引力是不一样的。</p>

<!--more-->


<p>文章的起始自然不能罗嗦，要直接切入主题，而且要有新意，人家进来就是想看真东西的，哪有那么多时间浪费在好没价值的事情上。</p>

<p>内容上也要循序渐进，不能有太大的跳跃，上文不接下文的内容，读者根本明白不了作者要表达什么样的观点。阅读对于一部分来说是消遣，所以不能让读者过份的费脑子，以一种欢乐的方式阅读当然是最好。读完之后会让人觉得有价值，即便他事后很快就忘记了。</p>

<p>营销文案当然是带着宣传目的的，提到产品部分不要太直白，人们只会厌恶，可以以趣味的方式提及，有时候自嘲也是一种不错的宣传手段。</p>

<p>有朋友说，现在的人都缺乏耐心，看图往往比看字效果要好。如果做不到全图宣传，那么尽量做到图文结合，这样读者也可以稍微休息一下再继续阅读。</p>

<p>写不下去了，目前只有这个水平，等学到更好的东西，再进一步分享！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何成为一个不可替代的程序员]]></title>
    <link href="http://txgcwm.github.io/blog/2015/11/21/ru-he-cheng-wei-%5B%3F%5D-ge-bu-ke-ti-dai-de-cheng-xu-yuan/"/>
    <updated>2015-11-21T21:44:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/11/21/ru-he-cheng-wei-[?]-ge-bu-ke-ti-dai-de-cheng-xu-yuan</id>
    <content type="html"><![CDATA[<p>都说程序员是一个吃青春饭的职业，做到一定年龄就不适合了，一则思维不再那么活跃，二则新人在技术上很快追赶上来。那么如何才能成为一个不可替代的程序员呢？不是没有办法，这一切完全可以做到。不知道？没关系，我教你！</p>

<p>一个函数千万不要写的太明确，更不能写接口说明了，能写多长就写多长，只要你自己把逻辑理清楚即可。不同的功能也最好不要分开，一个函数里能挤下去，干嘛非得分成几个函数呢！</p>

<p>每个函数里还需要多写一些临时变量，即便不用也要写在那里，说不定哪天就可能用到了呢。而且变量的命名也要非常规，让他人知道变量的名字了岂不显得自己没有水准呢。不要管这种编译警告，stack还是够用的嘛。关键这种方法还能增加代码量，代码量不就是工作量的体现嘛。</p>

<!--more-->


<p>数据结构这东西也是关键，不能定义的太简单，这样也很容易让人看出端倪，最好定义得复杂些，那样其他程序员也就看不懂了。做到以下一种效果最佳，一旦要增加新的功能就要更改很多接口，要是能更改很多文件就更好了。那时，一般人肯定办不到，只有请你出马了才能解决一切。</p>

<p>多写几个源码文件也是不必要的事情，那样还有可能造成磁盘的碎片，所以一个项目所要的代码最好写在一个文件里就好。这样做有个最明显的优势，可以让老大直接看到你的代码量，否则上面的领导根本不知道你在做什么，尤其是在他们发现你只写了几百行代码的时候会觉得你对公司没有价值了。想想可能要被炒了，你会觉得这个建议是很靠谱的。</p>

<p>log这东西还是要写写的，但写了就存在一种隐患，就是别人可能看懂，然后把自己的代码更改掉。是不是就没有办法了呢？不对，还是有的。就是你要多写log，无论有必要还是没有必要，反正现在处理器的能力那么强，没有必要考虑性能相关的问题。在不同阶段，还需要重复调用某一功能接口，那样就会产生更多的log，绝对让那些不知情的人头晕，这样他们也就不敢去随意改了。有什么问题出现，到时还得乖乖来请你看。老大一看，每个地方都需要你，到时怎么可能轻易让你走呢！其他人都可以走，就你不能走，能达到这种效果，是不是就不可替代了呢？对，这不是明白着的嘛。</p>

<p>预定义也是一个绝招，凡是要加一个功能必定要加一个，这样的话可以实现定制化。要想达到更好的效果，可以让那些定义互相嵌套，如果这么做，要是某个定义不符合，让程序根本跑不起来。非此即彼的逻辑都要一起编译，否则又得让那群新人看懂了。</p>

<p>一些新人若是想找你要文档，可不要真写，问他哪里不明白直接跟他讲就好。真讲？不，你傻啊，那样岂不是要把你的位置给夺了。将几个经常跑到的代码接口就好，而且只能针对他遇到问题部分的逻辑讲，这样的话，即便他解决了当前的bug，整个逻辑还是不清楚的。</p>

<p>最后一点是至关重要的，就是要有一个态度。当那群新人不懂且要求你更改的时候，你就告诉他们你有新功能要开发，而且很急切，老大催着要，那么那群不懂事的家伙就会乖乖回到自己的位置，不再提这种不合理的需求了。</p>

<p>做到以上几点，你就可以成为一个不可替代的程序员了。到时你真的要走，身边的同事肯定不答应，因为他们已经离不开你了，没了你他们根本解不了bug，更不用说添加新的功能了。说不定到时领导都会拖着你的大腿请你留下呢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[30日闲语]]></title>
    <link href="http://txgcwm.github.io/blog/2015/07/30/30ri-xian-yu/"/>
    <updated>2015-07-30T22:33:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/07/30/30ri-xian-yu</id>
    <content type="html"><![CDATA[<p>我也有一个微信公众号，它叫“7527”，曾经也持续更新过一个月，可后来就没有持续更新了，原因很简单，我没有足够多的优质内容持续输出，既然没有好的东西分享，我就不便拿那些没有营养的文章骚扰大家。</p>

<p>为什么会叫“7527”呢？在大学那会，我住的宿舍号是7527，很喜欢，因为它的谐音是“妻，我爱妻”。起初，有考虑过取和文章主题相关的名字，可那些都不让自己满意。取名“7527”，可能完全就是为了留念。</p>

<p>真要做下去，无非两种方法：一、从身边的朋友处获取文章资源；二、从网络上获取相关的内容。但这两种方法都被我pass了，前者是身边能够持续写作的朋友不多，后者则完全是一种抄袭行为，要是我真那么做了，我会鄙视我自己。从13年那会决定认真写作开始，我就毫不犹豫地把空间中转载的文章全部删除了。只有真正去写作的时候，你才会重视起版权，你同样不希望别人在未经授权的情况下窃取你的内容。</p>

<!--more-->


<h1>why？</h1>

<p>运营公众号是从去年11月份开始的，看到别人运营的那么好，也坚信自己能够创造价值。刚开始的想法也很简单，就是通过自己的内容去认识更多的朋友，然后扩展更好的内容。</p>

<h1>做了什么</h1>

<p>正如前面提到的那样，我本身并没有太多优质的内容，所以很多的文章都是经朋友同意后转载的。内容方面包含的东西很多，有历史、游记、情感、产品等等。写得最多的就是游记了，因为出去玩过，就可以有很多的东西可以写。</p>

<p>凡是在公众号发表的文章，都仔细阅读过好几遍，更改了不少的错别字，同时也不断地修改语句，使其表达得更准确。排版就更不必说了，自己预览过好几遍之后才敢把它群发出去，毕竟良好的版式才会让阅读者在读的时候有个良好的心情。</p>

<p>随后的日子里就很好发了，真的是在内容方面匮乏，但一旦发现好的内容我一定会在公众号里发表，即便这些内容我已在好几个平台发表了。</p>

<h1>收获</h1>

<p>收获观众这是自然的，不多，很少，截至目前只有21人订阅了我的公众号，大部分是身边的朋友和一些一起走户外的小伙伴。从未尝试让身边的人去订阅，因为我清楚这是一件没有价值的事情，对谁都没有任何的好处。</p>

<p>运营方面的收获是极少的，只是知道了一些事情，从此不再那么理想化，或许在以后做事的过程中会变得脚踏实地。</p>

<h1>放弃的理由</h1>

<p>理由很简单，就是没有内容。我不强求自己去做这件事情，我清楚的知道自己并不能给大家带来价值。任何东西，只有在给别人创造价值的情况下，才能够给自己创造价值。</p>

<p>放弃并不代表完全放弃，我还会在这条道路上持续摸索，万一哪一天真的被我领悟了也是说不定的事！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[台风夜是不眠夜]]></title>
    <link href="http://txgcwm.github.io/blog/2015/07/11/tai-feng-ye-shi-bu-mian-ye/"/>
    <updated>2015-07-11T01:36:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/07/11/tai-feng-ye-shi-bu-mian-ye</id>
    <content type="html"><![CDATA[<p>风吹个不停，雨也一直滴答滴答地下，一句“谢谢你”足以搅乱一个人的心，让人不能平静，会持续到何时，这很难说，或许是等到原谅的时刻，或许是释然的那一瞬间。</p>

<p>一直以来都是一个情商颇低的人，不能从她人的言语和行为中判断出波动的情绪，导致错误的不断上演。尝试着改变，却没有多少的进展，只怪自己天生的愚顿。</p>

<p>遇事本该认真，可始终带有一丝的嬉笑，终究会让人误解。自己也清楚不该如此，但天生的乐观却磨灭不了这种天性。</p>

<p>夜很静，人很乏，却不能入眠，黑夜是让人深思的时刻，或许他就是一个笨小孩！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要重写但可以重构]]></title>
    <link href="http://txgcwm.github.io/blog/2015/05/17/bu-yao-zhong-xie-dan-ke-yi-zhong-gou/"/>
    <updated>2015-05-17T00:16:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/05/17/bu-yao-zhong-xie-dan-ke-yi-zhong-gou</id>
    <content type="html"><![CDATA[<p><img src="http://www.xdism.com/uploadfile/2013/0610/20130610065447327.jpg" alt="大象" /></p>

<p>不久前在朋友圈有一篇关于不要重写代码的文章很火，大体意思是这样：即便原有的代码看上去很不友好，也不要尝试轻易去重写代码，因为它经过了长期的测试及修补，已经运行得很稳定，要重写的话很多逻辑可能被忽略掉，可能也要犯曾经碰到的所有错误，需要更多的人力去测试。</p>

<p>阅读之后，深有体会，即便是代码的书写者也未必对其中的逻辑全部了解，要让他们重写也是一件很难的事情，而且成本会很高，还不如在原来的基础上进行修改。</p>

<!--more-->


<p>虽然重写是一件成本很大的事情，但我们可以不停地重构，逐步优化，最终会让代码变得完美。或者我们可以尝试如下的步骤去完善那些复杂的代码。</p>

<h1>提取可复用的代码</h1>

<p>不同的实现有时需要一些相类似的代码，拷贝然后稍加修改是一件极其容易的事情，但一旦某个地方出错了，其它地方可能被遗忘掉。即便是小部分的逻辑，要是增加一些控制变量，把一些代码集中到一个函数中，那么修改了一个错误就可以修改全部潜在的错误，达到事半功倍的效果。</p>

<h1>肢解独立的功能</h1>

<p>有些逻辑业务可以独立出来管理，阅读起来更加便利，逻辑也会变得有条理，调试起来也方便，出现问题了只需要到相应的模块查看。</p>

<p>重构后的代码可能需要花费更多的时间去了解其架构，但它却提升了代码的健壮性。</p>
]]></content>
  </entry>
  
</feed>
