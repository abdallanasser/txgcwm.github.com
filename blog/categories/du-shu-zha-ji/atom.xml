<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 读书札记 | 残剑]]></title>
  <link href="http://txgcwm.github.io/blog/categories/du-shu-zha-ji/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2015-12-15T23:41:46+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[联盟摘要]]></title>
    <link href="http://txgcwm.github.io/blog/2015/12/15/lian-meng-zhai-yao/"/>
    <updated>2015-12-15T23:36:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/12/15/lian-meng-zhai-yao</id>
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/15016-0be12b1210a0e55c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="联盟" /></p>

<p>理想的雇佣关系框架应鼓励员工发展个人人脉、勇于开拓实干，而不是成为唯利是图的跳槽专业户。</p>

<p>在联盟中，管理者可以开诚布公地谈论公司愿意为员工进行的投资和公司期望的回报。员工可以开诚布公地谈论他寻求的发展类型（技能、经验等），以及他通过努力可以为公司做出的回报。双方都设定了明确的预期。</p>

<!--more-->


<p>拥有创始人思维的人会推动改变、激励人心、出色地完成任务。</p>

<p>让员工专注于开创事业是件好事，毕竟，如果员工感觉不到积极投入自身事业的迫切需求，就可能无法做出公司调整和成长所需的迅速决断。</p>

<p>领导者的任务不是培养能人，而是认识到人们已有的才华，并创造出让其产生和成长的环境。</p>

<p>联盟提高了员工的适应力和技能，从而让他们更有价值，它能帮助并指导管理者更好地与直接下属合作，还将教会公司有效地利用和留住开创型员工。</p>

<p>我知道我的员工可能在某个时间离开公司。承认这一事实并不会影响我对他们的投资兴趣，相反，它赋予我这样做的动力。我向他们保证，一起谈论他们未来的工作绝对没问题，即使他们打算去别的公司。这有助于创造开诚布公的氛围，也有助于让他们理解我们的目标一致，都是为了让他们更上层楼。</p>

<p>他们的责任是利用在这里的工作经验抓住这种机会，为自身创造长期价值。在某些情况下，这种价值将在他们离职后的职业生涯中体现得最明显。</p>

<p>你应该雇佣你能找到的最优秀的人才，然后，创造环境让优秀人才决定留下来并专心投入工作。</p>

<p>声称公司的使命是打造优秀产品和满足客户需求基本上毫无意义，因为这些使命能够而且应该适用于任何公司。</p>

<p>首先，让这位员工写下3个他钦佩之人的名字。然后，让这位员工在每个名字后面列出3种他最钦佩的品质（一共9种品质）。最后，让他根据重要性对这9种品质排序。</p>

<p>任期的“正确”结构也取决于员工的个人需求。看重不同经验的员工可能需要大量短期多变的任期。重视稳定的员工可能偏好少量长期持续的任期，他们的目标是进入基础期。</p>

<p>对于推出过一种产品的员工而言，延长任期可以让他学会如何壮大这种产品的市场或规模，而公司可以利用最初打下的市场，而不必培养新人从头来过。</p>

<p>在开始一段新任期之前，员工应协助招聘和培训继任者，以继续完成前一个任期的项目。或许继任者是该项目后续阶段更适合的人选。继任者计划还为员工画上了更令人满意的句号，这样当他完成任期时，就能知道他管理了数年的产品、项目或计划将在可靠人选的手中继续下去。</p>

<p>当下一个明确目标迟迟不出现时，你和员工将备受煎熬——你们都希望继续这段关系，但不确定如何才能继续。在这种情况下，最佳行动是延长当前的任期，但规定一个在未来数月而非数年重新审视各种可能性的时限。</p>

<p>你应该和员工一起制定出过渡计划，并起草一份交接清单。交接清单的目的是列出公司为了完成目标而需要员工做的每件事，尤其是接手项目的继任者人选。如果员工完成了清单上的所有事项，就可以被认为善始善终地完成了任期，并可以在离职后与公司保持良好关系。</p>

<p>扩大职业人脉有助于员工改变职业生涯，员工人脉有助于公司改变自身。</p>

<p>人脉更广的劳动力可以带来更有价值的情报，当员工向公司提供他们通过人脉获得的信息时，他们将帮助公司解决重大的商业挑战。</p>

<p>“回头客”员工拥有独一无二的价值，因为他们可以将外部人视角与内部人掌握的公司流程与文化结合起来。</p>

<p>最后，同事还能提供急需的外部视角。公司很容易陷入自我满足，而当前员工指出忠言逆耳的现实时，他们既拥有必要的客观性，又对公司保持着尊重和信任。</p>

<p>我们认为当合适的人才在拥有合适理念的公司中遇到合适的机会时，就会发生神奇的转变。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阅读书单]]></title>
    <link href="http://txgcwm.github.io/blog/2015/12/13/yue-du-shu-dan/"/>
    <updated>2015-12-13T17:12:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/12/13/yue-du-shu-dan</id>
    <content type="html"><![CDATA[<p>《嵌入式Linux应用开发完全手册》</p>

<p>《抛弃c程序设计中的谬误与恶习》</p>

<p>《c陷阱与缺陷》</p>

<p>《征服c指针》</p>

<p>《c专家编程》</p>

<p>《黑客与画家》</p>

<!--more-->


<p>《浪潮之巅》</p>

<p>《Unix环境高级编程》</p>

<p>《创客：新工业革命》</p>

<p>《编程珠玑》</p>

<p>《乔布斯传》</p>

<p>《增长黑客》</p>

<p>《程序员修炼之道——从小工到专家》</p>

<p>《合伙人：如何发掘高潜力人才》</p>

<p>《从0到1》</p>

<p>《创业维艰》</p>

<p>《重构：改善既有代码的设计》</p>

<p>《More Effective C++》</p>

<p>《Effcetive C++》</p>

<p>《数据之巅》</p>

<p>《C++ Primer Plux》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《创业维艰》摘要]]></title>
    <link href="http://txgcwm.github.io/blog/2015/12/13/chuang-ye-wei-jian-zhai-yao/"/>
    <updated>2015-12-13T16:53:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/12/13/chuang-ye-wei-jian-zhai-yao</id>
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/15016-4690df212b7f47e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创业维艰" /></p>

<p>领导力是一种能让别人追随你的能力，即使别人只是处于好奇。</p>

<p>在特别严峻的形势下，当“事实”似乎已经注定了某一结果时，我会学着从截然不同的角度去寻找另一种表述和解释，以此打开我的视野。</p>

<p>如果我们不能公平、公正地对待那些即将离开公司的人，那些留下的人就永远不会再信任我了。</p>

<!--more-->


<p>可是，世俗的观点和事实真相往往相去甚远，有效的市场假说都具有欺骗性。</p>

<p>局势正在快速发生变化，要想始终处于上风，我们必须对产品架构做出重大改变。</p>

<p>纵观那些失败的公司，你会发现，很多员工早在公司倒闭之前就知道公司的症结是什么。既然知道这些致命的问题，他们为什么不说呢？原因往往是该公司的文化阻碍了坏消息的传播，真相始终处于隐匿状态，等到采取行动时却为时已晚。</p>

<p>给新工程师分配任务之后，这些工程师就会竭尽全力地想办法完成这些任务。通常情况下，这意味着对架构内现有设备进行复制，这种复制会导致用户体验不一致、各种性能问题，以及整体混乱。</p>

<p>排除经济因素之后，我发现人们辞职主要有两个原因：</p>

<p>第一、他们讨厌自己的管理者。缺乏指导、职业发展前景不明朗、收到的反馈多为负面的，这些因素通常会令员工感到惊恐不安。</p>

<p>第二、学不到东西：公司没有投入资源，帮助员工学习新的技能。</p>

<p>因此，培训必须具有强制性。</p>

<p>挑选团队中最优秀的管理者去教授其他课程，把参与这些课程变成一种荣誉，同时也变成一种强制性的要求。</p>

<p>讽刺的是，实施培训项目的最大障碍是：有些人认为，这会花费太多时间。要记住，在提升公司生产力方面，其他任何投入都比不上培训。</p>

<p>好的产品经理让团队将重点放在收益和客户身上，而差的产品经理则让团队关注竞争对手的产品有多少新功能。</p>

<p>人们意识不到自己的缺点时，很少会对其加以改正。</p>

<p>一个团队内部无论哪个层面出现了滥竽充数的人，他们都会像蛀虫一样影响其他成员，最终使得能力出众的人也渐趋平庸。</p>

<p>平庸与杰出之间的差距往往就源于你的态度，源于你是否放手让员工大胆创新，不折不扣地实行问责制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《程序员修炼之道——从小工到专家》摘要]]></title>
    <link href="http://txgcwm.github.io/blog/2015/12/02/cheng-xu-yuan-xiu-lian-zhi-dao-cong-xiao-gong-dao-zhuan-jia-zhai-yao/"/>
    <updated>2015-12-02T22:35:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/12/02/cheng-xu-yuan-xiu-lian-zhi-dao-cong-xiao-gong-dao-zhuan-jia-zhai-yao</id>
    <content type="html"><![CDATA[<p>要提供各种选择，而不是找借口。不要说事情做不到；要说明能够做什么来挽回局面。必须把代码扔掉？给他们讲授重构的价值。</p>

<p>一扇破窗户，只要有那么一段时间不修理，就会渐渐给建筑的居民带来一种废弃感——一种职权部门不关心这座建筑的感觉。于是又一扇窗户破了。人们开始乱扔垃圾。出现了乱涂乱画。严重的结构开始损坏开始了。在相对较短的一段时间里，建筑就被损毁得超出了业主愿意修理的程度，而废弃感变成了现实。</p>

<p>如果你发现自己在有好些破窗户的项目里工作，会很容易产生这样的想法：“这些代码的其余部分也是垃圾，我只要照着做就行了。”</p>

<p>大多数人都以为维护是在应用发布时开始的，维护就意味着修正bug和增强特性。我们认为这些人错了。程序员须持续不断地维护。</p>

<!--more-->


<p>系统中的每一项知识都必须具有单一、无歧义、权威的表示。</p>

<p>注释将不可避免地变得过时，而不可信任的注释比完全没有注释更糟。</p>

<p>处理这个问题的最佳方式是鼓励开发者相互进行主动的交流。</p>

<p>你不是在窥探——你是在向他们学习。</p>

<p>养成不断地批判对待自己的代码的习惯。寻找任何重新进行组织、以改善其结构和正交性的机会。</p>

<p>如果在代码中有着糟糕的封装、高度耦合以及硬编码的逻辑或参数，事情也许就是不可能的。</p>

<p>发现了他人的bug之后，你可以花费时间和精力去指责让人厌恶的肇事者。在有些工作环境中，这是文化的一部分，并且可能是“疏通剂”。但是，在技术竞技场上，你应该专注于修正问题，而不是发出指责。</p>

<p>如果有一个错误，就说明非常、非常糟糕的事情已经发生了。</p>

<p>死程序带来的危害通常比有疾患的程序要小得多。</p>

<p>无论何时你发现自己在思考“但那当然不可能发生”，增加代码检查它。最容易的办法是使用断言。</p>

<p>你的第一条防线是检查任何可能的错误，第二条防线是使用断言设法检测你疏漏的错误。</p>

<p>无论是谁分配的资源，它都应该负责解除该资源的分配。</p>

<p>最后，有一种技术可用于更进一步解除模块的耦合：提供一个“聚会地点”，各模块可以在那里匿名和异步地交换数据。</p>

<p>但“羞怯”的工作方式有两种：不向别人暴露你自己，不与太多人打交道。</p>

<p>很早以前我们就被教导说，不要把程序写成一个大块，而应该“分而治之”，把程序划分成模块。每个模块都有其自身的责任；事实上，模块（或类）的一个好定义就是，它具有单一的、定义良好的责任。</p>

<p>对象应该能进行登记，只接收它们需要的事件，并且决不应该收到它们不需要的事件。</p>

<p>不主动思考他们的代码的开发者是在靠巧合编程——代码也许能工作，但却没有特别的理由说明它们为何能工作。</p>

<p>注重时效的程序员批判地思考所有代码，包括我们自己的。</p>

<p>不要让已有的代码支配将来的代码。如果不再适用，所有的代码都可被替换。</p>

<p>当你遇到拌脚石——代码不再合适，你注意到有两样东西其实应该合并或是其他任何对你来说是“错误”的东西——不要对改动犹豫不决。应该现在就做。</p>

<p>时间压力常常被用作不进行重构的借口。但这个借口并不成立：现在没能进行重构，沿途修正问题将需要投入多得多的时间——那时将需要考虑更多的依赖关系。我们会有更多的时间可用吗？根据我们的经验，没有。</p>

<p>最勤勉的开发者如果被派到不在乎质量的团队里，会发现自己很难保持修正琐碎问题所需的热情。</p>

<p>事实上，好的项目拥有的测试代码可能比产品代码还要多。</p>

<p>匿名（尤其是在大型项目中）可能会为邋遢、错误、懒惰和糟糕的代码提供繁殖地。只把自己看作齿轮上的一个齿、在无休止的状况报告中制造蹩脚的借口、而不去编写优良的代码，那太容易了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《合伙人：如何发掘高潜力人才》摘要]]></title>
    <link href="http://txgcwm.github.io/blog/2015/11/22/%3C%3Che-huo-ren-%3Aru-he-fa-jue-gao-qian-li-ren-cai-%3E%3E-zhai-yao/"/>
    <updated>2015-11-22T20:06:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/11/22/<<he-huo-ren-:ru-he-fa-jue-gao-qian-li-ren-cai->>-zhai-yao</id>
    <content type="html"><![CDATA[<p>要列出已知信息，并追问自己还需要了解哪些信息，才能确保身边的人都是最优秀的。</p>

<p>为什么解雇员工如此困难呢？三种强大的心理因素在和我们对抗：拖延、规避损失以及同情心。</p>

<p>即使知道身边的人不合适，我们还是会长时间地担忧开除这些人可能会损失什么，而非展开思路想想我们能获得什么。</p>

<p>最严重的错误不是选择了一个注定失败的投资项目，而是在其带来损失时，还不肯放弃。</p>

<p>如果某位同事达不到你的标准，要对他以诚相待，尽力帮他提高，或查看是否有其他工作或者职位适合他。但永远不要保持沉默。对身边的人坦诚相待、关心爱护是每位领导最基本的道德义务。</p>

<!--more-->


<p>毫不犹豫地让不合适的人离开。</p>

<p>相似的人以相似方式管理同一家公司，产生的结果自然没有多大的差别。</p>

<p>内部提升的另一个好处就是可以激励内部其他员工，这有助于让你的后备人才力量强大而充满活力。</p>

<p>全球化、人口变动趋势以及糟糕的后备人才力量必然会在未来几年导致优秀专业人才的严重匮乏。</p>

<p>在高度竞争的时代，不能留住顶级员工的公司将来的生存会很困难。</p>

<p>我常常把常规性的面试（并非正确的面试）看作“两个说谎者之间的对话”。</p>

<p>但是，他们会做三件事以降低失败的风险：检查器官健康状况，检查器官是否与身体相匹配，适时监控和支持移植前、中、后整个过程。</p>

<p>用人成功的前两个必备条件：找到合适的人选（健康的器官），并且保证他们与你的组织相适应（匹配）。第三个条件就是对他们与组织的融合给予支持。</p>

<p>不幸的是，我们大多数人都没有这么做，而是将自己选中的人置于无助之境。</p>

<p>有效融合会让企业及员工都受益匪浅。</p>

<p>许多公司和领导人不再做出艰难的选择，而是对所有员工一视同仁，或是让员工自荐以求发展。</p>

<p>如果信息完全公开，未被选中的人会大失所望，而选出的高潜力人才如果愿望未能满足也会精神沮丧。</p>

<p>重点培养三种能力：客户影响力、人才发展能力和变革领导力。</p>

<p>你的目标应该是培养一个能力均衡的团队，并且使每个成员独特的优势技能得到充分发挥。</p>

<p>金钱真正的优势在于让员工有一种充分发挥自身优势的内在动机。</p>

<p>当你给他们设置困难但是可以应对的挑战，并且消除分散其注意力的因素，他们就会沉浸于其中，工作效率达到最高水平，“流畅状态”也就产生了。</p>

<p>但要意识到金钱不会促使错误的人选把事情做好。相反，要激励所有你选中的适当人选：给他们机会，让他们在你的团队中独立完成任务，掌握技能，追求更大的团队目标、组织目标和社会目标。</p>

<p>在现在的知识经济时代，价值来自集体创造和信息的无间共享。不管领导的团队有多大，都要尽自己一切所能，确保对达到集体目标的奖励高于对个人的奖赏。</p>

<p>你需要内部人员和外部人员的合理组合。前者能为董事会提供重要的公司内部信息，而后者会提供不一样的视角。</p>

<p>当问及他们怎么能负担得起一直聘用新人的支出时，他们的回答很简单：“我们怎么承担得起不聘用新人的代价呢！”</p>
]]></content>
  </entry>
  
</feed>
