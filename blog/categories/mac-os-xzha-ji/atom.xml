<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MAC OS X札记 | 残剑]]></title>
  <link href="http://txgcwm.github.io/blog/categories/mac-os-xzha-ji/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2015-07-25T13:53:21+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac OS X下的App]]></title>
    <link href="http://txgcwm.github.io/blog/2015/06/28/macosxxia-de-app/"/>
    <updated>2015-06-28T00:16:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/06/28/macosxxia-de-app</id>
    <content type="html"><![CDATA[<h1>基本常识</h1>

<p>平常接触的大部分 App其实是一个文件夹结构，只不过Mac OS X 让它看起来是一个单独的文件而已。通过右键点击一个 App，在菜单中选择 Show Contents，则可以浏览 App 的内部结构。</p>

<ul>
<li><p>_CodeSignature、CodeResources，一般为 Mac App Store 上架程序所包含，里面含有数字签名，以防止非法篡改。</p></li>
<li><p>Frameworks，一般放置了此程序所使用的第三方 Framework (使用的 Apple Framework 都包含在你的系统里)，那些支持 Growl 提醒的程序，在这个文件夹下必然包含一个 Growl Framework。某种程度上，可以理解为 Windows 程序中的 dll 动态链接库。</p></li>
<li><p>Info.plist，包含了一个程序的基本信息（比如最低系统版本要求、版本号、Copyright等等标识），也可能包含程序的类型信息（比如这个文件如果含有一个 LSUIElement 并且值为 TRUE 的片段，则这个程序在执行后，不会在 Dock 上显示图标或图标下有表示此程序正在运行的小亮点。当然，通过修改一个程序的 plist，添加 LSUIElement，则可以让一个程序运行时不在 Dock 上显示图标）。plist 是一个标准的 XML 文档，可以用任何文本编辑器修改。MacOS 文件夹则是包含了此应用程序的真正可执行文件（类似 Windows 下的 exe 文件），当然一些程序可能包含不只一个可执行文件。PkgInfo 是一个可选的8个字节长度的文件，可保存程序类型和创建者签名（当然这些可以写在 Info.plist 中），这个文件通常包含四字节的程序类型信息（通常为 APPL）和四个字节的签名信息（比如 System Preferences.app 的 PkgInfo 就是 APPLsprf）。</p></li>
<li><p>Resources，顾名思义，就是资源文件，包含图标、图片、语言包以及其它各种文件，这个没有严格的限制。</p></li>
</ul>


<!--more-->


<h1>安装方式</h1>

<p>安装方式常见的有：一、拖拽一个 App 文件到 Applications 文件夹完成安装；二、后缀为 .pkg 文件是通过 Mac OS X Installer 解开 pkg 文件，按照 pkg 文件中的 BOM 文件的指令将 pkg 文件中的内容安装到系统不同的位置上去；三、.mpkg 格式的安装文件和 .pkg 安装文件过程类似，只不过 .mpkg 指向的是一组 .pkg 文件的组合而已；四、通过 MacPorts 的终端安装。</p>

<h1>App 的卸载</h1>

<p>安装程序之前，要仔细阅读程序提供者的资料或者 App 的说明文档，这些文档中，一般都会含有如何卸载 App 的指南。很多程序（比如 Adobe Creative Suite，Microsoft Office）都会带有相应的卸载程序。XCode 这类，则会提供一个终端命令。</p>

<p>通过 Google 搜索，一般都可以找到如何卸载程序的方法。关键字很简单 Mac OS X ****(应用程序名) Uninstall / Remove，一般都会找到你想要的答案。</p>

<p>通过第三方的卸载软件，比如 Clean My Mac、AppZapper (光枪)，都可以做到准完美卸载。</p>

<p>通过手动使用终端 find 命令，或者系统内置的 spotlight 搜索应用程序名，找到相关文件删除进行卸载。注意观察一个 App 的运行方式，记住一些 App 常用的路径名称，可以帮助你完美卸载一个程序。</p>

<h1>Mac OS X App 常用的文件夹</h1>

<p>/Applications，这个不必多说，99% 的应用程序在下载后都会有一个直接提示让你拖拽 App 到 /Applications 文件夹。其实这个不是强制的位置，大部分 App 可以在任何权限适合的文件夹下运行。</p>

<p>~/Library/，用来存放用户偏好设置、App 偏好设置、缓存、App 数据文件等。</p>

<p>~/Library/Preferences/，这个文件夹下是各个程序的偏好设置文件和数据记录文件。卸载一个 App 时，这里一般都会有一个以上的相关 plist 文件，这些 plist 文件一般以 com.<strong><em>(应用程序提供商).</em></strong>(应用程序名称).plist 的格式出现，所以按照应用程序名称或者提供商名称，可以很容易的找到应用程序遗留文件。</p>

<p>~/Library/LaunchAgents/ ，此文件夹一般存放一些应用程序的附加程序（比如 Folx 能够感知 Safari 下载动作，1Password 能够感知登录输入密码动作），都是靠这里的 plist 文件来配置。</p>

<p>~Library/Application\ Support/，一般用来存放跟应用程序相关的支持数据、应用程序的附加程序（比如 Helper 程序、插件等等）、应用程序的备份文件 （比如 MacJournal 的所有日志备份文件等），一般都是跟应用程序（或者开发商）同名的文件夹。</p>

<p>~Library/Internet\ Plug-Ins/，用来放置与 Safari 有关的 App 插件。</p>

<p>~/Library/Contextual\ Menu\ Items/，用来放置一个 App向系统添加上下文菜单（右键菜单）。</p>

<p>~/Library/Input\ Methods/， 是此用户安装的输入法程序。</p>

<p>~/Library/PreferencePanes/，所有第三方的系统偏好设置安装在这里。</p>

<p>~/Library/Services/，很多程序会向右键或者服务菜单添加项目，则它们会把菜单项拷贝到这里。</p>

<p>~/Library/Widgets/，安装过的 Dashboard Widget 小应用都会在这里找到。</p>

<p>~/Library/Receipts/，很多应用程序在安装后会在这里留下 Receipt 存根或者 BOM 文件，对于帮助完整卸载 App 很有帮助。一部分 ~/Library 下介绍过的文件夹在 /Library 下都能够找到相对应的目录，区别在于 /Library表示全局级别的配置，换句话说，同样的配置从 ~/Library 拷贝到 /Library 相应的文件夹下则会影响这个 App 在所有用户中的运行状态、运行方式。当然，/Library 下有 ~/Library 下不存在的文件夹，也需要注意：/Library/LaunchDaemons 文件夹的作用与/Library/LaunchAgents/ （~/Library/LaunchAgents/）类似，只不过LaunchAgents 一般代表了有用户界面的后台自动运行程序，而 Daemons 则代表了那些没有用户界面的后台运行程序。但一定要注意，/Library 下的所有更改将会波及所有用户，必须非常小心，否则会造成难以预料的后果。</p>

<p>/System/Library，是系统级别应用程序配置、数据的所在地，除非特别明白每一个项目的作用，否则不要进行任何修改，一旦误操作，将会对系统产生致命后果。</p>

<p>大部分符合 Apple 应用程序规范的 App，基本都会在上述文件夹中的某一些内部留下痕迹，所以只要牢记这些文件夹以及每个文件夹的作用，手工完全清除 App 是非常方便且安全的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAC OS X系统显示和隐藏文件]]></title>
    <link href="http://txgcwm.github.io/blog/2015/06/16/macosxxi-tong-xian-shi-he-yin-cang-wen-jian/"/>
    <updated>2015-06-16T01:02:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/06/16/macosxxi-tong-xian-shi-he-yin-cang-wen-jian</id>
    <content type="html"><![CDATA[<p>苹果Mac OS X操作系统下，隐藏文件是否显示有很多种设置方法，最简单的要算在Mac终端输入命令。</p>

<p>显示Mac隐藏文件的命令：
<code>
defaults write com.apple.finder AppleShowAllFiles -bool true
</code></p>

<p>隐藏Mac隐藏文件的命令：
<code>
defaults write com.apple.finder AppleShowAllFiles -bool false
</code></p>

<p>或者</p>

<p>显示Mac隐藏文件的命令：
<code>
defaults write com.apple.finder AppleShowAllFiles  YES
</code></p>

<p>隐藏Mac隐藏文件的命令：
<code>
defaults write com.apple.finder AppleShowAllFiles  NO
</code></p>

<!--more-->


<p>输完单击Enter键，退出终端，重新启动Finder就可以。</p>

<p>重启Finder：
<code>
鼠标单击窗口左上角的苹果标志--&gt;强制退出--&gt;Finder--&gt;重新启动
</code></p>

<p>但是对于熟悉Unix的码农来说，直接输入以下命令就好。
<code>
$ ls -a
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAC OS X系统目录结构]]></title>
    <link href="http://txgcwm.github.io/blog/2015/06/16/macosxxi-tong-mu-lu-jie-gou/"/>
    <updated>2015-06-16T00:15:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/06/16/macosxxi-tong-mu-lu-jie-gou</id>
    <content type="html"><![CDATA[<p>Mac OS X已经是被认证的Unix系统，所以其目录结构基本符合Unix系统目录结构。但是有很多目录在Finder中并看不到，这是因为这些目录的被设置了隐藏属性，我们可以在终端窗口中利用unix命令查看。</p>

<h1>unix传统目录</h1>

<ul>
<li>/bin 传统unix命令的存放目录，如ls、rm、mv等。</li>
<li>/sbin 传统unix管理类命令存放目录，如fdisk、ifconfig等等。</li>
<li>/usr 第三方程序安装目录，包含/usr/bin、/usr/sbin、/usr/lib等目录，其中/usr/lib目录中存放了共享库（动态链接库）。</li>
<li>/etc 标准unix系统配置文件存放目录，如用户密码文件/etc/passwd，此目录实际为指向/private/etc的链接。</li>
<li>/dev 设备文件存放目录，如代表硬盘的/dev/disk0。</li>
<li>/tmp 临时文件存放目录，其权限为所有人任意读写，此目录实际为指向/private/tmp的链接。</li>
<li>/var 存放经常变化的文件，如日志文件，此目录实际为指向/private/var的链接。</li>
</ul>


<!--more-->


<h1>OS X特有的目录</h1>

<p>OS X系统中，除了标准的unix目录外，还增加了特有的目录。</p>

<ul>
<li>/Applications 应用程序目录，默认所有的GUI应用程序都安装在这里。</li>
<li>/Library 系统的数据文件、帮助文件、文档等等。</li>
<li>/Network 网络节点存放目录。</li>
<li>/System 只包含一个名为Library的目录，这个子目录中存放了系统的绝大部分组件，如各种framework以及内核模块和字体文件等等。</li>
<li>/Users 存放用户的个人资料和配置，每个用户有自己的单独目录。</li>
<li>/Volumes 文件系统挂载点存放目录。</li>
<li>/cores 内核转储文件存放目录，当一个进程崩溃时，如果系统允许则会产生转储文件。</li>
<li>/private 里面的子目录存放了/tmp、/var、/etc等链接目录的目标目录。</li>
</ul>


<h1>用户资料存放位置</h1>

<p>对于普通OS X用户来说，对系统目录树结构的理解与否并不影响正常使用系统，以至于OS X把很多目录都故意隐藏，让普通用户通过Finder不能看到。用户真正关心的是把自己的资料存放到哪里更加方便和安全。</p>

<p>Windows用户通常会把个人资料存放在非系统盘的其它分区中，因为Windows系统一旦死掉，C盘的内容很可能就找不回来了。Mac OS X的用户则不用担心这个问题，OS X发生崩溃和不能启动的概率实在是太低了，就算是系统出现问题，由于用户目录和系统目录是彼此独立的，所以也容易找回。所以通常情况下，用户直接把资料存放在自己的用户目录中，OS X也建议用户这么做，并且已经为用户准备好了常用的子目录。</p>

<p>应用程序、文档、下载、音乐、电影、图片、公共，对于普通用户来说这些子目录也就够用了，当然如果你觉得不够，可以自己随便添加。</p>

<p>从Windows过来的用户，如果还想保持原来的习惯，把用户文件和系统文件存放在不同的分区中，那么就需要利用“磁盘工具”重新分区，把系统分区调整小一些，留出空间建立一个新的HFS+分区，使用的时候把这个分区挂载到系统目录树上。</p>
]]></content>
  </entry>
  
</feed>
