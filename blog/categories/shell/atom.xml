<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | 残剑]]></title>
  <link href="http://txgcwm.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2015-07-11T01:38:23+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux shell图形界面dialog]]></title>
    <link href="http://txgcwm.github.io/blog/2015/07/11/linux-shelltu-xing-jie-mian-dialog/"/>
    <updated>2015-07-11T01:03:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2015/07/11/linux-shelltu-xing-jie-mian-dialog</id>
    <content type="html"><![CDATA[<p><code>Liunx</code>下的<code>dialog</code>是一个可以创建对话框的工具，每个对话框提供的输出有两种形式：1、将所有输出到<code>stderr</code>，不显示到屏幕；2、使用退出状态码，<code>OK</code>为0，<code>NO</code>为1，<code>ESC</code>为255。</p>

<h1>通用选项（<code>common options</code>）</h1>

<p>这个选项用来设置<code>dialog box</code>的背景、颜色和标题等。</p>

<p><code>--title &lt;title&gt;</code>：指定将在对话框的上方显示的标题字符串。 <br/>
<code>--colors</code>：解读嵌入式<code>\ Z</code>的对话框中的特殊文本序列，序列由下面的字符<code>0-7</code>, <code>b</code>，<code>B</code>, <code>u</code>, <code>U</code>等组成，恢复正常的设置使用<code>\Zn</code>。            <br/>
<code>--no-shadow</code>：禁止阴影出现在每个对话框的底部。 <br/>
<code>--shadow</code>：出现阴影效果。  <br/>
<code>--insecure</code>：输入部件的密码时，使用星号来代表每个字符。   <br/>
<code>--no-cancel</code>：设置在输入框、菜单和复选框中不显示<code>cancel</code>项。 <br/>
<code>--clear</code>：完成清屏操作，在框体显示结束后，清除框体，这个参数只能单独使用，不能和别的参数联合使用。 <br/>
<code>--ok-label &lt;str&gt;</code>：覆盖使用<code>OK</code>按钮标签，换做其它字符。<br/>
<code>--cancel-label &lt;str&gt;</code>：功能同上。<br/>
<code>--backtitle &lt;backtitle&gt;</code>：指定的<code>backtitle</code>字符串显示在背景顶端。  <br/>
<code>--begin &lt;y&gt; &lt;x&gt;</code>：指定对话框左上角在屏幕上的坐标。  <br/>
<code>--timeout &lt;secs&gt;</code>：超时（返回的错误代码），如果用户在指定的时间内没有给出相应动作，就按超时处理。 <br/>
<code>--defaultno</code>：使的是默认值<code>yes/no</code>，使用<code>no</code>。 <br/>
<code>--sleep &lt;secs&gt;</code> <br/>
<code>--stderr</code>：以标准错误方式输出。 <br/>
<code>--stdout</code>：以标准方式输出。 <br/>
<code>--default-item &lt;str&gt;</code>：设置在一份清单、表格或菜单中的默认项目，通常在框中的第一项是默认的。</p>

<!--more-->


<h1>窗体类型：</h1>

<p>常见的对话框控件选项如下所示：</p>

<p><code>--calendar</code>：提供了一个日历，让你可以选择日期。 <br/>
<code>--checklist</code>：允许你显示一个选项列表，每个选项都可以被单独的选择(复选框)。 <br/>
<code>--from</code>：允许建立一个带标签的文本字段，并要求填写。 <br/>
<code>--fselect</code>：提供一个路径，让你选择浏览的文件。 <br/>
<code>--gauge</code>：显示一个表，呈现出完成的百分比，就是显示出进度。 <br/>
<code>--infobox</code>：显示消息后，（没有等待响应）对话框立刻返回，但不清除屏幕(信息框)。 <br/>
<code>--inputbox</code>：让用户输入文本(输入框)。 <br/>
<code>--inputmenu</code>：提供一个可供用户编辑的菜单（可编辑的菜单框）。 <br/>
<code>--menu</code>：显示一个列表供用户选择(菜单框)。 <br/>
<code>--msgbox</code>：显示一条消息，并要求用户选择一个确定按钮(消息框)。 <br/>
<code>--pause</code>：显示一个表格用来显示一个指定的暂停期的状态。 <br/>
<code>--passwordbox</code>：显示一个输入框，它隐藏文本。       <br/>
<code>--passwordfrom</code>：显示一个来源于标签并且隐藏的文本字段。 <br/>
<code>--radiolist</code>：提供一个菜单项目组，只有一个项目，可以选择(单选框)。 <br/>
<code>--tailbox</code>：在一个滚动窗口文件中使用<code>tail</code>命令来显示文本。   <br/>
<code>--tailboxbg</code>：跟<code>tailbox</code>类似，但是在<code>background</code>模式下操作。 <br/>
<code>--textbox</code>：在带有滚动条的文本框中显示文件的内容(文本框)。 <br/>
<code>--timebox</code>：提供一个窗口，选择小时、分钟、秒。 <br/>
<code>--yesno</code>：提供一个带有<code>yes</code>和<code>no</code>按钮的简单信息框(是/否框)。</p>

<h1>命令示例</h1>

<h2>消息框</h2>

<p>格式：
<code>
dialog --msgbox text height width
</code>
例子：
<code>
$ dialog --title TESTING --msgbox "this is a test" 10 20
</code></p>

<h2>yesno框</h2>

<p>格式：
<code>
dialog --yesno text height width
</code></p>

<p>例子：
<code>
$ dialog --title "yes/no" --no-shadow --yesno "Delete the file /tmp/canjian.txt?" 10 30
</code></p>

<h2>输入框</h2>

<p>格式：
<code>
dialog --inputbox text height width
</code>
例子：
<code>
$ dialog --title "Input your name" --inputbox "Please input your name:" 10 30  2&gt; /tmp/name.txt
</code>
这里的<code>2&gt;</code>是将错误信息输出重定向到<code>/tmp/name.txt</code>文件中。</p>

<h2>密码框</h2>

<p>格式：
<code>
dialog --passwordbox text height width [init]
</code>
例子：
<code>
$ dialog --title "Password" --passwordbox "Please give a password for the new user:" 10 35
</code>
密码暴露出来不安全，所以通常我们会加上一个安全选项<code>--insecure</code>，将每个字符用<code>*</code>来显示。
<code>
$ dialog --title "Password" --insecure --passwordbox "Please give a password for the new user:" 10 30
</code></p>

<h2>文本框</h2>

<p>格式：
<code>
dialog --textbox file height width
</code>
例子：
<code>
$ dialog --title "The fstab" --textbox /etc/fstab 17 40
</code></p>

<h2>菜单框</h2>

<p>格式：
<code>
dialog --menu text height width menu-height tag1 item1 tag2 item2 …
</code></p>

<p>例子：
<code>
$ dialog --title "Pick a choice" --menu "Choose one" 12 35 5 1 "say hello to everyone" 2 "thanks for your support" 3 "exit"
</code></p>

<h2>Fselect框(文件选框)</h2>

<p>格式：
<code>
dialog --fselect filepath height width
</code>
例子：
<code>
$ dialog --title "Pick one file" --fselect /root/ 7 40
</code></p>

<h2>复选框</h2>

<p>格式：
<code>
dialog --checklist "Test" height width menu-height tag1 item1 tag2 item2 …
</code></p>

<p>例子：
<code>
$ dialog --backtitle "Checklist" --checklist "Test" 20 50 10 Memory Memory_Size 1 Dsik Disk_Size 2
</code></p>

<h2>显示日历</h2>

<p>格式：
<code>
dialog --calendar "Date" height width day month year
</code>
例子：</p>

<p>显示当前日期
<code>
$ dialog --title "Calendar" --calendar "Date" 5 50
</code>
显示指定日期
<code>
$ dialog --title "Calendar" --calendar "Date" 5 50 1 2 2013
</code></p>

<h2>进度框架</h2>

<p>格式：
<code>
dialog --gauge text height width  [&lt;percent&gt;]
</code>
例子：</p>

<p>固定进度显示
<code>
$ dialog --title "installation pro" --gauge "installation" 10 30 10
</code>
实时动度进度
<code>
$ for i in {1..100} ;do echo $i;done | dialog --title "installation pro" --gauge "installation" 10 30
</code></p>

<p>编辑一个gauge.sh的脚本，内容如下：
```</p>

<h1>!/bin/bash</h1>

<p>declare -i PERCENT=0
(</p>

<pre><code>for I in /etc/*;
do
    if [ $PERCENT -le 100 ];then
        cp -r $I /tmp/test 2&gt; /dev/null
        echo "XXX" 
        echo "Copy the file $I ..." 
        echo "XXX" 
        echo $PERCENT  
    fi

    let PERCENT+=1
    sleep 0.1
done
</code></pre>

<p>) | dialog &mdash;title &ldquo;coping&rdquo; &mdash;gauge &ldquo;starting to copy files&hellip;&rdquo; 6 50 0
```</p>

<h2>from框架(表单)</h2>

<p>格式：
<code>
dialog --form text height width formheight [ label y x item y x flen ilen ] ...
</code>
其中：<code>flen</code>表示<code>field length</code>，定义了选定字段中显示的长度；<code>ilen</code>表示<code>input-length</code>, 定义了在外地输入的数据允许的长度。使用<code>up/down</code>（或<code>ctrl/ N</code>，<code>ctrl/ P</code>）在使用领域之间移动，使用<code>tab</code>键在窗口之间切换。</p>

<p>例子：
<code>
$ dialog --title "Add a user" --form "Please input the infomation of new user:" 12 40 4 \
  "Username:" 1  1 "" 1  15  15  0 \
  "Full name:" 2  1 "" 2  15  15  0 \
  "Home Dir:" 3  1 "" 3  15  15  0 \
  "Shell:"    4   1 "" 4  15  15  0
</code></p>

<h1>综合应用示例</h1>

<p>```</p>

<h1>! /bin/bash</h1>

<p>yesno()
{</p>

<pre><code>dialog --title "First screen" --backtitle "Test Program" --clear --yesno \
    "Start this test program or not ? \nThis decesion have to make by you." 16 51

# yes is 0, no is 1 , esc is 255
result=$?
if [ $result -eq 1 ] ; then
    exit 1;
elif [ $result -eq 255 ]; then
    exit 255;
fi

username;
</code></pre>

<p>}</p>

<p>username()
{</p>

<pre><code>cat /dev/null &gt;/tmp/test.username
dialog --title "Second screen" --backtitle "Test Program" --clear --inputbox \
    "Please input your username (default: hello) " 16 51 "hello" 2&gt;/tmp/test.username

result=$?
if [ $result -eq 1 ] ; then
    yesno;
elif [ $result -eq 255 ]; then
    exit 255;
fi

password;
</code></pre>

<p>}</p>

<p>password()
{</p>

<pre><code>cat /dev/null &gt;/tmp/test.password
dialog  --insecure --title "Third screen" --backtitle "Test Program" --clear --passwordbox \
    "Please input your password (default: 123456) " 16 51 "123456" 2&gt;/tmp/test.password

result=$?
if [ $result -eq 1 ] ; then
    username;
elif [ $result -eq 255 ]; then
    exit 255;
fi

occupation;
</code></pre>

<p>}</p>

<p>occupation()
{</p>

<pre><code>cat /dev/null &gt;/tmp/test.occupation
dialog --title "Forth screen" --backtitle "Test Program" --clear --menu \
    "Please choose your occupation: (default: IT)" 16 51 3 \
    IT "The worst occupation" \
    CEO "The best occupation" \
    Teacher "Not the best or worst"  2&gt;/tmp/test.occupation

result=$?
if [ $result -eq 1 ] ; then
    password;
elif [ $result -eq 255 ]; then
    exit 255;
fi

finish;
</code></pre>

<p>}</p>

<p>finish()
{</p>

<pre><code>dialog --title "Fifth screen" --backtitle "Test Program" --clear --msgbox \
    "Congratulations! The test program has finished!\n Username: $(cat /tmp/test.username)\n Password: $(cat /tmp/test.password)\n Occupation: $(cat /tmp/test.occupation)" 16 51

result=$?
if [ $result -eq 1 ] ; then
    occupation
elif [ $result -eq 255 ]; then
    exit 255;
fi
</code></pre>

<p>}</p>

<p>yesno;
```</p>

<br></br>


<p><a href="http://blog.csdn.net/shenwanjiang111/article/details/42047901">Linux下的dialog工具使用方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[进程优先级控制：nice和renice]]></title>
    <link href="http://txgcwm.github.io/blog/2014/06/28/jin-cheng-you-xian-ji-kong-zhi-%3Anicehe-renice/"/>
    <updated>2014-06-28T14:41:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2014/06/28/jin-cheng-you-xian-ji-kong-zhi-:nicehe-renice</id>
    <content type="html"><![CDATA[<p>Linux进程调度的目标：</p>

<ol>
<li>高效性：高效意味着在相同的时间下要完成更多的任务，调度程序会被频繁的执行，所以调度程序要尽可能的高效；</li>
<li>加强交互性能：在系统相当的负载下，也要保证系统的响应时间；</li>
<li>保证公平和避免饥渴；</li>
<li>SMP调度：调度程序必须支持多处理系统；</li>
<li>软实时调度：系统必须有效的调用实时进程，但不保证一定满足其要求。</li>
</ol>


<p>Linux给予进程一个优先运行序 (priority, PRI)， 这个PRI值越低代表优先级越高。不过这个PRI值是由核心动态调整的，使用者无法直接调整PRI值。</p>

<p>由于PRI是核心动态调整的，使用者无权去干涉。如果想要调整进程的优先运行序，就要透过Nice值了。一般来说， PRI与NI的相关性如下：
<code>
PRI(new) = PRI(old) + nice
</code></p>

<!--more-->


<p>不过要特别留意，如果原本的PRI是50，并不是给予一个<code>nice = 5</code>，就会让PRI变成55，因为PRI是系统动态决定的。所以，虽然nice值可以影响PRI，不过最终的PRI仍是要经过系统分析后才会决定。另外，nice值是有正负的，而既然PRI越小越早被运行，所以当nice值为负值时，那么该进程就会降低PRI值，亦即会被优先处理。此外，必须要留意到：</p>

<ul>
<li>nice值可调整的范围为-20 ~ 19；</li>
<li>root可随意调整自己或他人进程的Nice值，且范围为-20 ~ 19；</li>
<li>一般使用者仅可调整自己进程的Nice值，且范围仅为0 ~ 19(避免一般用户抢占系统资源)；</li>
<li>一般使用者仅可将nice值越调越高，例如本来nice为5，则未来仅能调整到大于5；</li>
<li>一开始运行程序就立即给予一个特定的nice值，用nice命令，例如<code>nice -n 10 ping www.163.com</code>；</li>
<li>调整某个已经存在的PID的nice值，用renice命令，例如<code>renice 19 2251</code>或者<code>renice 19 3675 4103</code>（同时调整多个进程的优先级）;</li>
<li>针对指定用户，把这些用户的进程优先级全部做调整，例如<code>sudo renice 1 -u test</code>或者<code>sudo renice -2 -u test mysql root</code>（调整多个用户的进程优先级）；</li>
<li>优先级会继承，例如当前bash的优先级是81，nice为1，在bash下产生的所有子进程都会继续父进程的优先级。</li>
</ul>


<br></br>


<p><big>参考文章</big></p>

<p><a href="http://www.cnblogs.com/zhaoyl/archive/2012/09/04/2671156.html">Linux进程调度原理</a><br/>
<a href="http://linzhibin824.blog.163.com/blog/static/7355771020135801151813/">进程优先级控制——nice和renice命令</a> <br/>
<a href="http://blog.csdn.net/ganglia/article/details/11028199">进程优先级，进程nice值和%nice的解释</a> <br/>
<a href="http://blog.sina.com.cn/s/blog_53689eaf0101b5xd.html">linux中限制用户进程CPU和内存占用率</a><br/>
<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-shell-monitoring/">使用shell脚本对Linux系统和进程资源进行监控</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cp命令]]></title>
    <link href="http://txgcwm.github.io/blog/2014/03/30/cpming-ling/"/>
    <updated>2014-03-30T09:45:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2014/03/30/cpming-ling</id>
    <content type="html"><![CDATA[<p>该命令的功能是将给出的文件或目录拷贝到另一文件或目录中，同MS-DOS下的copy命令一样，功能十分强大。</p>

<p>语法:
<code>
cp [选项] 源文件或目录 目标文件或目录
</code></p>

<p>说明:该命令把指定的源文件复制到目标文件或把多个源文件复制到目标目录中。</p>

<p>该命令的各选项含义如下：
<code>
-a      该选项通常在拷贝目录时使用。它保留链接、文件属性，并递归地拷贝目录，其作用等于dpR选项的组合。
-d      拷贝时保留链接。
-f      删除已经存在的目标文件而不提示。
-i      和f选项相反，在覆盖目标文件之前将给出提示要求用户确认。回答y时目标文件将被覆盖，是交互式拷贝。
-p      此时cp除复制源文件的内容外，还将把其修改时间和访问权限也复制到新文件中。
-r      若给出的源文件是一目录文件，此时cp将递归复制该目录下所有的子目录和文件。此时目标文件必须是一个目录名。
-l      不作拷贝，只是链接文件。
</code>
需要说明的是，为防止用户在不经意的情况下用cp命令破坏另一个文件，如用户指定的目标文件名已存在，用cp命令拷贝文件后，这个文件就会被新源文件覆盖，因此，建议用户在使用cp命令拷贝文件时，最好使用i选项。</p>

<!--more-->


<p>例子:
<code>
cp -i file1 file2    将文档file1复制成file2，-i为提示确认。
cp file1 dir1        将文档file1复制到目录dir1下，文件名仍为file1。
cp /tmp/file1 .      将目录/tmp下的文档file1复制到当前目录下，文档名仍为file1。
cp /tmp/file1 file2  将目录/tmp下的文档file1复制到当前目录下，文档名为file2
cp -r dir1 dir2      (recursive copy)复制整个目录。若目录dir2存在，则将目录dir1及其所有文档和子目录复制
到目录dir2下，新目录名称为dir1。若目录dir2不存在，则将dir1及其所有文档和子目录复制为目录dir2。
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux的硬链接与软链接]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/29/linuxde-ying-lian-jie-yu-ruan-lian-jie/"/>
    <updated>2013-07-29T23:37:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/29/linuxde-ying-lian-jie-yu-ruan-lian-jie</id>
    <content type="html"><![CDATA[<p>文件有文件名与数据，这在Linux上被分成两个部分：用户数据(user data)与元数据(metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在Linux中，元数据中的inode号（inode是文件元数据的一部分但其并不包含文件名，inode号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过inode号寻找正确的文件数据块。下图展示了程序通过文件名获取文件内容的过程。</p>

<p><img src="/images/2013/7/link/file.png" alt=" file " /></p>

<p>为解决文件的共享使用，Linux系统引入了两种链接：硬链接(hard link)与软链接（又称符号链接，即soft link或symbolic link）。链接为Linux系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个inode号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名。</p>

<p><img src="/images/2013/7/link/access.png" alt=" access " /></p>

<!--more-->


<h1>硬链接</h1>

<p>硬链接可由命令link或ln创建。如下是对文件oldfile创建硬链接。
<code>
link oldfile newfile
ln oldfile newfile
</code>
由于硬链接是有着相同inode号仅文件名不同的文件，因此硬链接存在以下几点特性：</p>

<ul>
<li>文件有相同的inode及data block；</li>
<li>只能对已存在的文件进行创建；</li>
<li>不能交叉文件系统进行硬链接的创建；</li>
<li>不能对目录进行创建，只可对文件创建；</li>
<li>删除一个硬链接文件并不影响其它有相同inode号的文件。
```
$ ls -li
total 0</li>
</ul>


<p>// 只能对已存在的文件创建硬连接
$ link old.file hard.link
link: cannot create link <code>hard.link' to</code>old.file': No such file or directory</p>

<p>$ echo &ldquo;This is an original file&rdquo; > old.file
$ cat old.file
This is an original file
$ stat old.file
  File: `old.file'
  Size: 25          Blocks: 8          IO Block: 4096   regular file
Device: 807h/2055d  Inode: 796901      Links: 1
Access: (0664/-rw-rw-r&mdash;)  Uid: ( 1000/  txgcwm)   Gid: ( 1000/  txgcwm)
Access: 2013-07-29 23:57:49.435157205 +0800
Modify: 2013-07-29 23:57:27.295157688 +0800
Change: 2013-07-29 23:57:27.295157688 +0800
 Birth: &ndash;</p>

<p>// 文件有相同的inode号以及data block
$ link old.file hard.link | ls -li
total 8
796901 -rw-rw-r&mdash; 2 txgcwm txgcwm 25 Jul 29 23:57 hard.link
796901 -rw-rw-r&mdash; 2 txgcwm txgcwm 25 Jul 29 23:57 old.file</p>

<p>// 不能交叉文件系统
$ sudo ln /dev/input/event5 /root/bfile.txt
[sudo] password for txgcwm:
ln: failed to create hard link <code>/root/bfile.txt' =&gt;</code>/dev/input/event5': Invalid cross-device link</p>

<p>// 不能对目录进行创建硬连接
$ mkdir -p old.dir/test
$ ln old.dir/ hardlink.dir
ln: `old.dir/&lsquo;: hard link not allowed for directory
<code>
文件old.file与hard.link有着相同的inode号（796901）及文件权限，inode是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当inode存在且链接计数器（link count）不为0时。inode号仅在各文件系统下是唯一的，当Linux挂载多个文件系统后将出现inode号重复的现象，因此硬链接创建时不可跨文件系统。设备文件目录/dev使用的文件系统是devtmpfs，而/home（与根目录/一致）使用的是磁盘文件系统ext4。以下使用命令df查看当前系统中挂载的文件系统类型、各文件系统inode使用情况及文件系统挂载点。
</code>
$ sudo df -i &mdash;print-type
Filesystem     Type      Inodes  IUsed   IFree IUse% Mounted on
/dev/sda5      ext4     1250928  63404 1187524    6% /
udev           devtmpfs  211313    603  210710    1% /dev
tmpfs          tmpfs     215180    566  214614    1% /run
none           tmpfs     215180      3  215177    1% /run/lock
none           tmpfs     215180      9  215171    1% /run/shm
none           tmpfs     215180     23  215157    1% /run/user
/dev/sda6      ext4       62464    355   62109    1% /boot
/dev/sda7      ext4     1250928  91579 1159349    8% /home
/dev/sda11     ext4     2501856 336584 2165272   14% /srv
/dev/sda12     ext4     1875968 144226 1731742    8% /opt
/dev/sda8      ext4      249984    132  249852    1% /tmp
/dev/sda9      ext4     1250928 584616  666312   47% /usr
/dev/sda10     ext4      249984  24565  225419   10% /var</p>

<p>$ sudo find / -inum 1114
/lib/modules/3.5.0-25-generic/kernel/drivers/hwmon/mcp3021.ko
/sys/devices/LNXSYSTM:00/device:00/PNP0A08:00/device:02/PNP0C02:00/power/autosuspend_delay_ms
<code>
值得一提的是，Linux系统存在inode号被用完但磁盘空间还有剩余的情况。硬链接不能对目录创建是受限于文件系统的设计。现Linux文件系统中的目录均隐藏了两个特殊的目录：当前目录（.）与父目录（..）。查看这两个特殊目录的inode号可知其实这两目录就是两个硬链接（注意目录/lost+found/的inode号）。若系统允许对目录创建硬链接，则会产生目录环。
</code>
$ sudo ls -aliF /lost+found
total 20
11 drwx&mdash;&mdash;&mdash;  2 root root 16384 Nov 11  2012 ./
 2 drwxr-xr-x 23 root root  4096 Jul  7 13:47 ../</p>

<p>$ sudo stat /lost+found/
  File: `/lost+found/&lsquo;
  Size: 16384       Blocks: 32         IO Block: 4096   directory
Device: 805h/2053d  Inode: 11          Links: 2
Access: (0700/drwx&mdash;&mdash;&mdash;)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2013-07-30 00:10:47.479140197 +0800
Modify: 2012-11-11 00:50:27.000000000 +0800
Change: 2012-11-11 00:50:27.000000000 +0800
 Birth: &ndash;
```</p>

<h1>软链接</h1>

<p>软链接与硬链接不同，若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软连接。软链接就是一个普通文件，只是数据块内容有点特殊。软链接有着自己的inode号以及用户数据块。因此软链接的创建与使用没有类似硬链接的诸多限制：</p>

<ul>
<li>软链接有自己的文件属性及权限等；</li>
<li>可对不存在的文件或目录创建软链接；</li>
<li>软链接可交叉文件系统；</li>
<li>软链接可对文件或目录创建；</li>
<li>创建软链接时，链接计数 i_nlink 不会增加；</li>
<li>删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）。
```
$ ls -li
total 0</li>
</ul>


<p>// 可对不存在的文件创建软链接
$ ln -s old.file soft.link
$ ls -liF
total 0
796810 lrwxrwxrwx 1 txgcwm txgcwm 8 Jul 30 00:25 soft.link &ndash;> old.file</p>

<p>// 由于被指向的文件不存在，此时的软链接 soft.link 就是死链接
$ cat soft.link
cat: soft.link: No such file or directory</p>

<p>// 创建被指向的文件 old.file，soft.link 恢复成正常的软链接
$ echo &ldquo;This is an original file_A&rdquo; >> old.file
$ cat soft.link
This is an original file_A</p>

<p>// 对不存在的目录创建软链接
$ ln -s old.dir soft.link.dir
$ mkdir -p old.dir/test
$ tree . -F &mdash;inodes
.
├── [ 796834]  old.dir/
│   └── [ 796851]  test/
├── [ 796830]  old.file
├── [ 796830]  soft.link &ndash;> old.file
└── [ 796834]  soft.link.dir &ndash;> old.dir/</p>

<p>3 directories, 2 files
```</p>

<h1>参考文章</h1>

<p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/">理解Linux的硬链接与软链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux操作系统下的MAN命令]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/27/linuxcao-zuo-xi-tong-xia-de-manming-ling/"/>
    <updated>2013-07-27T13:27:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/27/linuxcao-zuo-xi-tong-xia-de-manming-ling</id>
    <content type="html"><![CDATA[<p>Unix/Linux下的man命令可以查询常用的命令和函数。可是只知道用“man 函数名”来查询会遇到很多问题，比如<code>man read</code>，想看的是ANSI C中stdio的read函数原型和说明，出来的却是BASH命令的说明。这是怎么回事呢？原来read本身是man命令的一个参数，这样就会以为你要使用read的功能，而不是查看read函数。那么要怎样查看read函数呢?可以使用<code>man 2 read</code>或者是<code>man 3 read</code>查看。</p>

<h1>分卷号</h1>

<p>以上指令的中间数字是什么意思呢？是man的分卷号，所有的手册页都属于一个特定的分卷号，用一个字符来表示。Linux下最通用的分卷号及其名称和说明如下表所示。</p>

<table>
<thead>
<tr>
<th>分卷号         </th>
<th>名称 </th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td> 用户命令     </td>
<td> 可由任何人启动  </td>
</tr>
<tr>
<td>2</td>
<td> 系统调用     </td>
<td> 由内核提供的函数  </td>
</tr>
<tr>
<td>3</td>
<td> 例程        </td>
<td> 库函数    </td>
</tr>
<tr>
<td>4</td>
<td> 设备        </td>
<td> /dev目录下的特殊文件   </td>
</tr>
<tr>
<td>5</td>
<td> 文件格式描述  </td>
<td> 例如/etc/passwd   </td>
</tr>
<tr>
<td>6</td>
<td> 游戏        </td>
<td> 略  </td>
</tr>
<tr>
<td>7</td>
<td> 杂项        </td>
<td> 例如宏命令包、惯例等  </td>
</tr>
<tr>
<td>8</td>
<td> 系统管理员工具</td>
<td> 只能由root启动  </td>
</tr>
<tr>
<td>9</td>
<td> 其他（Linux特定的）</td>
<td> 用来存放内核例行程序的文档  </td>
</tr>
<tr>
<td>n</td>
<td> 新文档           </td>
<td> 可能要移到更适合的领域  </td>
</tr>
<tr>
<td>o</td>
<td> 老文档           </td>
<td> 可能会在一段期限内保留  </td>
</tr>
<tr>
<td>l</td>
<td> 本地文档          </td>
<td> 与特定系统有关的  </td>
</tr>
</tbody>
</table>


<!--more-->


<br></br>


<h1>常用参数和用法</h1>

<ul>
<li>打开所有领域内的同名帮助，例如man fam，首先会进入一个fam(1M)的命令版fam帮助，再按q键就会进入FAM(3X)，库函数版的帮助。
<code>
$ man -a cmd
</code></li>
<li>显示所有cmd的所有手册文件的路径，如<code>man -aw fam</code>指令。
<code>
$ man -aw cmd
</code></li>
<li>直接指定特定领域内搜索手册页，如<code>man 3 fam</code>直接进入库函数版的帮助。
<code>
$ man 领域代号 cmd
</code></li>
<li>指定手册文件的搜索路径，如<code>man -M /home/mysql/man mysql</code>显示的就是你安装的mysql的帮助，而不是系统自带的旧版mysql的帮助。
<code>
$ man -M cmd
</code></li>
<li>把man手册信息输出到文本文件。
<code>
$ man cmd | col -b &gt; cmd.txt
</code></li>
<li>查看特定语言版本的手册页，显示特定语言manpage文件的路径。
<code>
$ LANG=语言代号
$ man -w cmd
</code></li>
</ul>


<p>例如要查看mplayer的中文man路径：
<code>
$ LANG=en_US.UTF-8
$ man -w mplayer
/usr/share/man/zh/man1/mplayer.1.gz
</code></p>

<h1>配置文件/etc/man.config</h1>

<p>如果不想每次<code>man cmd</code>都要用<code>-M</code>指定路径，那么可以通过修改配置文件，添加内容如：</p>

<pre><code>MANPATH /home/mysql/man
</code></pre>

<p>man在各领域的搜索次序可以通过修改以下设置：</p>

<pre><code>MANSECT 1:8:2:3:4:5:6:7:9:tcl:n:l:p:o
</code></pre>

<p>不过，一般不推荐修改man的配置文件。</p>
]]></content>
  </entry>
  
</feed>
