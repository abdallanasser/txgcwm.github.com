<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unix/Linux | 残剑]]></title>
  <link href="http://txgcwm.github.io/blog/categories/unix-linux/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2013-07-24T18:37:42+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[astyle格式化代码]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/24/astylege-shi-hua-dai-ma/"/>
    <updated>2013-07-24T18:36:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/24/astylege-shi-hua-dai-ma</id>
    <content type="html"><![CDATA[<p>astyle是一个开源工具，它可以方便的将代码格式化成自己想要的样式而不必人工修改。可以在终端下输入指令<code>sudo apt-get install astyle</code>安装，也可以到 <a href="http://astyle.sourceforge.net/">这里</a> 下载源码后自己编译安装。</p>

<p>下面介绍一下astyle的简单使用。例如有以下的源码：
```</p>

<h1>include &lt;stdio.h></h1>

<p>int main(int argc, char **argv)
{int i;printf(&ldquo;Just a test!\n&rdquo;);for(i=0;i&lt;10;++i)printf(&ldquo;%d\n&rdquo;,i);}return 0;}
```</p>

<!--more-->


<p>然后在终端下输入以下指令：
<code>
$ astyle test1.c
</code>
效果如下：
```</p>

<h1>include &lt;stdio.h></h1>

<p>int main(int argc, char **argv)
{</p>

<pre><code>int i;
printf("Just a test!\n");
for(i=0; i&lt;10; ++i) {
    printf("%d\n",i);
}
return 0;
</code></pre>

<p>}
```</p>

<p>当然也可以加上一些选项，例如“astyle &mdash;style=bsd test1.c”，“ astyle &mdash;style=gnu test1.c”等等。</p>

<p>在vim中的命令模式下，可以使用下面的某一种方式来格式化代码。
<code>
%!astyle (simple case - astyle default mode is C/C++)
</code>
或者
<code>
%!astyle --mode=c --style=ansi -s2 (ansi C++ style, use two spaces per indent level)
</code>
或者
<code>
1,40!astyle --mode=c --style=ansi (ansi C++ style, filter only lines 1-40)
</code></p>

<p>在格式化完代码后，会生成一个后缀为orig的文件，格式化完成之后将它们删除。为方便使用，可以把它写成一个脚本，代码如下：
```</p>

<h1>! /bin/bash</h1>

<p>for f in $(find . -name &lsquo;<em>.c&rsquo; -or -name &lsquo;</em>.cpp&rsquo; -or -name &lsquo;*.h&rsquo; -type f)
do</p>

<pre><code>astyle $f
</code></pre>

<p>done</p>

<h1>after formate the code,we need to rm &lsquo;*.orig&rsquo; files</h1>

<p>for f in $(find . -name &lsquo;*.orig&rsquo; -type f)
do</p>

<pre><code>rm $f
</code></pre>

<p>done
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to resolve "error opening terminal Linux"]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/24/how-to-resolve-error-opening-terminal-linux/"/>
    <updated>2013-07-24T18:33:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/24/how-to-resolve-error-opening-terminal-linux</id>
    <content type="html"><![CDATA[<p>Linux环境下，编译嵌入式系统时会用到<code>make menuconfig</code>或<code>make config</code>命令，这些命令通常会使用ncurses库，如果ncurses库没有安装设置正确，可能出现如下的错误信息：
<code>
error opening terminal Linux
error opening terminal xterm
error opening terminal vt100
error opening terminal vt102
error opening terminal unknown
error opening terminal cgywin
...
</code></p>

<!--more-->


<p>可以按照以下两步解决问题：</p>

<ol>
<li>首先要确定ncurses库是否已经正确安装。在Debian或Ubuntu上，可以用<code>dpkg -l | grep ncurses</code>查看ncurses库是否已安装。</li>
<li>如果ncurses已经安装了，需要查看TERM和TERMINFO两个环境变量是否已经设置正确。如果没有设置正确，需要设置为正确的值。
<code>
 $ echo $TERM
 $ echo $TERMINFO
</code></li>
</ol>


<p>关于TERMINFO, 应设置为terminfo的路径，比如/usr/share/terminfo或者/lib/terminfo。查看terminfo的存储位置用以下指令：
<code>
$ whereis terminfo
terminfo: /etc/terminfo /lib/terminfo /usr/share/terminfo /usr/share/man/man5/terminfo.5.gz
</code></p>

<p>查看terminfo目录下是否保存了终端信息文件：其中通常分为a, b, c, d&hellip;z这些字母目录，每个目录中包含了以该字母开头的term信息。比如vt100放在"v"目录中。我们需要的term必须在对应的目录中存在term信息。确定这些信息后，就可以设置TERM和TERMINFO信息：
<code>
$ export TERM=vt100
$ export TERMINFO=/usr/share/terminfo
</code></p>

<p>上面的设置必须保证/usr/share/terminfo中存在term信息，且/usr/share/terminfo/v/vt100是存在的。关于TERM的设置，有可能需要设置成Linux，vt100-putty等不同的TERM。Linux通常用于Linux控制台，vt100-putty顾名思义是使用putty远程登录的vt100终端。</p>

<p>以下是在Ubuntu12.10环境下，解决了此问题后TERM和TERMINFO两个环境变量的值。
<code>
$ echo $TERM
xterm
$ echo $TERMINFO
/lib/terminfo/
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下安装SublimeText2及其插件]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/23/ubuntuxia-an-zhuang-sublimetext2ji-qi-cha-jian/"/>
    <updated>2013-07-23T22:33:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/23/ubuntuxia-an-zhuang-sublimetext2ji-qi-cha-jian</id>
    <content type="html"><![CDATA[<p>Sublime Text 2是一个轻量、简洁、高效、跨平台的编辑器，方便的配色以及兼容vim快捷键等各种优点博得了很多前端开发人员的喜爱。Sublime Text 2基本上是共享软件，免费版和收费版基本无区别，只是偶尔会弹框让你去购买，这个基本不影响使用。</p>

<h1>软件安装</h1>

<p>Ubuntu下安装Sublime Text 2有两种方式：指令安装和直接下载安装。</p>

<h2>指令安装</h2>

<p><code>
$ sudo add-apt-repository ppa:webupd8team/sublime-text-2
$ sudo apt-get update
$ sudo apt-get install sublime-text-2
</code></p>

<!--more-->


<h2>直接下载安装</h2>

<p>从 <a href="http://www.sublimetext.com/2">这里</a>下载所需要的版本，然后解压文件到安装目录。
<code>
$ sudo tar -jxvf Sublime\ Text\ 2.0.1.tar.bz2 -C /usr/local/
</code></p>

<h1>在applications菜单中创建快捷方式</h1>

<p>```
$ sudo gedit /usr/share/applications/sublimetext.desktop</p>

<p>[Desktop Entry]
Encoding=UTF-8
Name=Sublime Text
Comment=Sublime Text
Exec=/usr/local/SublimeText/sublime_text
Icon=/usr/local/SublimeText/Icon/48x48/sublime_text.png
Terminal=false
StartupNotify=true
Type=Application
Categories=Application;Development;
```</p>

<h1>安装插件</h1>

<p>安装Sublime text 2插件也有两种方法：直接安装和使用Package Control组件安装。</p>

<h2>直接安装</h2>

<p>可以直接下载安装包解压缩到Packages目录（菜单->preferences->packages）。</p>

<h2>使用Package Control组件安装</h2>

<p>也可以先安装package control组件，然后直接在线安装：</p>

<ul>
<li>按Ctrl + `调出console ，其中`是键盘左上角那个符号。</li>
<li>粘贴以下代码到底部命令行并回车。
<code>
import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'
</code></li>
<li>重启Sublime Text 2。</li>
<li>如果在Perferences->package settings中看到package control这一项，则安装成功。 如果这种方法不能安装成功，可以到 <a href="http://wbond.net/sublime_packages/package_control/installation">这里</a> 下载文件手动安装。</li>
</ul>


<p>用Package Control安装插件的方法：a、按下<code>Ctrl+Shift+P</code>调出命令面板；b、输入<code>install</code>调出Install Package选项并回车，然后在列表中选中要安装的插件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加中文标签功能]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/21/octopresstian-jia-zhong-wen-biao-qian-gong-neng/"/>
    <updated>2013-07-21T11:02:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/21/octopresstian-jia-zhong-wen-biao-qian-gong-neng</id>
    <content type="html"><![CDATA[<p>Octopress有自带的分类，详情请见 <a href="http://octopress.org/docs/plugins/category-generator/">官方文档</a> 。<code>_config.yml</code>中配置项如下：
<code>
category_dir: blog/categories
category_title_prefix: "Category: "
</code>
然后添加类似<code>categories: [Ruby&amp;Rails]</code>或<code>categories: [Ruby&amp;Rails，C/C++]</code>的分类标签配置到每个<code>_posts/*.markdown</code>文件头中，示例如下:</p>

<h2>```</h2>

<p>layout: post
title: &ldquo;Octopress添加中文标签功能&rdquo;
date: 2013-07-21 11:02
comments: true</p>

<h2>categories: [Ruby&amp;Rails,Octopress]</h2>

<p>```</p>

<!--more-->


<h1>添加分类侧边栏并支持中文</h1>

<p>尽管Octopress有自带的分类，但它并不支持中文，如果你在文章中定义了中文分类，那么点击的时候会链接到404页面。事实上，这个分类功能是通过plugins/category_generator.rb来实现，所以只要对该文件进行适当的修改和作一些其它的配置就可以提供中文分类的支持。</p>

<ul>
<li>category_generator.rb的修改我直接使用 <a href="https://github.com/denjones/denjones.github.com/blob/source/plugins/category_generator.rb">这个</a> 文件作了替换，然后作一些细微的修改。</li>
</ul>


<p>SPRabbit(超科学兔耳中队)的 <a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">修改方法</a> 是重新定义分类标签在文章中的格式，例如用<code>中文分类标签名{英文别名}</code>这样的格式来定义标签。于是在文章中显示的是中文分类，但实际链接到英文别名上。这种方法虽然定义标签麻烦些，但可定制性强。</p>

<p>由于书写很麻烦，所以很不喜欢以上重新定义标签的方式，在 <a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">这里</a> 找到了另外一种更改方式。它同样是修改category_generator.rb文件来达到目的，利用了stringex包的to_url函数将中文分类标签的链接名和category_dir下的目录名都转换成相应的拼音，这样无论在本地还是GitHub上都没有问题。事实上，Octopress系统在利用rake new_[post|page]命令创建含有中文名的文章时也采用了这样的技巧。</p>

<p>找到<code>def write_category_indexes</code>中定义category目录的部分：
<code>
self.write_category_index(File.join(dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase), category)
</code>
将其修改为：
<code>
self.write_category_index(File.join(dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase), category)
</code>
再找到<code>def category_links(categories)</code>中定义中文分类网页标签的部分：
<code>
"&lt;a class='category' href='http://txgcwm.github.io/#{dir}/#{item.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase}/'&gt;#{item}&lt;/a&gt;"
</code>
将其修改为：
<code>
"&lt;a class='category' href='http://txgcwm.github.io/#{dir}/#{item.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase}/'&gt;#{item}&lt;/a&gt;"
</code>
注意，上面两处的修改就是在相应的地方加上to_url函数进行地址的转换。如果不想折腾的话，你也可以直接到 <a href="https://github.com/txgcwm/txgcwm.github.com/blob/source/plugins/category_generator.rb">这里</a> 下载我更改后的category_generator.rb插件。</p>

<ul>
<li>在plugins目录中创建category_list_tag.rb文件，文件内容如下：
```
require &lsquo;stringex&rsquo;</li>
</ul>


<p>module Jekyll
  class CategoryListTag &lt; Liquid::Tag</p>

<pre><code>def render(context)
  html = ""
  categories = context.registers[:site].categories.keys
  category_dir = context.registers[:site].config['category_dir']
  categories.sort.each do |category|
    posts_in_category = context.registers[:site].categories[category].size  
    category_url = File.join(category_dir, category.gsub(/_|\P{Word}/u, '-').gsub(/-{2,}/u, '-').to_url.downcase)
    html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://txgcwm.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
  end
  html
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_tag(&lsquo;category_list&rsquo;, Jekyll::CategoryListTag)
<code>
在实际使用（rake generate/rake preview）的时候，若blog整体采用了非ascii码的编码格式（比如utf-8）就会出现类似这样的错误：
</code>
Liquid error: incompatible encoding regexp match (ascii-8bit regexp with utf-8 string)
<code>
其实是由于插件文件plugins/category_list_tag.rb本身是ascii编码所致:
</code>
$ chardet category_list_tag.rb
category_list_tag.rb: ascii (confidence: 1.00)
```
category_list_tag.rb中很多地方用到了ruby的正则表达式，而ruby的正则表达式在匹配的时候，默认是按照“代码源文件”的编码格式(在这里是ascii)进行匹配的，而如果blog是utf-8编码的话就会出现上述错误。有两种解决办法：</p>

<ol>
<li>将category_list_tag.rb转成utf-8格式。</li>
<li>更改category_list_tag.rb中所有的正则表达式声明，加上<code>u</code>选项（<code>u</code>的意思就是以utf-8编码格式来进行匹配）。例如，若原正则表达式是<code>/regexp/</code>, 则改成<code>/regexp/u</code>。</li>
</ol>


<p>在我实际处理问题的时候采用了第二种方法，category_list_tag.rb文件中的更改网上大多采用以下的方式：
<code>
category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase)
</code>
更改成如下形式（只是简单增加了<code>u</code>选项）：
<code>
category_url = File.join(category_dir, category.gsub(/_|\P{Word}/u, '-').gsub(/-{2,}/u, '-').to_url.downcase)
</code></p>

<ul>
<li><p>添加source/_includes/custom/asides/category_list.html文件，内容可到 <a href="https://github.com/txgcwm/txgcwm.github.com/blob/source/source/_includes/custom/asides/category_list.html">这里</a> 查看。</p></li>
<li><p>修改_config.yml文件，在default_asides项中添加custom/asides/category_list.html，值之间以逗号隔开。
<code>
default_asides: [asides/recent_posts.html, custom/asides/category_list.html]
</code></p></li>
</ul>


<p><code>_posts/*.markdown</code>文件头中添加categories标签示例：</p>

<h2>```</h2>

<p>layout: post
title: &ldquo;使用libevent编写Linux服务&rdquo;
date: 2013-07-18 19:01
comments: true</p>

<h2>categories: [C/C++, 开源库, Unix/Linux]</h2>

<p>```</p>

<p>到此为止，Octopress中添加分类侧边栏并使其支持中文的修改设置已经完毕。</p>

<h1>参考文章</h1>

<ul>
<li><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">Octopress博客设置</a></li>
<li><a href="http://ikeepu.com/bar/10393365">Octopress博客分类添加中文支持</a></li>
<li><a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">Octopress易筋经，中文分类标签</a></li>
<li><a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">关于在64位 Windows 7 中部署中文化的Octopress</a></li>
<li><a href="http://pfmiles.github.io/blog/liquid-error-about-regexp-match-when-using-octopress-tagcloud/">Liquid Error About Regexp Match When Using Octopress-tagcloud</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将Emacs配置成一个C/C++的IDE编程环境]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/20/jiang-emacspei-zhi-cheng-%5B%3F%5D-ge-c-slash-c-plus-plus-de-idebian-cheng-huan-jing/"/>
    <updated>2013-07-20T14:47:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/20/jiang-emacspei-zhi-cheng-[?]-ge-c-slash-c-plus-plus-de-idebian-cheng-huan-jing</id>
    <content type="html"><![CDATA[<p>在Linux环境下编程，首先要选择开发工具，大部分程序员都是使用VIM和EMACS这两大神器。虽说它们只是编辑器，但由于其超强的可定制性，已成为广大linux工作者的首选。使用<code>sudo apt-get install emacs</code>来安装Emaces。</p>

<h1>Emacs的基本操作和组合键</h1>

<h2>模式键定义</h2>

<p>四个模式键：C&mdash;-Ctrl；M&mdash;-Alt；s&mdash;-Super(Win)；S&mdash;-Shift</p>

<p>比如：</p>

<p>C-x：表示按下ctrl键，然后按下x键。</p>

<p>C-x c C-c：表示按下ctrl，然后按下x键，松开后再按下c键。</p>

<p>C-x k：表示按下ctrl，同时按下x和k键。</p>

<!--more-->


<h2>基本组合键</h2>

<p>C-x C-c：退出Emacs。</p>

<p>C-x C-s：保存当前buffer。</p>

<p>C-x C-f：打开和新建文件。</p>

<p>C-n：光标移到下一行。</p>

<p>C-p：光标移到上一行。</p>

<p>C-k：删除一行。</p>

<p>M-x：执行命令。</p>

<h1>启动时的大小和屏幕中的位置</h1>

<p>关于修改Emacs启动大小和屏幕中的位置有两种方法：1、修该~/.Xdefault文件，然后运行<code>xrdb ~/.Xdefault</code>；2、在~/.emacs文件中进行修改。按照第二种方法作如下设置：
```
;;设置启动的大小和屏幕中的位置
(setq default-frame-alist</p>

<pre><code>'((height . 35)(width . 100)(menubar-lines . 20)(tool-bar-lines . 0)))
</code></pre>

<p>```
以上语句表示Emacs在启动后其高度为35，宽度为100，显示在屏幕的x=20，y=0处。</p>

<h1>Emacs的基本常规设定</h1>

<p>按照一般的习惯，.emacs文件中一般不会放太多的设置信息，一般放一些emacs的搜索路径信息。这里将emacs的配置文件（即lisp脚本）都放在~/.emacs.d/emacs的文件夹中。因此首先添加一个emacs的搜索路径：
<code>
;;;; 添加Emacs搜索路径
(add-to-list 'load-path "~/.emacs.d/emacs")
(add-to-list 'load-path "~/.emacs.d/emacs/ecb-2.40")
(add-to-list 'load-path "~/.emacs.d/emacs/codepilot")
(add-to-list 'load-path "~/.emacs.d/emacs/emacs-eclim")
(add-to-list 'load-path "~/.emacs.d/emacs/icicles")
(add-to-list 'load-path "~/.emacs.d/emacs/gnuserv")
</code>
然后加载我们对emacs的设置脚本，在.emacs中添加如下语句：
```
;;;;读取脚本
(load &ldquo;base.el&rdquo;)
(load &ldquo;cyexpand.el&rdquo;)
(load &ldquo;cykbd.el&rdquo;)
(load &ldquo;addon.el&rdquo;)</p>

<p>;;编程的配置
(load &ldquo;cycode.el&rdquo;)
<code>
对emacs的基本设置，即base.el文件（在~/.emacs.d/emacs中），base.el文件中的部分内容如下：
</code>
;;显示时间
;;(display-time)
(display-time-mode 1);;启用时间显示设置，在minibuffer上面的那个杠上
(setq display-time-24hr-format t);;时间使用24小时制
(setq display-time-day-and-date t);;时间显示包括日期和具体时间
;;(setq display-time-use-mail-icon t);;时间栏旁边启用邮件设置
;;(setq display-time-interval 10);;时间的变化频率，单位多少来着？</p>

<p>;;显示列号
(setq column-number-mode t)
;;没列左边显示行号,按f3显示/隐藏行号
(require &lsquo;setnu)
(setnu-mode t)
;;(global-set-key[f3] (quote setnu-mode))</p>

<p>;;显示标题栏 %f 缓冲区完整路径 %p 页面百分数 %l 行号
(setq frame-title-format &ldquo;%f&rdquo;)</p>

<p>;;=======================================================================
;;缓冲区
;;=====================================================================
;;设定行距
(setq default-line-spaceing 4)
;;页宽
(setq default-fill-column 60)
;;缺省模式 text-mode
;;(setq default-major-mode &lsquo;text-mode)
;;设置删除记录
(setq kill-ring-max 200)
;;以空行结束
;;(setq require-final-newline t)
;;开启语法高亮。
(global-font-lock-mode 1)
;;高亮显示区域选择
(transient-mark-mode t)
;;页面平滑滚动,scroll-margin 3 靠近屏幕边沿3行开始滚动，正好可以看到上下文
;;(setq scroll-margin 3 scroll-consrvatively 10000)
;;高亮显示成对括号
(show-paren-mode t)
(setq show-paren-style 'parentheses)
;;鼠标指针避光标
(mouse-avoidance-mode 'animate)
;;粘贴于光标处,而不是鼠标指针处
(setq mouse-yank-at-point t)
<code>
设置默认工作目录，即启动emacs后所在的目录，在base.el中加上下面一句：
</code>
;;设置默认工作目录
(setq default-directory &ldquo;/srv&rdquo;)
```</p>

<h1>C/C++的配置</h1>

<p>C/C++的配置主要是cycode.el文件。开发时很重要的一步就是调试，所以首先就是增加图形化调试界面：
<code>
;;==============================================================
;;gdb-UI配置
;;==============================================================
(setq gdb-many-windows t)
(load-library "multi-gud.el")
(load-library "multi-gdb-ui.el")
</code>
上面加载了两个lisp的脚本文件，这两个文件是直接在网上下载的图形化调试文件。</p>

<p>为了能高效的浏览和编辑代码，需要安装cedet插件。从官网下载cedet后，在~/.emacs.d/emacs目录中解压，根据解压出来文件夹中的INSTALL文件说明的方法安装cedet即可。有一点需要注意就是安装完成后不能删除安装后的文件，也就是需要保留解压后的文件夹。安装完成后，用下面的语句将我们需要的一些东西包含进来。
<code>
;;==================================================
;;cedet插件设置
;;==================================================
(add-to-list 'load-path "~/.emacs.d/emacs/cedet-1.1/speedbar")
(add-to-list 'load-path "~/.emacs.d/emacs/cedet-1.1/eieio")
(add-to-list 'load-path "~/.emacs.d/emacs/cedet-1.1/semantic")
</code>
然后就可进行有关cedet的设置，这里仅以一个代码折叠和展开为例：
<code>
;;代码折叠
;;(require 'semantic-tag-folding nil 'noerror)
(global-semantic-tag-folding-mode 1)
;;折叠和打开整个buffer的所有代码
(define-key semantic-tag-folding-mode-map (kbd "C--") 'semantic-tag-folding-fold-all)
(define-key semantic-tag-folding-mode-map (kbd "C-=") 'semantic-tag-folding-show-all)
;;折叠和打开单个buffer的所有代码
(define-key semantic-tag-folding-mode-map (kbd "C-_") 'semantic-tag-folding-fold-block)
(define-key semantic-tag-folding-mode-map (kbd "C-+") 'semantic-tag-folding-show-block)
</code></p>

<p>为了使用更方便（即对上面cedet插件的一个补充），需要再安装一个ecb插件。下载ecb后解压到~/.emacs.d/emacs目录中即可，然后加上下面两句：
<code>
;;==============================================================
;;ecb配置
;;==============================================================
;;(require 'ecb)
;;开启ecb用,M-x:ecb-activate
(require 'ecb-autoloads)
;;自动启动ecb并且不显示每日提示
;;(require 'ecb)
;;(setq ecb-auto-activate t)
(setq ecb-tip-of-the-day nil)
</code>
为了实现自动补全功能，需要安装auto-complete和yasnippet这两个插件。auto-complete下载后放到~/.emacs.d/emacs目录中解压，然后进入解压后的目录输入make命令即可；yasnippet下载后解压到~/.emacs.d/emacs目录中即可。下面是关于这两个插件的配置：
<code>
;;==========================================================
;;YASnippet的配置
;;==========================================================
(require 'yasnippet)    ;;not yasnippet-bundle
(yas/initialize)
(yas/load-directory "~/.emacs.d/emacs/yasnippet-0.6.1c/snippets")
</code>
装完插件后，作一些综合的配置：
```
;;配置Semantic搜索范围
(setq semanticdb-project-roots</p>

<pre><code>  (list
   (expand-file-name "/")))
</code></pre>

<p>;;自定义补全命令，如果单词在中间就补全，否则就tab
(defun my-indent-or-complete()
  (interactive)
  (if (looking-at &ldquo;\>&rdquo;)</p>

<pre><code>  (hippie-expand nil)
  (indent-for-tab-command))
</code></pre>

<p>  )
;;补全快捷键，ctrl+tab用senator补全，不显示列表
;;alt+/补全，显示列表让选择
(global-set-key [(control tab)] &lsquo;my-indent-or-complete)
(define-key c-mode-base-map [(meta ?/)] 'semantic-ia-complete-symbol-menu)
(autoload 'senator-try-expand-semantic &ldquo;senator&rdquo;)
(setq hippie-expand-try-functions-list</p>

<pre><code>  '(
    senator-try-expand-semantic
    try-expand-dabbrev
    try-expand-dabbrev-visible
    try-expand-dabbrev-all-buffers
    try-expand-dabbrev-from-kill
    try-expand-list
    try-expand-list-all-buffers
    try-expand-line
    try-expand-line-all-buffers
    try-complete-file-name-partially
    try-complete-file-name
    try-expand-whole-kill
    )
  )
</code></pre>

<p>```</p>

<h1>键绑定</h1>

<p>为了使用emacs更方便，需要一些键绑定（即自己定义一些组合键），这也是emacs配置中必不可少的一步。自定义组合键放在cykbd.el文件中。根据一般的习惯用f1来表示帮助，即man命令：
<code>
(global-set-key [f1] 'manual-entry)
(global-set-key [C-f1] 'info )
</code>
f3-f5的一些绑定：
```
;;f3为查找字符串,alt+f3关闭当前缓冲区
(global-set-key [f3] &lsquo;grep-find)
(global-set-key [M-f3] 'kill-this-buffer)</p>

<p>;;.emacs中设一个speedbar的快捷键
(global-set-key [(f4)] &lsquo;speedbar-get-focus)
;;ctrl-f4,激活,ecb
(global-set-key [C-f4] 'ecb-activate)</p>

<p>;;F5显示/隐藏工具栏 方便调试
(global-set-key [f5] &lsquo;tool-bar-mode)
;;ctrl-F5显示/隐藏菜单栏 ;; M-x menu-bar-open
(global-set-key [C-f5] 'menu-bar-mode)
<code>
f6为gdb调试，f7调用make来对原文件进行编译：
</code>
(global-set-key [f6] 'gdb)</p>

<p>;;  C-f7, 设置编译命令; f7, 保存所有文件然后编译当前窗口文件
(defun du-onekey-compile ()
  &ldquo;Save buffers and start compile&rdquo;
  (interactive)
  (save-some-buffers t)
  (switch-to-buffer-other-window &ldquo;<em>compilation</em>&rdquo;)
  (compile compile-command))</p>

<p>(setq-default compile-command &ldquo;make&rdquo;)  <br/>
(global-set-key [C-f7] &lsquo;compile)
 (global-set-key [f7] 'du-onekey-compile)
```</p>

<p>将f8为对buffer的一些常用操作：
```
;;目的是开一个shell的小buffer，用于更方便地测试程序(也就是运行程序了)，我经常会用到。
;;f8就是另开一个buffer然后打开shell，C-f8则是在当前的buffer打开shell,shift+f8清空eshell
(defun open-eshell-other-buffer ()
  &ldquo;Open eshell in other buffer&rdquo;
  (interactive)
  (split-window-vertically)
  (eshell))
(defun my-eshell-clear-buffer ()
  &ldquo;Eshell clear buffer.&rdquo;
  (interactive)
  (let ((eshell-buffer-maximum-lines 0))</p>

<pre><code>(eshell-truncate-buffer)))
</code></pre>

<p>(global-set-key [(f8)] &lsquo;open-eshell-other-buffer)
(global-set-key [C-f8] 'eshell)
(global-set-key [S-f8] 'my-eshell-clear-buffer)
<code>
f9-f11的一些绑定：
</code>
;;设置[C-f9]为调用dired命令
(global-set-key [C-f9] 'dired)
(global-set-key [f9] 'other-window);f9在其他窗口之间旋转</p>

<p>;;设置F10为撤销
(global-set-key [C-f10] &lsquo;undo)</p>

<p>;;设置F11快捷键指定Emacs 的日历系统
(global-set-key [C-f11] &lsquo;calendar)
<code>
用f12查看函数定义：
</code>
;;设置C-F12 快速察看日程安排
;;F12调到函数定义
(global-set-key [f12] 'semantic-ia-fast-jump)
(global-set-key [C-f12] 'list-bookmarks)
;;shift-f12跳回去
(global-set-key [S-f12]</p>

<pre><code>(lambda ()
(interactive)
(if (ring-empty-p (oref semantic-mru-bookmark-ring ring))
(error "Semantic Bookmark ring is currently empty"))
(let* ((ring (oref semantic-mru-bookmark-ring ring))
(alist (semantic-mrub-ring-to-assoc-list ring))
(first (cdr (car alist))))
(if (semantic-equivalent-tag-p (oref first tag)
(semantic-current-tag))
(setq frist (cdr (car (cdr alist)))))
(semantic-mrub-switch-tags first))))
</code></pre>

<p><code>
对ecb的键绑定：
</code>
;;==================ecb的配置=================================
;;为了ecb窗口的切换
(global-set-key [M-left] &lsquo;windmove-left)
(global-set-key [M-right] 'windmove-right)
(global-set-key [M-up] 'windmove-up)
(global-set-key [M-down] 'windmove-down)
;;隐藏和显示ecb窗口
(global-set-key [f11] 'ecb-hide-ecb-windows)
(global-set-key [S-f11] 'ecb-show-ecb-windows)
<code>
对窗口的一些键绑定：
</code>
;;关闭当前窗口,alt+4
(global-set-key (kbd &ldquo;M-4&rdquo;) 'delete-window)
;;(global-set-key (kbd &ldquo;M-4&rdquo;) 'kill-this-buffer)
;;关闭其他窗口,alt+1
(global-set-key (kbd &ldquo;M-1&rdquo;) 'delete-other-windows)
;;水平分割窗口,alt+2
(global-set-key (kbd &ldquo;M-2&rdquo;) 'split-window-vertically)
;;垂直分割窗口,alt+3
(global-set-key (kbd &ldquo;M-3&rdquo;) 'split-window-horizontally)
;;切换到其他窗口，alt+0
(global-set-key (kbd &ldquo;M-0&rdquo;) 'other-window)
;;显示缓冲区完整名称
(global-set-key (kbd &ldquo;M-5&rdquo;) 'display-buffer-name)
```</p>

<h1>Emacs的扩展配置</h1>

<p>为了使emacs更符合个人的习惯，增加了一个cyexpand.el配置文件，其部分设置如下：
```
;; 编码设置
(require &lsquo;coding-settings)</p>

<p>;; `mode-line'显示格式
(require &lsquo;mode-line-settings)</p>

<p>;; 各种语言开发方面的设置,这个设置牵涉到太多配置&hellip;.
(require &lsquo;dev-settings)</p>

<p>;; 显示行号
(require &lsquo;linum-settings)</p>

<p>;; color theme Emacs主题,很多face文件
(require &lsquo;color-theme-settings)</p>

<p>(require &lsquo;ahei-face)
(require 'color-theme-ahei)
(require 'face-settings)</p>

<p>;; 高亮当前行
(require &lsquo;hl-line-settings)</p>

<p>;; 字体配置
(require &lsquo;font-settings)
;; diff
(require 'diff-settings)
;; Emacs的diff: ediff,有个my-fontest-win的文件很关键
(require 'ediff-settings)</p>

<p>;; 在buffer中方便的查找字符串: color-moccur
(require &lsquo;moccur-settings)
;; Emacs超强的增量搜索Isearch配置
(require 'isearch-settings)</p>

<p>;; 增加更丰富的高亮
(require &lsquo;generic-x)</p>

<p>;; spell check
(setq-default ispell-program-name &ldquo;aspell&rdquo;)</p>

<p>;; Emacs中的包管理器
(require &lsquo;package)
(package-initialize)</p>

<p>;; 在Emacs里面使用shell
(require &lsquo;term-settings)
(require 'multi-term-settings)</p>

<p>;; 可以把光标由方块变成一个小长条
(require &lsquo;bar-cursor)
```</p>

<p>到此为止，已经将emacs打造成了开发C/C++的简易IDE。在使用过程中只需要会配置base.el、cycode.el、cykbd.el、cyexpand.el这四个文件即可，相关配置文件和插件可以到 <a href="https://github.com/txgcwm/emacs.d">这里</a> 下载。</p>
]]></content>
  </entry>
  
</feed>
