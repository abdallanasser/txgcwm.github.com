<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unix/Linux | 残剑]]></title>
  <link href="http://txgcwm.github.io/blog/categories/unix-linux/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2014-03-15T17:59:57+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu上安装LaTeX]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/07/ubuntushang-an-zhuang-latex/"/>
    <updated>2013-08-07T00:53:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/07/ubuntushang-an-zhuang-latex</id>
    <content type="html"><![CDATA[<p>LaTeX（音译“拉泰赫”）是一种基于TeX的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发，利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，能在几天甚至几小时内生成很多具有书籍质量的印刷品。</p>

<p>可以在Ubuntu安装很多LaTeX的分发版，其中一个是TeX Live，使用下面的命令可以在Ubuntu上安装Tex Live（软件有好几百M，需要慢慢等待）。
<code>
$ sudo apt-get install texlive-full
</code>
要编辑LaTeX文档需要一个编辑器，你可以找到很多编辑器，这里推荐使用Texmaker。
<code>   
$ sudo apt-get install texmaker
</code></p>

<!--more-->


<p><code>apt-cache search cjk</code>找到相关宏包安装：
<code>
sudo apt-get install cjk-latex latex-cjk-chinese
</code>
安装喜欢的中文字体：
<code>
sudo apt-get install xfonts-wqy ttf-wqy-microhei ttf-wqy-zenhei
</code>
安装英文字体：
```
$ apt-cache search &lsquo;courier new&rsquo;
ttf-mscorefonts-installer &ndash; Installer for Microsoft TrueType core fonts</p>

<p>$ sudo apt-get install ttf-mscorefonts-installer
<code>
需要更新字体缓存：
</code>
$ fc-cache
<code>
为了使整个系统下的用户的字体列缓存都更新，建议使用root权限执行:
</code>
$ sudo fc-cache -f -s -v
<code>
使用fc-list查看可用的字体：
</code>
$ fc-list
<code>
或者只查看中文的字体：
</code>
$ fc-list ：lang=zh
```
如果能看到想要的中文字体，就可以了。</p>

<p>新增一个test.tex名字的文件，内容如下：
```
% dependencies: xelatex, xecjk package，Courier New字体，wenquanyi中文字体，也可以设置其他的中英文字体
% Usage: xelatex filename[.tex]</p>

<p>\documentclass[11pt]{article}
\usepackage{xeCJK}
\setmainfont{Courier New} % 设置英文衬线字体
% \setmonofont{} % 设置英文等宽字体，等宽英文字体大全：<a href="http://zh.wikipedia.org/wiki/%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93">http://zh.wikipedia.org/wiki/%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93</a>
% \setsansfont{} % 设置英文无衬线字体
\setCJKmainfont{WenQuanYi Micro Hei} % 设置缺省中文字体
%\setCJKfamilyfont{WenQuanYi Micro Hei} % 与setCJKmainfon t等同，<a href="http://bbs.ctex.org/forum.php?mod=viewthread&amp;tid=51057">http://bbs.ctex.org/forum.php?mod=viewthread&amp;tid=51057</a>
\parindent 2em   %段首缩进</p>

<p>\begin{document}
\section{举例}
\begin{verbatim}
标点。
\end{verbatim}</p>

<p>汉字Chinese数学$x=y$空格
\end{document}
<code>
再用xelatex编译，就可以生成pdf文档了。
</code>
$ xelatex filename.tex
```</p>

<p><big>参考文章</big></p>

<p><a href="http://forum.ubuntu.org.cn/viewtopic.php?t=274400">ku10.04下 tevlive-xetex 、texmaker 、ctex宏包 安装成功</a> <br/>
<a href="http://forum.ubuntu.com.cn/viewtopic.php?f=35&amp;t=331555">natty narwahl 源安装 texlive2009 及 中文配置教程总结</a> <br/>
<a href="http://blog.sina.com.cn/s/blog_5e16f1770100lgs5.html">LaTeX技巧345：modernCV-xelatex中文支持简历</a> <br/>
<a href="http://linuxandfriends.com/latex-resume-templates/">LaTeX Resume Templates</a> <br/>
<a href="http://www.cnblogs.com/bamboo-talking/archive/2013/01/07/2848914.html">xelatex+xeCJK在ubuntu Linux中显示中文</a> <br/>
<a href="http://linux-wiki.cn/wiki/zh-hans/LaTeX%E4%B8%AD%E6%96%87%E6%8E%92%E7%89%88%EF%BC%88%E4%BD%BF%E7%94%A8XeTeX%EF%BC%89">LaTeX中文排版（使用XeTeX）</a> <br/>
<a href="http://mathslinux.org/?p=58">用 org-mode 写 LaTeX</a> <br/>
<a href="http://www.oschina.net/question/12_63776">在 Ubuntu 上安装 LaTeX</a> <br/>
<a href="http://blog.csdn.net/yming0221/article/details/7616846">LaTeX使用&mdash;XeLaTeX入门基础（一）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[popen和pclose函数]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/03/popenhe-pclosehan-shu/"/>
    <updated>2013-08-03T22:07:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/03/popenhe-pclosehan-shu</id>
    <content type="html"><![CDATA[<p>标准I/O函数库提供了popen函数，它启动一个子进程去执行一个shell命令行。popen函数还创建一个管道用于父子进程间通信。父进程要么从管道读信息，要么向管道写信息，至于是读还是写取决于父进程调用popen时传递的参数。以下给出popen、pclose的定义：
<code>
FILE *popen( const char* command, const char* mode )
</code>
参数说明</p>

<p>command： 是一个指向以NULL结束的shell命令字符串的指针。这行命令将被传到bin/sh并使用-c标志，shell将执行这个命令。<br/>
mode： 只能是读或者写中的一种，得到的返回值(标准I/O流)也具有和type相应的只读或只写类型。如果type是“r”则文件指针连接到command的标准输出;如果type是“w”则文件指针连接到command的标准输入。</p>

<!--more-->


<p>返回值</p>

<p>如果调用成功，则返回一个读或者写打开文件的指针；如果失败，返回NULL，具体错误要根据errno判断。</p>

<p><code>
int pclose (FILE* stream)
</code>
参数说明</p>

<p>stream： popen返回的文件指针。</p>

<p>返回值</p>

<p>如果调用失败，返回-1。</p>

<p>由于平时接触到usb插拔的事情比较多，现以列举系统中usb设备vid/pid为例。本想从<code>/proc/bus/usb/devices</code>中获取到usb设备的相关信息，可Ubuntu系统下没有<code>/proc/bus/usb/</code>这个目录。至于为什么没有这个目录和如何重新找回这个目录，可以查看 <a href="http://ubuntuforums.org/showthread.php?t=1432598">这里</a> 。所以这里我们使用<code>lsusb</code>去获取usb设备的基本信息。构建<code>int get_device_info(void)</code>函数获取系统中usb设备的vid/pid信息：
```
int get_device_info(void)
{</p>

<pre><code>FILE *fp = NULL;
char buffer[128];
char *ptr = NULL;
int vid, pid;

fp = popen("lsusb", "r");
if (fp == NULL)
    return -1;

while (NULL != fgets(buffer, sizeof(buffer), fp)) {
    ptr = strstr(buffer, "ID");
    if (ptr) {
        sscanf(ptr, "ID %04x:%04x", &amp;vid, &amp;pid);
        printf("%04x:%04x\n", vid, pid);
    }
}
pclose(fp);

return 0;
</code></pre>

<p>}
<code>
编写主函数调用以上的接口，使用`lsusb`查看usb设备及执行测试程序：
</code>
$ lsusb
Bus 001 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub
Bus 002 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 003: ID 1532:0016 Razer USA, Ltd DeathAdder Mouse
Bus 001 Device 004: ID 058f:b002 Alcor Micro Corp.</p>

<p>$ ./a.out
8087:0024
8087:0024
1d6b:0002
1d6b:0002
1532:0016
058f:b002</p>

<p>```</p>

<p><big>参考文章</big></p>

<p><a href="http://my.oschina.net/renhc/blog/35116">基于管道的popen和pclose函数</a><br/>
<a href="http://networking.ctocio.com.cn/tips/137/9412137.shtml">Linux popen函数的使用总结</a><br/>
<a href="http://bbs.chinaunix.net/thread-4087539-1-1.html">关于/proc/iomem中信息解释</a>  <br/>
<a href="http://tech.watchstor.com/storage-systems-117859.htm">proc文件系统功能总览</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log10的实现]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/03/log10de-shi-xian/"/>
    <updated>2013-08-03T01:46:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/03/log10de-shi-xian</id>
    <content type="html"><![CDATA[<p>在项目中要使用到log10计算，可所用系统的标准库里并没有移植该功能，需要自己实现。请问，采用什么算法实现该功能？</p>

<p>在网上找了一个例子，但不确定能否在嵌入式的一些平台使用。
```</p>

<pre><code>double my_log10(double x)
{
    register double ret;

 __asm__(
    "fldlg2\n\t" 
    "fxch\n\t" 
    "fyl2x"
    :"=t"(ret)
    :"0"(x)
        );
   return ret;
}
</code></pre>

<p>```</p>

<!--more-->


<p>也查看了glibc的源码，可调用了其它的一些API，对库的依赖比较大，逐步移植的话比较麻烦。代码如下：
```</p>

<pre><code>double __log10 (double x)
{
    if (__builtin_expect (islessequal (x, 0.0), 0) &amp;&amp; _LIB_VERSION != _IEEE_)
    {
        if (x == 0.0)
        {
             feraiseexcept (FE_DIVBYZERO);
             return __kernel_standard (x, x, 18); /* log10(0) */
        }
        else
        {
            feraiseexcept (FE_INVALID);
            return __kernel_standard (x, x, 19); /* log10(x&lt;0) */
        }
     }

   return  __ieee754_log10 (x);
}
</code></pre>

<p>```</p>

<p>参考 <a href="http://www.cnblogs.com/skyivben/archive/2013/02/15/2912914.html">这里</a> 实现了一个c语言版本的log10快速算法，还不是很完善。
```</p>

<h1>include &lt;math.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;stdio.h></h1>

<p>static double Sqrt(double x)
{</p>

<pre><code>if (x &lt; 0)
    return -1;
if (x == 0)
    return 0;
double y = (double)sqrt((double)x);

return (y + x / y) / 2;
</code></pre>

<p>}</p>

<p>static double NegativeLog(double q)
{</p>

<pre><code>int p;
double pi2 = 6.283185307179586476925286766559;
double eps2 = 0.00000000000001; // 1e-14
double eps1;    // 1e-28
double r = q, s = q, n = q, q2 = q * q, q1 = q2 * q;

eps1 = eps2 * eps2;

for (p = 1; (n *= q1) &gt; eps1; s += n, q1 *= q2)
    r += (p = !p) ? n : -n;

double u = 1 - 2 * r, v = 1 + 2 * s, t = u / v;
double a = 1, b = Sqrt(1 - t * t * t * t);

for (; a - b &gt; eps2; b = Sqrt(a * b), a = t)
    t = (a + b) / 2;

return pi2 / (a + b) / v / v;
</code></pre>

<p>}</p>

<p>static double Log(double x)
{</p>

<pre><code>int k = 0;
double ln10 = 2.30258509299404568401799145468;

if (x &lt;= 0)
    return -1;
if (x == 1)
    return 0;

for (; x &gt; 0.1; k++)
    x /= 10;
for (; x &lt;= 0.01; k--)
    x *= 10;

return k * ln10 - NegativeLog(x);
</code></pre>

<p>}</p>

<p>double Log10(double x)
{</p>

<pre><code>double ln10 = 2.30258509299404568401799145468;

return Log(x) / ln10;
</code></pre>

<p>}</p>

<p>int main(int argc, char **argv)
{</p>

<pre><code>printf(" self Log10: %f\n math log10: %f\n\n", Log10(1000), log10(1000));
printf(" self Log10: %f\n math log10: %f\n\n", Log10(1), log10(1));
printf(" self Log10: %f\n math log10: %f\n\n", Log10(8192.1024), log10(8192.1024));
printf(" self Log10: %f\n math log10: %f\n\n", Log10(0.3), log10(0.3));
printf(" self Log10: %f\n math log10: %f\n\n", Log10(33.8), log10(33.8));

return 0;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux管道的实现机制]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/02/linuxguan-dao-de-shi-xian-ji-zhi/"/>
    <updated>2013-08-02T00:24:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/02/linuxguan-dao-de-shi-xian-ji-zhi</id>
    <content type="html"><![CDATA[<p>在Linux中，管道是一种使用非常频繁的通信机制。从本质上说，管道也是一种文件，但它又和一般的文件有所不同，管道可以克服使用文件进行通信的两个问题，具体表现为：</p>

<ul>
<li><p>限制管道的大小。实际上，管道是一个固定大小的缓冲区。在Linux中，该缓冲区的大小为1页，即4K字节，使得它的大小不像文件那样不加检验地增长。使用单个固定缓冲区也会带来问题，比如在写管道时可能变满，当这种情况发生时，随后对管道的write()调用将默认地被阻塞，等待某些数据被读取，以便腾出足够的空间供write()调用写。</p></li>
<li><p>读取进程也可能工作得比写进程快。当所有当前进程数据已被读取时，管道变空。当这种情况发生时，一个随后的read()调用将默认地被阻塞，等待某些数据被写入，这解决了read()调用返回文件结束的问题。</p></li>
</ul>


<p>注意：从管道读数据是一次性操作，数据一旦被读，它就从管道中被抛弃，释放空间以便写更多的数据。</p>

<!--more-->


<h1>管道的结构</h1>

<p>在Linux中，管道的实现并没有使用专门的数据结构，而是借助了文件系统的file结构和VFS的索引节点inode。通过将两个file结构指向同一个临时的VFS索引节点，而这个VFS索引节点又指向一个物理页面而实现的。如下图所示。</p>

<p><img src="/images/2013/8/pipe/struct.png" alt=" struct " /></p>

<p>图中有两个file数据结构，但它们定义文件操作例程地址是不同的，其中一个是向管道中写入数据的例程地址，而另一个是从管道中读出数据的例程地址。这样，用户程序的系统调用仍然是通常的文件操作，而内核却利用这种抽象机制实现了管道这一特殊操作。</p>

<h1>管道的读写</h1>

<p>管道实现的源代码在fs/pipe.c中，在pipe.c中有很多函数，其中有两个函数比较重要，即管道读函数pipe_read()和管道写函数pipe_wrtie()。管道写函数通过将字节复制到VFS索引节点指向的物理内存而写入数据，而管道读函数则通过复制物理内存中的字节而读出数据。当然，内核必须利用一定的机制同步对管道的访问，为此，内核使用了锁、等待队列和信号。</p>

<p>当写进程向管道中写入时，它利用标准的库函数write()，系统根据库函数传递的文件描述符，可找到该文件的file结构。file结构中指定了用来进行写操作的函数（即写入函数）地址，于是，内核调用该函数完成写操作。写入函数在向内存中写入数据之前，必须首先检查VFS索引节点中的信息，同时满足如下条件时，才能进行实际的内存复制工作：</p>

<ul>
<li>内存中有足够的空间可容纳所有要写入的数据；</li>
<li>内存没有被读程序锁定。</li>
</ul>


<p>如果同时满足上述条件，写入函数首先锁定内存，然后从写进程的地址空间中复制数据到内存。否则，写入进程就休眠在VFS索引节点的等待队列中，接下来，内核将调用调度程序，而调度程序会选择其他进程运行。写入进程实际处于可中断的等待状态，当内存中有足够的空间可以容纳写入数据，或内存被解锁时，读取进程会唤醒写入进程，这时，写入进程将接收到信号。当数据写入内存之后，内存被解锁，而所有休眠在索引节点的读取进程会被唤醒。</p>

<p>管道的读取过程和写入过程类似。但是，进程可以在没有数据或内存被锁定时立即返回错误信息，而不是阻塞该进程，这依赖于文件或管道的打开模式。反之，进程可以休眠在索引节点的等待队列中等待写入进程写入数据。当所有的进程完成了管道操作之后，管道的索引节点被丢弃，而共享数据页也被释放。</p>

<h1>CU上的问题</h1>

<h2>popkart718的提问</h2>

<p>《Unix环境高级编程》403页中部分描述如下：</p>

<p><img src="/images/2013/8/pipe/sync.jpg" alt=" sync " /></p>

<p>明明是两个管道，为什么read的时候会发生阻塞呢？</p>

<h2>解答</h2>

<p>read依赖于管道的打开模式，打开管道时可使用pipe2设定相应的flags。书上所写的阻塞是在管道中没有数据的情况下发生的。
```</p>

<pre><code>   int pipe2(int pipefd[2], int flags);
</code></pre>

<p>DESCRIPTION</p>

<pre><code>   pipe()  creates  a  pipe, a unidirectional data channel that can be used for interprocess communication.  The array pipefd is used to return
   two file descriptors referring to the ends of the pipe.  pipefd[0] refers to the read end of the pipe.  pipefd[1] refers to the write end of
   the  pipe.  Data written to the write end of the pipe is buffered by the kernel until it is read from the read end of the pipe.  For further
   details, see pipe(7).

   If flags is 0, then pipe2() is the same as pipe().  The following values can be bitwise ORed in flags to obtain different behavior:

   O_NONBLOCK  Set the O_NONBLOCK file status flag on the two new open file descriptions.  Using this flag saves extra  calls  to  fcntl(2)  to
               achieve the same result.

   O_CLOEXEC   Set  the  close-on-exec  (FD_CLOEXEC) flag on the two new file descriptors.  See the description of the same flag in open(2) for
               reasons why this may be useful.
</code></pre>

<p>```
同时也可以查看内核文件fs/pipe.c中的pipe_read函数实现。以下是简单的测试程序。</p>

<p>测试一：使用pipe2且传入参数的flags为0（相当于使用pipe）
```</p>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int fd[2];</p>

<p>void handle(int sig)
{</p>

<pre><code>if (sig == SIGUSR1)
    write(fd[1], "p", 1);
</code></pre>

<p>}</p>

<p>int main(int argc, char **argv)
{</p>

<pre><code>char c;
pid_t pid;

if (pipe2(fd, 0) &lt; 0) {
    printf("can not creat pipe!\n");
    return -1;
}

if ((pid = fork()) &lt; 0) {
    printf("can not fork!\n");
    return -1;
} else if (pid &gt; 0) {
    close(fd[0]);
    signal(SIGUSR1, handle);
    for (;;) {
    }
} else {
    close(fd[1]);
    for (;;) {
        if (read(fd[0], &amp;c, 1) == 1)
            printf("c:%c\n", c);
        else
            printf("nothing to read!\n");

        sleep(2);
    }
}

return 0;
</code></pre>

<p>}
```
编译后，可以看到程序阻塞在那里，当使用“kill -10 进程号”时，才会从管道中读出数据。</p>

<p>测试二：使用pipe2时设置flags的参数为O_NONBLOCK
```</p>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;sys/stat.h></h1>

<h1>include &lt;fcntl.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int fd[2];</p>

<p>void handle(int sig)
{</p>

<pre><code>if (sig == SIGUSR1)
    write(fd[1], "p", 1);
</code></pre>

<p>}</p>

<p>int main(int argc, char **argv)
{</p>

<pre><code>char c;
pid_t pid;

if (pipe2(fd, O_NONBLOCK) &lt; 0) {
    printf("can not creat pipe!\n");
    return -1;
}

if ((pid = fork()) &lt; 0) {
    printf("can not fork!\n");
    return -1;
} else if (pid &gt; 0) {
    close(fd[0]);
    signal(SIGUSR1, handle);
    for (;;) {
    }
} else {
    close(fd[1]);
    for (;;) {
        if (read(fd[0], &amp;c, 1) == 1)
            printf("c:%c\n", c);
        else
            printf("nothing to read!\n");

        sleep(2);
    }
}

return 0;
</code></pre>

<p>}
```
编译后，执行程序可以看到它不停的打印消息，若管道内没有数据的话，read就直接返回了。</p>

<h1>参考文章</h1>

<p><a href="http://oss.org.cn/kernel-book/ch07/7.1.1.htm">Linux管道的实现机制</a> <br/>
<a href="http://bbs.chinaunix.net/thread-4069374-1-1.html">进程通信管道问题</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux的硬链接与软链接]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/29/linuxde-ying-lian-jie-yu-ruan-lian-jie/"/>
    <updated>2013-07-29T23:37:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/29/linuxde-ying-lian-jie-yu-ruan-lian-jie</id>
    <content type="html"><![CDATA[<p>文件有文件名与数据，这在Linux上被分成两个部分：用户数据(user data)与元数据(metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在Linux中，元数据中的inode号（inode是文件元数据的一部分但其并不包含文件名，inode号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过inode号寻找正确的文件数据块。下图展示了程序通过文件名获取文件内容的过程。</p>

<p><img src="/images/2013/7/link/file.png" alt=" file " /></p>

<p>为解决文件的共享使用，Linux系统引入了两种链接：硬链接(hard link)与软链接（又称符号链接，即soft link或symbolic link）。链接为Linux系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个inode号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名。</p>

<p><img src="/images/2013/7/link/access.png" alt=" access " /></p>

<!--more-->


<h1>硬链接</h1>

<p>硬链接可由命令link或ln创建。如下是对文件oldfile创建硬链接。
<code>
link oldfile newfile
ln oldfile newfile
</code>
由于硬链接是有着相同inode号仅文件名不同的文件，因此硬链接存在以下几点特性：</p>

<ul>
<li>文件有相同的inode及data block；</li>
<li>只能对已存在的文件进行创建；</li>
<li>不能交叉文件系统进行硬链接的创建；</li>
<li>不能对目录进行创建，只可对文件创建；</li>
<li>删除一个硬链接文件并不影响其它有相同inode号的文件。
```
$ ls -li
total 0</li>
</ul>


<p>// 只能对已存在的文件创建硬连接
$ link old.file hard.link
link: cannot create link <code>hard.link' to</code>old.file': No such file or directory</p>

<p>$ echo &ldquo;This is an original file&rdquo; > old.file
$ cat old.file
This is an original file
$ stat old.file
  File: `old.file'
  Size: 25          Blocks: 8          IO Block: 4096   regular file
Device: 807h/2055d  Inode: 796901      Links: 1
Access: (0664/-rw-rw-r&mdash;)  Uid: ( 1000/  txgcwm)   Gid: ( 1000/  txgcwm)
Access: 2013-07-29 23:57:49.435157205 +0800
Modify: 2013-07-29 23:57:27.295157688 +0800
Change: 2013-07-29 23:57:27.295157688 +0800
 Birth: &ndash;</p>

<p>// 文件有相同的inode号以及data block
$ link old.file hard.link | ls -li
total 8
796901 -rw-rw-r&mdash; 2 txgcwm txgcwm 25 Jul 29 23:57 hard.link
796901 -rw-rw-r&mdash; 2 txgcwm txgcwm 25 Jul 29 23:57 old.file</p>

<p>// 不能交叉文件系统
$ sudo ln /dev/input/event5 /root/bfile.txt
[sudo] password for txgcwm:
ln: failed to create hard link <code>/root/bfile.txt' =&gt;</code>/dev/input/event5': Invalid cross-device link</p>

<p>// 不能对目录进行创建硬连接
$ mkdir -p old.dir/test
$ ln old.dir/ hardlink.dir
ln: `old.dir/&lsquo;: hard link not allowed for directory
<code>
文件old.file与hard.link有着相同的inode号（796901）及文件权限，inode是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当inode存在且链接计数器（link count）不为0时。inode号仅在各文件系统下是唯一的，当Linux挂载多个文件系统后将出现inode号重复的现象，因此硬链接创建时不可跨文件系统。设备文件目录/dev使用的文件系统是devtmpfs，而/home（与根目录/一致）使用的是磁盘文件系统ext4。以下使用命令df查看当前系统中挂载的文件系统类型、各文件系统inode使用情况及文件系统挂载点。
</code>
$ sudo df -i &mdash;print-type
Filesystem     Type      Inodes  IUsed   IFree IUse% Mounted on
/dev/sda5      ext4     1250928  63404 1187524    6% /
udev           devtmpfs  211313    603  210710    1% /dev
tmpfs          tmpfs     215180    566  214614    1% /run
none           tmpfs     215180      3  215177    1% /run/lock
none           tmpfs     215180      9  215171    1% /run/shm
none           tmpfs     215180     23  215157    1% /run/user
/dev/sda6      ext4       62464    355   62109    1% /boot
/dev/sda7      ext4     1250928  91579 1159349    8% /home
/dev/sda11     ext4     2501856 336584 2165272   14% /srv
/dev/sda12     ext4     1875968 144226 1731742    8% /opt
/dev/sda8      ext4      249984    132  249852    1% /tmp
/dev/sda9      ext4     1250928 584616  666312   47% /usr
/dev/sda10     ext4      249984  24565  225419   10% /var</p>

<p>$ sudo find / -inum 1114
/lib/modules/3.5.0-25-generic/kernel/drivers/hwmon/mcp3021.ko
/sys/devices/LNXSYSTM:00/device:00/PNP0A08:00/device:02/PNP0C02:00/power/autosuspend_delay_ms
<code>
值得一提的是，Linux系统存在inode号被用完但磁盘空间还有剩余的情况。硬链接不能对目录创建是受限于文件系统的设计。现Linux文件系统中的目录均隐藏了两个特殊的目录：当前目录（.）与父目录（..）。查看这两个特殊目录的inode号可知其实这两目录就是两个硬链接（注意目录/lost+found/的inode号）。若系统允许对目录创建硬链接，则会产生目录环。
</code>
$ sudo ls -aliF /lost+found
total 20
11 drwx&mdash;&mdash;&mdash;  2 root root 16384 Nov 11  2012 ./
 2 drwxr-xr-x 23 root root  4096 Jul  7 13:47 ../</p>

<p>$ sudo stat /lost+found/
  File: `/lost+found/&lsquo;
  Size: 16384       Blocks: 32         IO Block: 4096   directory
Device: 805h/2053d  Inode: 11          Links: 2
Access: (0700/drwx&mdash;&mdash;&mdash;)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2013-07-30 00:10:47.479140197 +0800
Modify: 2012-11-11 00:50:27.000000000 +0800
Change: 2012-11-11 00:50:27.000000000 +0800
 Birth: &ndash;
```</p>

<h1>软链接</h1>

<p>软链接与硬链接不同，若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软连接。软链接就是一个普通文件，只是数据块内容有点特殊。软链接有着自己的inode号以及用户数据块。因此软链接的创建与使用没有类似硬链接的诸多限制：</p>

<ul>
<li>软链接有自己的文件属性及权限等；</li>
<li>可对不存在的文件或目录创建软链接；</li>
<li>软链接可交叉文件系统；</li>
<li>软链接可对文件或目录创建；</li>
<li>创建软链接时，链接计数 i_nlink 不会增加；</li>
<li>删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）。
```
$ ls -li
total 0</li>
</ul>


<p>// 可对不存在的文件创建软链接
$ ln -s old.file soft.link
$ ls -liF
total 0
796810 lrwxrwxrwx 1 txgcwm txgcwm 8 Jul 30 00:25 soft.link &ndash;> old.file</p>

<p>// 由于被指向的文件不存在，此时的软链接 soft.link 就是死链接
$ cat soft.link
cat: soft.link: No such file or directory</p>

<p>// 创建被指向的文件 old.file，soft.link 恢复成正常的软链接
$ echo &ldquo;This is an original file_A&rdquo; >> old.file
$ cat soft.link
This is an original file_A</p>

<p>// 对不存在的目录创建软链接
$ ln -s old.dir soft.link.dir
$ mkdir -p old.dir/test
$ tree . -F &mdash;inodes
.
├── [ 796834]  old.dir/
│   └── [ 796851]  test/
├── [ 796830]  old.file
├── [ 796830]  soft.link &ndash;> old.file
└── [ 796834]  soft.link.dir &ndash;> old.dir/</p>

<p>3 directories, 2 files
```</p>

<h1>参考文章</h1>

<p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/">理解Linux的硬链接与软链接</a></p>
]]></content>
  </entry>
  
</feed>
