<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 数据结构算法 | 残剑]]></title>
  <link href="http://txgcwm.github.io/blog/categories/shu-ju-jie-gou-suan-fa/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2013-07-23T22:46:52+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[链栈]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/15/lian-zhan/"/>
    <updated>2013-07-15T21:49:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/15/lian-zhan</id>
    <content type="html"><![CDATA[<p>栈是限制在表的一端进行插入和删除运算的线性表。通常称插入、删除的这一端为栈顶，另一端称为栈底；当表中没有元素时称为空栈；栈为后进先出的线性表，简称为LIFO表；栈的修改是按后进先出的原则进行；每次删除的总是当前栈中最新的元素（即最后插入的元素），而最先插入的被放在栈的底部，要到最后才能删除。</p>

<h1>链栈结点</h1>

<p>出栈与入栈是栈的最主要操作，当无法预见栈所需大小时，往往需要采用链栈的方式。在链栈中，不需要像单链表一样需要头结点。链栈的结构如下图所示：</p>

<p><img src="/images/2013/7/lian-zhan/stacknode.png" alt=" stacknode " /></p>

<p>可将其结构定义为：
```</p>

<pre><code>typedef char SElemType

typedef struct StackNode
{
    SElemType data;//根据实际需要定义数据类型
    struct StackNode *next;
}StackNode,*LinkStackPtr;

typedef struct LinkStack
{
    LinkStackPtr top;//指向栈链顶部
    int count;//用以判断栈是否为空，可初始化为0
}LinkStack;
</code></pre>

<p>```</p>

<!--more-->


<h1>进栈</h1>

<p>能够进栈的前提是已成功建立栈空间。进栈函数所需的参数主要是指向栈顶的指针和入栈的内容，因此可定义为：
<code>
int Push(LinkStack *pS, SElemType e);
</code>
进栈操作的过程如下图所示:</p>

<p><img src="/images/2013/7/lian-zhan/stackpush.png" alt=" stackpush " /></p>

<p>Step1：开辟内存，将需要入栈的元素压入栈；
<code>
LinkStackPtr s = (LinkStackPtr)malloc(sizeof(StackNode));
s-&gt;data = e;
</code>
Step2：更改指针；
<code>
s-&gt;next = pS-&gt;top; //新结点的next指向原来栈顶
pS-&gt;top = s; //链栈新的top指针指向新建立的结点
</code>
Step3：更改栈状态（累计入栈元素个数）。
<code>
pS-&gt;count++;
</code></p>

<h1>出栈</h1>

<p>出栈之前需要判断当前栈的状态，如果栈元素个数为零，则是空栈，无法进行出栈操作。出栈操作函数同样需要两个参数，一是指向链栈的指针，二是弹出的栈元素，因此定义为：
<code>
int Pop(LinkStackPtr *pS, SElemType *e); //之所以是*e，是为了在函数结束后可以取得该弹出元素
</code>
出栈操作过程如下图所示：</p>

<p><img src="/images/2013/7/lian-zhan/stackpop.png" alt=" stackpop " /></p>

<p>Step1：获取弹出元素；
<code>
*e = pS-&gt;top-&gt;data;
</code>
Step2：top指针指向栈顶；
<code>
p = pS-&gt;top ;
pS-&gt;top = p-&gt;next;//LinkStackPtr p;
</code>
Step3：释放结点；
<code>
free(p);
</code>
Step4：更改栈状态。
<code>
pS-&gt;count--;
</code></p>

<h1>测试程序</h1>

<p>```</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

typedef char SElemType;

typedef struct StackNode {
    SElemType data;
    struct StackNode *next;
} StackNode, *LinkStackPtr;

typedef struct LinkStack {
    LinkStackPtr top;
    int count;
} LinkStack;

void InitialStack(LinkStack * L)
{
    L-&gt;top = NULL;
    L-&gt;count = 0;

    return;
}

int StackEmpty(LinkStack * pS)
{
    return (!pS-&gt;count);
}

int Push(LinkStack * pS, SElemType e)
{
    LinkStackPtr s = (LinkStackPtr) malloc(sizeof(StackNode));
    if(s == NULL) {
        printf("no enough memory!\n");
        return -1;
    }
    s-&gt;data = e;
    s-&gt;next = pS-&gt;top;
    pS-&gt;top = s;
    pS-&gt;count++;

    return 0;
}

int Pop(LinkStack * pS, SElemType * e)
{
    LinkStackPtr p = NULL;

    if (StackEmpty(pS)) {
        printf("stack is empty！\n");
        return 0;
    }

    *e = pS-&gt;top-&gt;data;
    p = pS-&gt;top;
    pS-&gt;top = p-&gt;next;
    free(p);
    pS-&gt;count--;

    return 0;
}

void PrintStackLink(LinkStack * pS)
{
    int i;
    LinkStackPtr L = NULL;

    L = pS-&gt;top;
    if (StackEmpty(pS)) {
        printf("stack is empty！\n");
        return;
    }

    for (i = 0; i &lt; (pS-&gt;count); i++) {
        printf("%c\n", L-&gt;data);
        L = L-&gt;next;
    }

    return;
}

int main(int argc, char **argv)
{
    char getch;
    char outch;
    LinkStack myStack;

    InitialStack(&amp;myStack);

    printf("请输入压入栈的数据（char型），输入#结束:\n");
    scanf("%c", &amp;getch);
    while (getch != '#') {
        Push(&amp;myStack, getch);
        scanf("%c", &amp;getch);
    }
    printf("栈链内容为：\n");
    PrintStackLink(&amp;myStack);

    while (!StackEmpty(&amp;myStack)) {
        Pop(&amp;myStack, &amp;outch);
        printf("弹出内容为：%c\n", outch);
    }
    PrintStackLink(&amp;myStack);

    return 0;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Base64编码解码算法]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/11/base64bian-ma-jie-ma-suan-fa/"/>
    <updated>2013-07-11T23:09:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/11/base64bian-ma-jie-ma-suan-fa</id>
    <content type="html"><![CDATA[<p>Base64使用ascii码子集的64个字符，即大小写的26个英文字母，0～9，＋，/。编码基于3个字符，每个字符用8位二进制表示，一共24位，再分为4四组，每组6位表示一个Base64值（例如0就是A，27就是b）。Base64值如下：
```</p>

<pre><code>'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
'w', 'x', 'y', 'z', '0', '1', '2', '3',
'4', '5', '6', '7', '8', '9', '+', '/',
</code></pre>

<p>```
如果被加密的字符串每3个一组，还剩1或2个字符，使用特殊字符"=&ldquo;补齐。例如编码只有2个字符“me”，m的ascii是109，e的是101，用二进制表示分别是01101101、01100101，连接起来就是0110110101100101，再按6位分为一组：011011、010110、010100（不足6位补0），ascii分别是27、22、 20，即Base64值为bWU，不足4字用＝补齐，因此bWU＝就me的Base64值。</p>

<!--more-->


<p>在<a href="https://github.com/dwjackson/basenc">这里</a>可以找到一个c语言的base32/base64开源库。以下是goahead中base64编码解码的实现：
```</p>

<pre><code>static char_t    map64[] = {
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
    -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
    -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
};

static char_t    alphabet64[] = {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
    'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
    'w', 'x', 'y', 'z', '0', '1', '2', '3',
    '4', '5', '6', '7', '8', '9', '+', '/',
};

/*********************************** Code *************************************/
/*
 *    Decode a buffer from "string" and into "outbuf"
 */
int websDecode64(char_t *outbuf, char_t *string, int outlen)
{
    unsigned long    shiftbuf;
    char_t            *cp, *op;
    int                c, i, j, shift;

    op = outbuf;
    *op = '\0';
    cp = string;
    while (*cp &amp;&amp; *cp != '=') {
        /*
         *        Map 4 (6bit) input bytes and store in a single long (shiftbuf)
         */
        shiftbuf = 0;
        shift = 18;
        for (i = 0; i &lt; 4 &amp;&amp; *cp &amp;&amp; *cp != '='; i++, cp++) {
            c = map64[*cp &amp; 0xff];
            if (c == -1) {
                error(E_L, E_LOG, T("Bad string: %s at %c index %d"), string,
                      c, i);
                return -1;
            }
            shiftbuf = shiftbuf | (c &lt;&lt; shift);
            shift -= 6;
        }
        /*
         *        Interpret as 3 normal 8 bit bytes (fill in reverse order).
         *        Check for potential buffer overflow before filling.
         */
        --i;
        if ((op + i) &gt;= &amp;outbuf[outlen]) {
            gstrcpy(outbuf, T("String too big"));
            return -1;
        }
        for (j = 0; j &lt; i; j++) {
            *op++ = (char_t) ((shiftbuf &gt;&gt; (8 * (2 - j))) &amp; 0xff);
        }
        *op = '\0';
    }
    return 0;
}

/******************************************************************************/
/*
 *    Encode a buffer from "string" into "outbuf"
 */
void websEncode64(char_t *outbuf, char_t *string, int outlen)
{
    unsigned long    shiftbuf;
    char_t            *cp, *op;
    int                x, i, j, shift;

    op = outbuf;
    *op = '\0';
    cp = string;
    while (*cp) {
        /*
         *        Take three characters and create a 24 bit number in shiftbuf
         */
        shiftbuf = 0;
        for (j = 2; j &gt;= 0 &amp;&amp; *cp; j--, cp++) {
            shiftbuf |= ((*cp &amp; 0xff) &lt;&lt; (j * 8));
        }
        /*
         *        Now convert shiftbuf to 4 base64 letters. The i,j magic calculates
         *        how many letters need to be output.
         */
        shift = 18;
        for (i = ++j; i &lt; 4 &amp;&amp; op &lt; &amp;outbuf[outlen] ; i++) {
            x = (shiftbuf &gt;&gt; shift) &amp; 0x3f;
            *op++ = alphabet64[(shiftbuf &gt;&gt; shift) &amp; 0x3f];
            shift -= 6;
        }
        /*
         *        Pad at the end with '='
         */
        while (j-- &gt; 0) {
            *op++ = '=';
        }
        *op = '\0';
    }
}
</code></pre>

<p>```</p>

<p>Linux提供了命令行方式的base64编码和解码。</p>

<ul>
<li>将字符串str+换行 编码为base64字符串输出。
<code>
  $ echo "str" | base64
</code></li>
<li>将字符串str编码为base64字符串输出。
<code>
  $ echo -n "str" | base64
</code></li>
<li>从指定的文件file中读取数据，编码为base64字符串输出。
<code>
  $ base64 file
</code></li>
<li>从标准输入中读取已经进行base64编码的内容，解码输出。
<code>
  $ base64 -d
</code></li>
<li>从标准输入中读取已经进行base64编码的内容，解码输出。加上-i参数，忽略非字母表字符，比如换行符。
<code>
  $ base64 -d -i
</code></li>
<li>将base64编码的字符串str+换行 解码输出。
<code>
  $ echo "str" | base64 -d
</code></li>
<li>将base64编码的字符串str解码输出。
<code>
  $ echo -n "str" | base64 -d
</code></li>
<li>从指定的文件file中读取base64编码的内容，解码输出。
<code>
  $ base64 -d file
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[求两个整数的最大公约数]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/07/qiu-liang-ge-zheng-shu-de-zui-da-gong-yue-shu/"/>
    <updated>2013-07-07T17:10:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/07/qiu-liang-ge-zheng-shu-de-zui-da-gong-yue-shu</id>
    <content type="html"><![CDATA[<p>辗转相除法又名欧几里德算法（Euclidean algorithm），用于求两个正整数的最大公因子的算法。它是已知最古老的算法，可追溯至公元前300年。它首次出现于欧几里德的《几何原本》中，而在中国则可以追溯至东汉出现的《九章算术》。</p>

<p>设两数为a、b(b&lt;a)，求它们的最大公约数的步骤如下：用b除a，得a＝bq&hellip;r1(0≤r1)。若r1=0，则(a，b)＝b；若r1≠0，则再用r1除b，得b＝r1q&hellip;r2(0≤r2)。若r2＝0，则(a，b)＝r1，若r2≠0，则继续用r2除r1,&hellip;如此下去，直到能整除为止。其最后一个非零余数即为(a，b)。</p>

<!--more-->


<p>辗转相除法是利用以下性质来确定两个正整数a和b的最大公因子的：</p>

<p>1、若r是a÷b的余数,则gcd(a,b) = gcd(b,r)；</p>

<p>2、若b为0，则其最大公因子为a。</p>

<p>另一种置换实现方式：</p>

<p>1、r为a÷b所得余数（0≤r&lt;b）。若r=0，算法结束，b即为答案；</p>

<p>2、若r不为0，则互换：置a←b，b←r，并返回第一步。</p>

<p>递归实现：</p>

<pre><code>int gcd(int a,int b)
{
    if(b == 0)
        return a;
    else
        return gcd(b, a%b);
}
</code></pre>

<p>对递归实现的改进：</p>

<pre><code>int gcd(int a,int b)
{
    return b ? gcd(b, a%b) : a;
}
</code></pre>

<p>置换实现：</p>

<pre><code>int gcd( int a, int b)
{
    int temp;

     while(b) {
        temp = b;
        b = a%b;
        a = temp;      
     }

     return a;
}
</code></pre>

<p>对置换实现的改进：</p>

<pre><code>int gcd(int a, int b)
{
    while(b)
        b = a%b + 0/(a=b);

    return a;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
