<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C/C++ | 残剑]]></title>
  <link href="http://txgcwm.github.io/blog/categories/c-c/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2015-06-28T00:03:09+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[__FILE__显示全路径的问题]]></title>
    <link href="http://txgcwm.github.io/blog/2014/07/09/file-xian-shi-quan-lu-jing-de-wen-ti/"/>
    <updated>2014-07-09T22:12:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2014/07/09/file-xian-shi-quan-lu-jing-de-wen-ti</id>
    <content type="html"><![CDATA[<p>在日志中，使用到<code>__FILE__</code>来显示源码的文件名，可它显示了绝对路径，这样使得整个log看起来很长，主要log都显示在了右边，让人看着很是不舒服。查找了半天才知道这是编译造成的，由于编译目录和源码目录不同，所以在实际编译的时候使用的是源码的绝对路径，以致打印出来就是绝对路径了（这样的解释不是很准确，有待改进）。</p>

<p>针对这种现象，使用以下的例子作为测试。</p>

<p>```</p>

<h1>include &lt;stdio.h></h1>

<p>int main(int argc, char **argv)
{</p>

<pre><code>printf("%s, %d\n", __FILE__, __LINE__);

return 0;
</code></pre>

<p>}
```</p>

<p>使用源码的全路径编译：
<code>
$ gcc -o filetest /srv/example/c/test/filetest.c
</code></p>

<p>执行结果：
<code>
$ ./filetest
/srv/example/c/test/filetest.c, 5
</code></p>

<p>为了解决以上问题，当然可以改变编译的方式：
<code>
$ gcc -o filetest filetest.c
</code></p>

<p>执行结果：
<code>
$ ./filetest
filetest.c, 5
</code></p>

<!--more-->


<p>可对项目而言，改动一下会牵动很多的东西，那么可以对<code>__FILE__</code>进行一些操作：
```</p>

<h1>define <strong>FILENAME</strong> (strrchr(<strong>FILE</strong>, &lsquo;/&rsquo;) ? (strrchr(<strong>FILE</strong>, &lsquo;/&rsquo;) + 1):<strong>FILE</strong>)</h1>

<p>```</p>

<p>测试代码修改如下：
```</p>

<h1>include &lt;string.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>define <strong>FILENAME</strong> (strrchr(<strong>FILE</strong>, &lsquo;/&rsquo;) ? (strrchr(<strong>FILE</strong>, &lsquo;/&rsquo;) + 1):<strong>FILE</strong>)</h1>

<p>int main(int argc, char **argv)
{</p>

<pre><code>printf("%s, %d\n", __FILENAME__, __LINE__);

return 0;
</code></pre>

<p>}
```</p>

<p>执行结果：
<code>
$ ./filetest
filetest.c, 8
</code></p>

<p>考虑到以上的操作需要两次执行<code>strrchr</code>，这种方案也被枪毙掉了。最后采取了换行的操作，只是使用脚本去分析log文件时有很大的不便，不能快速定位到哪个文件，毕竟它们显示在不同行上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCC编译选项]]></title>
    <link href="http://txgcwm.github.io/blog/2014/06/28/gccbian-yi-xuan-xiang/"/>
    <updated>2014-06-28T11:28:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2014/06/28/gccbian-yi-xuan-xiang</id>
    <content type="html"><![CDATA[<p>GCC的使用方法：
```
gcc [-c│-S│-E] [-std=standard]</p>

<pre><code>[-g] [-pg] [-Olevel]
[-Wwarn...] [-pedantic]
[-Idir...] [-Ldir...]
[-Dmacro[=defn]...] [-Umacro]
[-foption...] [-mmachine-option...]
[-o outfile] infile...
</code></pre>

<h2>```</h2>

<h1>常用选项</h1>

<ul>
<li>&mdash;help</li>
<li>&mdash;target-help：显示gcc帮助说明，是显示目标机器特定的命令行选项。</li>
<li>&mdash;version：显示gcc版本号和版权信息 。</li>
<li>-o outfile：输出到指定的文件。</li>
<li>-x language：指明使用的编程语言，允许的语言包括：c、c++、assembler、none，none意味着恢复默认行为，即根据文件的扩展名猜测源文件的语言。</li>
<li>-v：打印较多信息，显示编译器调用的程序。</li>
<li>&ndash;###：与-v类似，但选项被引号括住，并且不执行命令。</li>
<li>-E：仅作预处理，不进行编译、汇编和链接。</li>
<li>-S：仅编译到汇编语言，不进行汇编和链接。</li>
<li>-c：编译、汇编到目标代码，不进行链接。</li>
<li>-pipe：使用管道代替临时文件。</li>
<li>-combine：将多个源文件一次性传递给汇编器。</li>
</ul>


<hr />

<h1>其它选项</h1>

<ul>
<li>-l library/-llibrary：进行链接时搜索名为library的库。</li>
<li>-Idir：把dir加入到搜索头文件的路径列表中。</li>
<li>-Ldir：把dir加入到搜索库文件的路径列表中。</li>
<li>-Dname：预定义一个名为name的宏，值为1。</li>
<li>-Dname=definition：预定义名为name，值为definition的宏。</li>
<li>-ggdb</li>
<li>-ggdblevel：为调试器gdb生成调试信息，level可以为1～3，默认值为2。</li>
<li>-g</li>
<li>-glevel：生成操作系统本地格式的调试信息，-g和-ggdb并不太相同，-g会生成gdb之外的信息，level取值同上。</li>
<li>-s：去除可执行文件中的符号表和重定位信息，用于减小可执行文件的大小。</li>
<li>-M：告诉预处理器输出一个适合make的规则，用于描述各目标文件的依赖关系。对于每个源文件，预处理器输出一个make规则，该规则的目标项(target)是源文件对应的目标文件名，依赖项(dependency)是源文件中#include引用的所有文件。生成的规则可以是单行，但如果太长，就用\换行符续成多行。规则显示在标准输出，不产生预处理过的C程序。</li>
<li>-C：告诉预处理器不要丢弃注释，配合-E选项使用。</li>
<li>-P：告诉预处理器不要产生#line命令，配合-E选项使用。</li>
<li>-static：在支持动态链接的系统上，阻止连接共享库。</li>
<li>-nostdlib：不连接系统标准启动文件和标准库文件，只把指定的文件传递给连接器。</li>
</ul>


<!--more-->


<hr />

<h1>Warnings</h1>

<ul>
<li>-Wall：会打开一些很有用的警告选项，建议编译时加此选项。</li>
<li>-W</li>
<li>-Wextra：打印一些额外的警告信息。</li>
<li>-w：禁止显示所有警告信息。</li>
<li>-Wshadow：当一个局部变量遮盖住了另一个局部变量或者全局变量时，给出警告，-Wall并不会打开此项。</li>
<li>-Wpointer-arith：对函数指针或者void *类型的指针进行算术操作时给出警告，-Wall并不会打开此项。</li>
<li>-Wcast-qual：当强制转化丢掉了类型修饰符时给出警告，-Wall并不会打开此项。</li>
<li>-Waggregate-return：如果定义或调用了返回结构体或联合体的函数，编译器就发出警告。</li>
<li>-Winline：无论是声明为inline或者是指定了-finline-functions选项，如果某函数不能内联，编译器都将发出警告。</li>
<li>-Werror：把警告当作错误，出现任何警告就放弃编译。</li>
<li>-Wunreachable-code：如果编译器探测到永远不会执行到的代码，就给出警告。</li>
<li>-Wcast-align：一旦某个指针类型强制转换导致目标所需的地址对齐增加时，编译器就发出警告。</li>
<li>-Wundef：当一个没有定义的符号出现在#if中时，给出警告。</li>
<li>-Wredundant-decls：如果在同一个可见域内某定义多次声明，编译器就发出警告，即使这些重复声明有效并且毫无差别。</li>
</ul>


<hr />

<h1>Optimization</h1>

<ul>
<li>-O0：禁止编译器进行优化，默认为此项。</li>
<li>-O</li>
<li>-O1：尝试优化编译时间和可执行文件大小。</li>
<li>-O2：更多的优化，会尝试几乎全部的优化功能，但不会进行“空间换时间”的优化方法。</li>
<li>-O3：在-O2的基础上再打开一些优化选项：-finline-functions， -funswitch-loops和-fgcse-after-reload。</li>
<li>-Os：对生成文件大小进行优化，它会打开-O2开的全部选项，除了那些增加文件大小的。</li>
<li>-finline-functions：把所有简单的函数内联进调用者，编译器会探索式地决定哪些函数足够简单，值得做这种内联。</li>
<li>-fstrict-aliasing：施加最强的别名规则（aliasing rules）。</li>
</ul>


<hr />

<h1>Standard</h1>

<ul>
<li>-ansi：支持符合ANSI标准的C程序，这样就会关闭GNU C中某些不兼容ANSI C的特性。</li>
<li>-std=c89</li>
<li>-iso9899:1990：指明使用标准ISO C90作为标准来编译程序。</li>
<li>-std=c99</li>
<li>-std=iso9899:1999：指明使用标准ISO C99作为标准来编译程序。</li>
<li>-std=c++98：指明使用标准C++98作为标准来编译程序。</li>
<li>-std=gnu9x</li>
<li>-std=gnu99：使用ISO C99，再加上GNU的一些扩展。</li>
<li>-fno-asm：不把asm, inline或typeof当作关键字，因此这些词可以用做标识符，用<strong>asm</strong>， <strong>inline</strong>和<strong>typeof</strong>能够替代它们，-ansi隐含声明了-fno-asm。</li>
<li>-fgnu89-inline：告诉编译器在C99模式下看到inline函数时使用传统的GNU句法。</li>
</ul>


<hr />

<h1>C options</h1>

<ul>
<li>-fsigned-char</li>
<li>-funsigned-char：把char定义为有/无符号类型，如同signed char/unsigned char。</li>
<li>-traditional：尝试支持传统C编译器的某些方面。</li>
<li>-fno-builtin</li>
<li>-fno-builtin-function：不接受没有<em>_builtin</em>前缀的函数作为内建函数。</li>
<li>-trigraphs：支持ANSI C的三联符（ trigraphs），-ansi选项隐含声明了此选项。</li>
<li>-fsigned-bitfields</li>
<li>-funsigned-bitfields：如果没有明确声明<code>signed'或</code>unsigned'修饰符，这些选项用来定义有符号位域或无符号位域，缺省情况下位域是有符号的，因为它们继承的基本整数类型（如int）是有符号的。</li>
<li>-Wstrict-prototypes：如果函数的声明或定义没有指出参数类型，编译器就发出警告。</li>
<li>-Wmissing-prototypes：如果没有预先声明就定义了全局函数，编译器就发出警告，即使函数定义自身提供了函数原形也会产生这个警告，这个选项的目的是检查没有在头文件中声明的全局函数。</li>
<li>-Wnested-externs：如果某extern声明出现在函数内部，编译器就发出警告。</li>
</ul>


<hr />

<h1>C++ options</h1>

<ul>
<li>-ffor-scope：从头开始执行程序，也允许进行重定向。</li>
<li>-fno-rtti：关闭对dynamic_cast和typeid的支持，如果不需要这些功能，关闭它会节省一些空间。</li>
<li>-Wctor-dtor-privacy：当一个类没有用时给出警告，因为构造函数和析构函数会被当作私有的。</li>
<li>-Wnon-virtual-dtor：当一个类有多态性，而又没有虚析构函数时，发出警告，-Wall会开启这个选项。</li>
<li>-Wreorder：如果代码中的成员变量的初始化顺序和它们实际执行时初始化顺序不一致，给出警告。</li>
<li>-Wno-deprecated：使用过时的特性时不要给出警告。</li>
<li>-Woverloaded-virtual：如果函数的声明隐藏住了基类的虚函数，就给出警告。</li>
</ul>


<hr />

<h1>Machine Dependent Options (Intel)</h1>

<ul>
<li>-mtune=cpu-type：为指定类型的CPU生成代码，cpu-type可以是：i386，i486，i586，pentium，i686，pentium4等等。</li>
<li>-msse</li>
<li>-msse2</li>
<li>-mmmx</li>
<li>-mno-sse</li>
<li>-mno-sse2</li>
<li>-mno-mmx：使用或者不使用MMX，SSE，SSE2指令。</li>
<li>-m32</li>
<li>-m64：生成32位/64位机器上的代码。</li>
<li>-mpush-args</li>
<li>-mno-push-args：（不）使用 push 指令来进行存储参数，默认是使用。</li>
<li>-mregparm=num：当传递整数参数时，控制所使用寄存器的个数。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C编译警告]]></title>
    <link href="http://txgcwm.github.io/blog/2014/04/17/cbian-yi-jing-gao/"/>
    <updated>2014-04-17T00:00:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2014/04/17/cbian-yi-jing-gao</id>
    <content type="html"><![CDATA[<p>编译的时候，一看到warning信息就心烦，尤其在遇到错误的时候还得在一大堆信息中去查找error。公司的代码在编译时有一大堆的warning信息，我觉得它们可恶透了，在心情好的时候就慢慢地把它们给修改了。遇到警告的信息，我一般不太会使用编译选项把它们给避免了，因为这可能隐藏掉一些潜在的错误。</p>

<p>在整个的清理过程中，主要发现以下几类警告信息：</p>

<ul>
<li>类在构建时，变量初始化的次序颠倒；</li>
<li>有无符号数在作比较；</li>
<li>宏定义不正确；</li>
<li>定义了没有使用的变量，如果有很多条件宏定义的时候，这个处理要细致一些；</li>
<li>结构体和数组的初始化方式不正确，其实是错误的方式，却也只是警告；</li>
<li>不小心书写代码引发的警告，有些其实也是错误，不过编译器不能识别出来，例如以下列举的例子；
```
if(ptr != NULL);  // 分号错误的添加
  printf(&ldquo;[%s, %d] address: %p \n&rdquo;, <strong>FUNCTION</strong>, <strong>LINE</strong>, ptr);
  //当然这里在程序运行时，如果ptr为NULL会引发段错误。若是其它的一些操作，可能一下子根本查不出错误的所在。</li>
</ul>


<p>if(a=1)  //实际上代码的本意是想表达if(a==1)，这样写是潜在的错误，其它的逻辑根本执行不到。</p>

<pre><code>/*do something*/
</code></pre>

<p>```
&ndash; 函数的形参定义了，在函数体内却没有使用到。</p>

<!--more-->


<p>针对最后一点警告信息，可以有以下的方式处理：</p>

<ul>
<li>去除没有使用的形参；</li>
<li>使用<code>(void)x</code>的方式；
```

<h1>define UNUSED(x) (void)x</h1>

<p>void SomeFunction(int param1, int param2)
{
  UNUSED(param2);
  //UNUSED(param2)语句不产生任何目标代码，消除对未使用变量的警告，并明确文件不要使用变量的代码。
  //do stuff with param1
}
```</p></li>
<li>对没使用的参数使用<code>para=para</code>方式；
<code>
int SomeFunction(int param1, int param2)
{
  param2=param2;    //添加该行
  //do stuff with param1
  return 0;
}
</code></li>
<li>使用<code>gcc</code>的<code>__attribute__((unused))</code>功能项；
```

<h1>ifdef UNUSED</h1>

<h1>elif defined(<strong>GNUC</strong>)</h1>

<h1>define UNUSED(x) UNUSED_ ## x <strong>attribute</strong>((unused))</h1>

<h1>elif defined(<strong>LCLINT</strong>)</h1>

<h1>define UNUSED(x) /<em>@unused@</em>/ x</h1>

<h1>else</h1>

<h1>define UNUSED(x) x</h1>

<h1>endif</h1></li>
</ul>


<p>void dcc_mon_siginfo_handler(int UNUSED(whatsig))
```</p>

<p>所有的warning信息去除之后，整个代码的编译过程就清晰了很多。大伙并不是没有察觉到这些警告的重要性，只是已经习惯了自己的方式，而漠视了这一切，殊不知细看的话这里面还是存在还多的错误。世间百态任它如何，我要坚守自己的风格，还自己一个清净的世界。</p>

<p><big>参考文章</big> <br/>
<a href="http://bbs.csdn.net/topics/340049876">如何消除gcc编译警告 warning: &ldquo;unused parameter xxxx&rdquo;</a><br/>
<a href="http://sourcefrog.net/weblog/software/languages/C/unused.html">UNUSED in gcc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[popen和pclose函数]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/03/popenhe-pclosehan-shu/"/>
    <updated>2013-08-03T22:07:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/03/popenhe-pclosehan-shu</id>
    <content type="html"><![CDATA[<p>标准I/O函数库提供了popen函数，它启动一个子进程去执行一个shell命令行。popen函数还创建一个管道用于父子进程间通信。父进程要么从管道读信息，要么向管道写信息，至于是读还是写取决于父进程调用popen时传递的参数。以下给出popen、pclose的定义：
<code>
FILE *popen( const char* command, const char* mode )
</code>
参数说明</p>

<p>command： 是一个指向以NULL结束的shell命令字符串的指针。这行命令将被传到bin/sh并使用-c标志，shell将执行这个命令。<br/>
mode： 只能是读或者写中的一种，得到的返回值(标准I/O流)也具有和type相应的只读或只写类型。如果type是“r”则文件指针连接到command的标准输出;如果type是“w”则文件指针连接到command的标准输入。</p>

<!--more-->


<p>返回值</p>

<p>如果调用成功，则返回一个读或者写打开文件的指针；如果失败，返回NULL，具体错误要根据errno判断。</p>

<p><code>
int pclose (FILE* stream)
</code>
参数说明</p>

<p>stream： popen返回的文件指针。</p>

<p>返回值</p>

<p>如果调用失败，返回-1。</p>

<p>由于平时接触到usb插拔的事情比较多，现以列举系统中usb设备vid/pid为例。本想从<code>/proc/bus/usb/devices</code>中获取到usb设备的相关信息，可Ubuntu系统下没有<code>/proc/bus/usb/</code>这个目录。至于为什么没有这个目录和如何重新找回这个目录，可以查看 <a href="http://ubuntuforums.org/showthread.php?t=1432598">这里</a> 。所以这里我们使用<code>lsusb</code>去获取usb设备的基本信息。构建<code>int get_device_info(void)</code>函数获取系统中usb设备的vid/pid信息：
```
int get_device_info(void)
{</p>

<pre><code>FILE *fp = NULL;
char buffer[128];
char *ptr = NULL;
int vid, pid;

fp = popen("lsusb", "r");
if (fp == NULL)
    return -1;

while (NULL != fgets(buffer, sizeof(buffer), fp)) {
    ptr = strstr(buffer, "ID");
    if (ptr) {
        sscanf(ptr, "ID %04x:%04x", &amp;vid, &amp;pid);
        printf("%04x:%04x\n", vid, pid);
    }
}
pclose(fp);

return 0;
</code></pre>

<p>}
<code>
编写主函数调用以上的接口，使用`lsusb`查看usb设备及执行测试程序：
</code>
$ lsusb
Bus 001 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub
Bus 002 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 003: ID 1532:0016 Razer USA, Ltd DeathAdder Mouse
Bus 001 Device 004: ID 058f:b002 Alcor Micro Corp.</p>

<p>$ ./a.out
8087:0024
8087:0024
1d6b:0002
1d6b:0002
1532:0016
058f:b002</p>

<p>```</p>

<p><big>参考文章</big></p>

<p><a href="http://my.oschina.net/renhc/blog/35116">基于管道的popen和pclose函数</a><br/>
<a href="http://networking.ctocio.com.cn/tips/137/9412137.shtml">Linux popen函数的使用总结</a><br/>
<a href="http://bbs.chinaunix.net/thread-4087539-1-1.html">关于/proc/iomem中信息解释</a>  <br/>
<a href="http://tech.watchstor.com/storage-systems-117859.htm">proc文件系统功能总览</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log10的实现]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/03/log10de-shi-xian/"/>
    <updated>2013-08-03T01:46:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/03/log10de-shi-xian</id>
    <content type="html"><![CDATA[<p>在项目中要使用到log10计算，可所用系统的标准库里并没有移植该功能，需要自己实现。请问，采用什么算法实现该功能？</p>

<p>在网上找了一个例子，但不确定能否在嵌入式的一些平台使用。
```</p>

<pre><code>double my_log10(double x)
{
    register double ret;

 __asm__(
    "fldlg2\n\t" 
    "fxch\n\t" 
    "fyl2x"
    :"=t"(ret)
    :"0"(x)
        );
   return ret;
}
</code></pre>

<p>```</p>

<!--more-->


<p>也查看了glibc的源码，可调用了其它的一些API，对库的依赖比较大，逐步移植的话比较麻烦。代码如下：
```</p>

<pre><code>double __log10 (double x)
{
    if (__builtin_expect (islessequal (x, 0.0), 0) &amp;&amp; _LIB_VERSION != _IEEE_)
    {
        if (x == 0.0)
        {
             feraiseexcept (FE_DIVBYZERO);
             return __kernel_standard (x, x, 18); /* log10(0) */
        }
        else
        {
            feraiseexcept (FE_INVALID);
            return __kernel_standard (x, x, 19); /* log10(x&lt;0) */
        }
     }

   return  __ieee754_log10 (x);
}
</code></pre>

<p>```</p>

<p>参考 <a href="http://www.cnblogs.com/skyivben/archive/2013/02/15/2912914.html">这里</a> 实现了一个c语言版本的log10快速算法，还不是很完善。
```</p>

<h1>include &lt;math.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;stdio.h></h1>

<p>static double Sqrt(double x)
{</p>

<pre><code>if (x &lt; 0)
    return -1;
if (x == 0)
    return 0;
double y = (double)sqrt((double)x);

return (y + x / y) / 2;
</code></pre>

<p>}</p>

<p>static double NegativeLog(double q)
{</p>

<pre><code>int p;
double pi2 = 6.283185307179586476925286766559;
double eps2 = 0.00000000000001; // 1e-14
double eps1;    // 1e-28
double r = q, s = q, n = q, q2 = q * q, q1 = q2 * q;

eps1 = eps2 * eps2;

for (p = 1; (n *= q1) &gt; eps1; s += n, q1 *= q2)
    r += (p = !p) ? n : -n;

double u = 1 - 2 * r, v = 1 + 2 * s, t = u / v;
double a = 1, b = Sqrt(1 - t * t * t * t);

for (; a - b &gt; eps2; b = Sqrt(a * b), a = t)
    t = (a + b) / 2;

return pi2 / (a + b) / v / v;
</code></pre>

<p>}</p>

<p>static double Log(double x)
{</p>

<pre><code>int k = 0;
double ln10 = 2.30258509299404568401799145468;

if (x &lt;= 0)
    return -1;
if (x == 1)
    return 0;

for (; x &gt; 0.1; k++)
    x /= 10;
for (; x &lt;= 0.01; k--)
    x *= 10;

return k * ln10 - NegativeLog(x);
</code></pre>

<p>}</p>

<p>double Log10(double x)
{</p>

<pre><code>double ln10 = 2.30258509299404568401799145468;

return Log(x) / ln10;
</code></pre>

<p>}</p>

<p>int main(int argc, char **argv)
{</p>

<pre><code>printf(" self Log10: %f\n math log10: %f\n\n", Log10(1000), log10(1000));
printf(" self Log10: %f\n math log10: %f\n\n", Log10(1), log10(1));
printf(" self Log10: %f\n math log10: %f\n\n", Log10(8192.1024), log10(8192.1024));
printf(" self Log10: %f\n math log10: %f\n\n", Log10(0.3), log10(0.3));
printf(" self Log10: %f\n math log10: %f\n\n", Log10(33.8), log10(33.8));

return 0;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
