<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RobotsBrain | 残剑]]></title>
  <link href="http://txgcwm.github.io/blog/categories/robotsbrain/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2015-12-06T14:17:27+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RobotsBrain: log输出]]></title>
    <link href="http://txgcwm.github.io/blog/2014/07/10/robotsbrain-logshu-chu/"/>
    <updated>2014-07-10T22:09:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2014/07/10/robotsbrain-logshu-chu</id>
    <content type="html"><![CDATA[<p>在构建一个库的时候，通常会写专门的log输出函数，下面介绍一个简单的实现。根据不同的需求，需要对日志的输出作一个级别限定，便于查阅及跟踪流程。以下是对级别的设置：
```
typedef enum log_level_en {</p>

<pre><code>RB_LOG_MIN,
RB_LOG_DEBUG,
RB_LOG_INFO,
RB_LOG_NOTICE,
RB_LOG_WARNING,
RB_LOG_ERROR,
RB_LOG_CRIT,
RB_LOG_ALERT,
RB_LOG_EMERG,
RB_LOG_MAX
</code></pre>

<p>}log_level;
```</p>

<p>该部分参考内核的级别设定，不同的是数值越低其信息的重要程度越低。</p>

<p>具体的日志输出，我们采用了宏定义的方式，因为考虑到要输出<code>__FUNCTION__</code>等信息，其具体的实现如下所示：
```</p>

<h1>define RB_LOG(level, fmt, args&hellip;) \</h1>

<pre><code>do {    \
    if(rb_log_check_level(level) == 0)  \
        break;  \
    char rb_log_buf[RB_LOG_BUFFER_LEN] = {0};   \
    snprintf(rb_log_buf, RB_LOG_BUFFER_LEN, "pid(%d) %s %s(%d)", \
                getpid(), __FILE__, __FUNCTION__, __LINE__);    \
    rb_log_printf(level, rb_log_buf, fmt, ##args);  \
} while(0)
</code></pre>

<p>```</p>

<p>每个级别输出的宏定义如下：
```</p>

<h1>define RB_DEBUG(fmt, args&hellip;)  RB_LOG(RB_LOG_DEBUG, fmt, ##args)</h1>

<h1>define RB_INFO(fmt, args&hellip;)   RB_LOG(RB_LOG_INFO, fmt, ##args)</h1>

<h1>define RB_NOTICE(fmt, args&hellip;) RB_LOG(RB_LOG_NOTICE, fmt, ##args)</h1>

<h1>define RB_WARNING(fmt, args&hellip;)    RB_LOG(RB_LOG_WARNING, fmt, ##args)</h1>

<h1>define RB_ERROR(fmt, args&hellip;)  RB_LOG(RB_LOG_ERROR, fmt, ##args)</h1>

<h1>define RB_CRIT(fmt, args&hellip;)   RB_LOG(RB_LOG_CRIT, fmt, ##args)</h1>

<h1>define RB_ALERT(fmt, args&hellip;)  RB_LOG(RB_LOG_ALERT, fmt, ##args)</h1>

<h1>define RB_EMERG(fmt, args&hellip;)  RB_LOG(RB_LOG_EMERG, fmt, ##args)</h1>

<p>```</p>

<!--more-->


<p>初始化函数，用于设置输出文件的名称和输出级别的设定：如果<code>log_file</code>设置成<code>NULL</code>的话，则直接将信息打印到<code>stderr</code>；<code>level</code>的值设置的越小，它输出的信息越多:
<code>
void rb_log_init(const char *log_file, log_level level);
</code></p>

<p>释放分配的资源，如果调用了<code>rb_log_init</code>就必须调用以下的接口:
<code>
void rb_log_uninit(void);
</code></p>

<p>检测是否要打印信息:
<code>
int rb_log_check_level(log_level level);
</code></p>

<p>日志输出:
<code>
void rb_log_printf(log_level level, const char *prefix, const char *fmt, ...);
</code></p>

<p>当然我们也可以直接调用<code>RB_DEBUG</code>等接口，这样的话，log信息直接输出到<code>stderr</code>。具体的代码及测试用例，请参考<a href="https://github.com/RobotsBrain/robrain/tree/master/src">这里</a>。</p>
]]></content>
  </entry>
  
</feed>
