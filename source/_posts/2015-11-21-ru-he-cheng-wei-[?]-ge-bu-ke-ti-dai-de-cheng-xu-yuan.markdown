---
layout: post
title: "如何成为一个不可替代的程序员"
date: 2015-11-21 21:44
comments: true
categories: [茶余酒后]
tags: []
keywords: 
description: 
---
都说程序员是一个吃青春饭的职业，做到一定年龄就不适合了，一则思维不再那么活跃，二则新人在技术上很快追赶上来。那么如何才能成为一个不可替代的程序员呢？不是没有办法，这一切完全可以做到。不知道？没关系，我教你！

一个函数千万不要写的太明确，更不能写接口说明了，能写多长就写多长，只要你自己把逻辑理清楚即可。不同的功能也最好不要分开，一个函数里能挤下去，干嘛非得分成几个函数呢！

每个函数里还需要多写一些临时变量，即便不用也要写在那里，说不定哪天就可能用到了呢。而且变量的命名也要非常规，让他人知道变量的名字了岂不显得自己没有水准呢。不要管这种编译警告，stack还是够用的嘛。关键这种方法还能增加代码量，代码量不就是工作量的体现嘛。

<!--more-->
数据结构这东西也是关键，不能定义的太简单，这样也很容易让人看出端倪，最好定义得复杂些，那样其他程序员也就看不懂了。做到以下一种效果最佳，一旦要增加新的功能就要更改很多接口，要是能更改很多文件就更好了。那时，一般人肯定办不到，只有请你出马了才能解决一切。

多写几个源码文件也是不必要的事情，那样还有可能造成磁盘的碎片，所以一个项目所要的代码最好写在一个文件里就好。这样做有个最明显的优势，可以让老大直接看到你的代码量，否则上面的领导根本不知道你在做什么，尤其是在他们发现你只写了几百行代码的时候会觉得你对公司没有价值了。想想可能要被炒了，你会觉得这个建议是很靠谱的。

log这东西还是要写写的，但写了就存在一种隐患，就是别人可能看懂，然后把自己的代码更改掉。是不是就没有办法了呢？不对，还是有的。就是你要多写log，无论有必要还是没有必要，反正现在处理器的能力那么强，没有必要考虑性能相关的问题。在不同阶段，还需要重复调用某一功能接口，那样就会产生更多的log，绝对让那些不知情的人头晕，这样他们也就不敢去随意改了。有什么问题出现，到时还得乖乖来请你看。老大一看，每个地方都需要你，到时怎么可能轻易让你走呢！其他人都可以走，就你不能走，能达到这种效果，是不是就不可替代了呢？对，这不是明白着的嘛。

预定义也是一个绝招，凡是要加一个功能必定要加一个，这样的话可以实现定制化。要想达到更好的效果，可以让那些定义互相嵌套，如果这么做，要是某个定义不符合，让程序根本跑不起来。非此即彼的逻辑都要一起编译，否则又得让那群新人看懂了。

一些新人若是想找你要文档，可不要真写，问他哪里不明白直接跟他讲就好。真讲？不，你傻啊，那样岂不是要把你的位置给夺了。将几个经常跑到的代码接口就好，而且只能针对他遇到问题部分的逻辑讲，这样的话，即便他解决了当前的bug，整个逻辑还是不清楚的。

最后一点是至关重要的，就是要有一个态度。当那群新人不懂且要求你更改的时候，你就告诉他们你有新功能要开发，而且很急切，老大催着要，那么那群不懂事的家伙就会乖乖回到自己的位置，不再提这种不合理的需求了。

做到以上几点，你就可以成为一个不可替代的程序员了。到时你真的要走，身边的同事肯定不答应，因为他们已经离不开你了，没了你他们根本解不了bug，更不用说添加新的功能了。说不定到时领导都会拖着你的大腿请你留下呢！