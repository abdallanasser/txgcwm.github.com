<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[残剑]]></title>
  <link href="http://txgcwm.github.io/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2013-07-28T12:37:04+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[略说博客]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/28/lue-shuo-bo-ke/"/>
    <updated>2013-07-28T12:29:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/28/lue-shuo-bo-ke</id>
    <content type="html"><![CDATA[<p><img src="http://www.youdao.com/help/toys/bloggadget/001/1.gif"></p>

<p>在平时搜索技术问题的时候，收藏了一些技术博客。我发现博主的所在地域、服务公司、学习背景、年龄分布都有一些特性，初步作了一些整理同大家分享。在这里只论那些搭建独立博客的博主，而不讨论那些在各大论坛上构建博客的博主。</p>

<h1>博主分布图</h1>

<h2>区域分布</h2>

<p>华东以上海、杭州为主，互联网企业相对较多，其公司的开放、自由、分享的文化起到了很关键的作用；华南以深圳、广州为主；华北以北京为主；中西部以重庆、武汉、西安为主，很多是学生博主群体，学校的文化在这方面起到了很重要的作用；西南部以成都为主。</p>

<h2>公司分布</h2>

<p>阿里系最多，腾讯系次之，网易系也有不少，其它较多的是一些新兴的互联网公司（这其中很多有阿里系的身影）。从这方面可以看出，阿里的公司氛围是很不错的，大伙都有分享的精神。补充一点，阿里也分享了很多的开源项目，到github上可以找到。</p>

<h2>学校分布</h2>

<p>西安邮电大学最多，华中科技大学次之，西安电子科技大学、西安交通大学、浙江大学也有不少，其它大学相对较少。所有大学中，西邮给我的映像最好，它们的学生在Linux方面有较高的造诣，出现了很多这方面的牛人。</p>

<h2>年龄分布</h2>

<p>以20～30岁年龄段居多，属于新兴博主，大多以技术路线为主；30～40岁年龄段的博主次之，属于资深博主，不仅有丰富的技术知识，还有精彩的人生阅历及感悟方面的文章；10～20岁年龄段的相对较少，属于后起之秀，大多也以技术为主线，其中年龄最小的大概是12、13岁。很多“老人”坚持写博客6、7年以上，实在是一件不容易的事情；小博主的崛起，真正应了“后生可畏”，想想自己那个年龄段都不知道自己想要做什么，看来“前浪”很快就会被“拍死在沙滩上”。</p>

<h1>杂说</h1>

<p>曾经在QQ空间、网易、其它技术论坛上写过博客，但都因为各种各样的原因（没有专一的主题，工作的变更导致技术方向的改变，人性的懒散等等）没有坚持下来。虽然不在那些博客中写文章，偶尔还是会去看看自己之前写的东西。</p>

<p>2011年的时候决定改变一下自己，觉得应该把自己学习到的东西记录一下，与网上的朋友们分享分享，所以在CU博客上安了家。这个博客从那时到现在一直有更新，大多是个人的学习笔记及从网络上转载的文章，后续也会继续更新。</p>

<p>很不幸的是，2013年年初的时候CU博客改版了，书写博客的整体体验很差，也向管理员反应过这个事件，可并未察觉出它们有更新博客系统的迹象。慢慢的就开始不爽了！5月份的时候就基于github和Octopress搭建了一个个人独立博客，陆陆续续到7月份才构建了一个自己认为比较满意的博客。独立博客的好处在于其可定制性强，不好的地方就是对于一个小白博主来说有一定的技术难度。</p>

<p>如果你是技术狼/媛，对Linux方面有兴趣的话可以看我的 <a href="http://blog.chinaunix.net/uid/25885064.html">CU博客</a> 和 <a href="http://txgcwm.github.io/">个人独立博客</a> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于微访谈]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/27/guan-yu-wei-fang-tan/"/>
    <updated>2013-07-27T23:34:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/27/guan-yu-wei-fang-tan</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://pic002.cnblogs.com/images/2010/14032/2010111217383632.jpg" width="228" height="221" title="Place Kitten #2" ></p>

<h1>想法的初衷</h1>

<p>进入社会后，周围的事情与我们想象的并不一样，起初我们无所适从，慢慢的我们适应了这个复杂的社会。在这个适应的过程中，背负着社会和家庭的压力，或许有许多人蹉跎了岁月、消磨了意志、荒废了理想，也应该有一些人坚持不懈地行走在通往理想的道路上。有多少人还曾记得自己当初的梦想，记得或不记得都有很多的感慨。我们也常想把它记录下来，但真正提笔的时候却不知道从何处下手，所以也就放弃了。</p>

<!--more-->


<p>曾经一个同学在QQ上上传了一张“关于某某事意见签名”的单子，那时引起了强烈的反响，很多人都不曾记得有那么一回事。是的，岁月在消磨着我们的记忆。很多事情我们应该用笔把它记录下来，但多少人会使用日记把过往的经历记录下来呢？那么这个艰难的任务就交由我来处理吧，让我当一次“小史公”来记录你们走过的道路。虽然不能记录每一天的状况，但我们可以记录下一大段时间内的精彩。</p>

<p>由于行业、地域等方面的原因，交流圈变得小型化、区域化，彼此之间的交流越来越少，但我相信大家牵挂着彼此。借助这样一个机会，让大家了解一下我们的近况，增进彼此之间的认识，同时也可以让我们认识到更多的行业。</p>

<p>或许我们小有成就，认为这一切不足以拿来分享，可你的经历却可能给一些朋友带来帮助，其它朋友也可能给你带去更好的建议促你成长；或许我们过得很艰辛，这又如何，只有经历过辛酸才能品味美好。无论怎样，我们都可能得获取到宝贵的建议，让我们越走越好。</p>

<h1>执行流程</h1>

<p>按照初步的设计，本次微访谈的大概流程如下：</p>

<ol>
<li>向受访者发出要求，朋友们也可以主动告知我希望接受这样一个访谈；</li>
<li>如果接受的话，请告知我目前你所从事的事业、想法等等基本信息，我根据获取到的信息设计一些问题；</li>
<li>可以选择以邮件回复的方式或跟我以网络通讯工具交谈的方式来完成微访谈；</li>
<li>整理微访谈的问答以博文的形式发出，问答中所使用的署名采用受访者的网名，如果不同意可以不发表。</li>
</ol>


<h1>后续计划</h1>

<p>或许很多人不屑于这样的一次访谈，认为一个小小人物不值得记述，但我认为小人物的故事同样精彩。若干年后，或许我们成功了，又或许依旧平凡，回过头看看我们又会有怎样的感慨呢？所以，我希望两年后再做一次微访谈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加表格]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/27/octopresstian-jia-biao-ge/"/>
    <updated>2013-07-27T15:08:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/27/octopresstian-jia-biao-ge</id>
    <content type="html"><![CDATA[<p>Markdown语法为“方便在网上读文章、写文章、修改文章更容易”这一目标而生。它不是HTML的替代品，也不是为了终结HTML。它的语法非常简单，只相当于HTML标签的一个非常非常小的子集。它并非是为了更容易输入HTML标签而创造一种新语法。HTML是一种适合发表的格式；而Markdown是一种书写格式。正因如此，Markdown的格式化语法仅需解决用纯文本表达的问题。</p>

<p>下面的这个例子是在一篇Markdown文章中添加一个HTML表格：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;table&gt;
</span><span class='line'>    &lt;tr&gt;
</span><span class='line'>        &lt;td&gt;Column1&lt;/td&gt;
</span><span class='line'>        &lt;td&gt;Column2&lt;/td&gt;
</span><span class='line'>    &lt;/tr&gt;
</span><span class='line'>    &lt;tr&gt;
</span><span class='line'>        &lt;td&gt;foo&lt;/td&gt;
</span><span class='line'>        &lt;td&gt;foo&lt;/td&gt;
</span><span class='line'>    &lt;/tr&gt;
</span><span class='line'>&lt;/table&gt;    </span></code></pre></td></tr></table></div></figure>


<!--more-->




<table>
    <tr>
        <td>Column1</td>
        <td>Column2</td>
    </tr>
    <tr>
        <td>foo</td>
        <td>foo</td>
    </tr>
</table>


<p></p>

<p>也可以使用markdown的扩展语法添加一个表格：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Column1     | Column2      
</span><span class='line'>----------- | ------------ 
</span><span class='line'>foo         | foo</span></code></pre></td></tr></table></div></figure>


<p>但使用html语法做一个表格很麻烦，而且看起来也不是很美观。使用markdown语法做出来的表格却没有边框。所以需要重新做一些设定，以下为设置和更改的方法。</p>

<p>Step 1. 在source/stylesheets/目录下增加data-table.css文件，添加如下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* + table {
</span><span class='line'>    border-style:solid;
</span><span class='line'>    border-width:1px;
</span><span class='line'>    border-color:#e7e3e7;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>* + table th, * + table td {
</span><span class='line'>    border-style:dashed;
</span><span class='line'>    border-width:1px;
</span><span class='line'>    border-color:#e7e3e7;
</span><span class='line'>    padding-left: 3px;
</span><span class='line'>    padding-right: 3px;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>* + table th {
</span><span class='line'>    border-style:solid;
</span><span class='line'>    font-weight:bold;
</span><span class='line'>    background: url("/images/noise.png?1330434582") repeat scroll left top #F7F3F7;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>* + table th[align="left"], * + table td[align="left"] {
</span><span class='line'>    text-align:left;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>* + table th[align="right"], * + table td[align="right"] {
</span><span class='line'>    text-align:right;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>* + table th[align="center"], * + table td[align="center"] {
</span><span class='line'>    text-align:center;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Step 2. 添加link到head.html中，在source/_includes/head.html文件中插入如下语句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link href="http://txgcwm.github.io/stylesheets/data-table.css" media="screen, projection" rel="stylesheet" type="text/css" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>重新设定后，表格样式如下：</p>

<table>
<thead>
<tr>
<th>Column1     </th>
<th> Column2      </th>
</tr>
</thead>
<tbody>
<tr>
<td>foo         </td>
<td> foo</td>
</tr>
</tbody>
</table>


<br></br>


<p><big>参考文章:</big> <br/>
<a href="http://samwize.com/2012/09/24/octopress-table-stylesheet/">Octopress Table Stylesheet</a><br/>
<a href="http://jhjguxin.github.io/blog/2012/04/24/markdownyu-fa/">Markdown语法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux操作系统下的MAN命令]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/27/linuxcao-zuo-xi-tong-xia-de-manming-ling/"/>
    <updated>2013-07-27T13:27:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/27/linuxcao-zuo-xi-tong-xia-de-manming-ling</id>
    <content type="html"><![CDATA[<p>Unix/Linux下的man命令可以查询常用的命令和函数。可是只知道用“man 函数名”来查询会遇到很多问题，比如<code>man read</code>，想看的是ANSI C中stdio的read函数原型和说明，出来的却是BASH命令的说明。这是怎么回事呢？原来read本身是man命令的一个参数，这样就会以为你要使用read的功能，而不是查看read函数。那么要怎样查看read函数呢?可以使用<code>man 2 read</code>或者是<code>man 3 read</code>查看。</p>

<h1>分卷号</h1>

<p>以上指令的中间数字是什么意思呢？是man的分卷号，所有的手册页都属于一个特定的分卷号，用一个字符来表示。Linux下最通用的分卷号及其名称和说明如下表所示。</p>

<table>
<thead>
<tr>
<th>分卷号         </th>
<th>名称 </th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td> 用户命令     </td>
<td> 可由任何人启动  </td>
</tr>
<tr>
<td>2</td>
<td> 系统调用     </td>
<td> 由内核提供的函数  </td>
</tr>
<tr>
<td>3</td>
<td> 例程        </td>
<td> 库函数    </td>
</tr>
<tr>
<td>4</td>
<td> 设备        </td>
<td> /dev目录下的特殊文件   </td>
</tr>
<tr>
<td>5</td>
<td> 文件格式描述  </td>
<td> 例如/etc/passwd   </td>
</tr>
<tr>
<td>6</td>
<td> 游戏        </td>
<td> 略  </td>
</tr>
<tr>
<td>7</td>
<td> 杂项        </td>
<td> 例如宏命令包、惯例等  </td>
</tr>
<tr>
<td>8</td>
<td> 系统管理员工具</td>
<td> 只能由root启动  </td>
</tr>
<tr>
<td>9</td>
<td> 其他（Linux特定的）</td>
<td> 用来存放内核例行程序的文档  </td>
</tr>
<tr>
<td>n</td>
<td> 新文档           </td>
<td> 可能要移到更适合的领域  </td>
</tr>
<tr>
<td>o</td>
<td> 老文档           </td>
<td> 可能会在一段期限内保留  </td>
</tr>
<tr>
<td>l</td>
<td> 本地文档          </td>
<td> 与特定系统有关的  </td>
</tr>
</tbody>
</table>


<!--more-->


<br></br>


<h1>常用参数和用法</h1>

<ul>
<li>打开所有领域内的同名帮助，例如man fam，首先会进入一个fam(1M)的命令版fam帮助，再按q键就会进入FAM(3X)，库函数版的帮助。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man -a cmd</span></code></pre></td></tr></table></div></figure>


<ul>
<li>显示所有cmd的所有手册文件的路径，如<code>man -aw fam</code>指令。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man -aw cmd</span></code></pre></td></tr></table></div></figure>


<ul>
<li>直接指定特定领域内搜索手册页，如<code>man 3 fam</code>直接进入库函数版的帮助。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man 领域代号 cmd</span></code></pre></td></tr></table></div></figure>


<ul>
<li>指定手册文件的搜索路径，如<code>man -M /home/mysql/man mysql</code>显示的就是你安装的mysql的帮助，而不是系统自带的旧版mysql的帮助。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man -M cmd</span></code></pre></td></tr></table></div></figure>


<ul>
<li>把man手册信息输出到文本文件。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man cmd | col -b &gt; cmd.txt</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看特定语言版本的手册页，显示特定语言manpage文件的路径。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ LANG=语言代号
</span><span class='line'>$ man -w cmd</span></code></pre></td></tr></table></div></figure>


<p>例如要查看mplayer的中文man路径：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ LANG=en_US.UTF-8
</span><span class='line'>$ man -w mplayer
</span><span class='line'>/usr/share/man/zh/man1/mplayer.1.gz</span></code></pre></td></tr></table></div></figure>


<h1>配置文件/etc/man.config</h1>

<p>如果不想每次<code>man cmd</code>都要用<code>-M</code>指定路径，那么可以通过修改配置文件，添加内容如：</p>

<pre><code>MANPATH /home/mysql/man
</code></pre>

<p>man在各领域的搜索次序可以通过修改以下设置：</p>

<pre><code>MANSECT 1:8:2:3:4:5:6:7:9:tcl:n:l:p:o
</code></pre>

<p>不过，一般不推荐修改man的配置文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[奇谋之士蒯通]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/26/qi-mou-zhi-shi-kuai-tong/"/>
    <updated>2013-07-26T21:52:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/26/qi-mou-zhi-shi-kuai-tong</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://pic.baike.soso.com/p/20120927/20120927185828-406438040.jpg" width="210" height="248" title="Place Kitten #2" ></p>

<p>《史记》中有各式各样的人物，司马迁却没有给奇谋之士蒯通单独列传，留下那不平凡的事迹给后人称颂。关于蒯通这个人的事迹，也只能从其他人的列传里了解到他，对于他的谋略以及对天下形势的远见都令人佩服。</p>

<p>如此有才华的人，却为何没有自己的列传，只能出现在他人的列传之中？原因很简单，司马迁写书的时代是大汉王朝，而蒯通却在那个朝代犯下了特大的错误。那么这么一个人到底有什么样的才华呢？且让我们看看他的一些事迹。</p>

<!--more-->


<h1>善待秦吏</h1>

<p>他还是在范阳的时候，那时也是很不得志。山东群起的农民大军攻入了他所在的县城，并且捕捉了县令，由于长期受到秦国法律的压制，很多人都建议处死县令以快人心。这样看来，也是情理之中！可这时他站了出来，极力反对这样做，认为这样做是极其愚蠢的。</p>

<p>“县令之所以那么做，只是按照秦国的法律办事，如果没有照办的话，他就会受到法律的惩罚。将军认为自己的军队是要听从统帅的命令，还是自作主张。如果将军认为服从命令是有必要的话，那么他作为一个秦国的官员是很尽职的。将军执意要处死一个遵从命令的士兵，这种事能不让人心寒吗？在残酷的秦法之下，他也是一个受害者。恰恰相反，将军要厚待县令，尽管他之前所做的一切近乎残忍。如果你杀了他的话，秦国其它的县令听到了这个消息后又会怎么想，他们看不到希望就只会奋死反抗，那时将军有把握战胜他们吗？秦王专政确实不得民心，可是他强大的军队是值得将军深思的。”将军遵从了他的意见，没有杀那个县令，并且厚待了他，让他到未攻下的县城郊外游玩，以示义军对过去的错误既往不咎。看到这一幕，秦国的县令纷纷投城，这就是所谓的不战而屈人之兵啊！</p>

<p>之后不知道他为什么没有留在那个将军的麾下，或许他认为那个将军无才吧。也难怪，我竭力在记忆中去寻找那个将军的名字，可是我就是想不起来。他作出了一个抉择，去投靠了韩信。或许投靠韩信也是一个错误，韩信的优柔寡断注定了蒯通的命运是悲哀的。</p>

<h1>三分天下</h1>

<p>汉王被楚围攻，不能逃脱，此时求助于韩信，蒯通说齐王：“今天下三分，而大王已经得到了一份，现在就看大王你的决定了。要是你投靠了汉王，汉王就会取得天下。那时你的死期也就到了，之所以你现在还活得好好的是因为天下还有一个楚王存在，而你就是他的克星，现在留着你是很有价值的。你要是投靠项王，项王就会取得天下，虽然项王不用大才，你却可以暂时保全性命。要是你选择谁都不帮的话，从此以后三分天下，谁都不敢先动。凭借着齐国的财富，可以修炼兵甲，鼓励农耕，不出几年齐国就可以东进，一举歼灭汉楚大军。那时，即便他们联手也无济于事。将军的丰功伟业也将会被世人传颂，还望将军慎思！”</p>

<p>然而，韩信并没有接纳他的意见，摆出了那一大堆仁义高论，搬兵去救刘邦了。</p>

<h1>各为其主</h1>

<p>蒯通给自己埋下了一个杀头的伏笔，他竟然劝韩信造反：“虽然天下已经太平，可是将军功高盖主，汉王坐在龙椅上会安心吗？把你除掉只是暂时没有一个合适的理由，将军趁现在世局还不太稳定要早做决定啊！时间一久很多部下就可能被汉王给收买了，那时将军想再起兵就难上加难了。”可是，韩信再一次没有听从他的意见，最终落得个身首异处的下场。</p>

<p>韩信在最后的留言中有这么一句“信言恨不用蒯通计”。在清除同党的时候，刘邦特别强调一定要活捉蒯通。刘邦见到他就大骂“是不是你教淮阴侯造反的”，蒯通回答的也干脆“是的，就是我教他的，他不用我的计策，所以被杀了；要是他用的话，大王你能够杀了他吗&#8221;。刘邦很生气，直接来了这么一句“亨之”。这时，他喊冤了。汉王很是好奇“是你教韩信造反的，你自己都承认了，亨了你，有何冤枉的”。蒯通辩道&#8221;秦国无道，天下的人都反对他；秦王失鹿，天下的人都追逐它。最终却被大王得到了。曾经那么多人为了得到它，都反对大王，难道大王真的要把他们都亨了吗？况且大王现在很多精锐部队都曾反对过你，难道你连他们都要亨了吗（言下之意是你杀了他们你靠谁去，你就不怕他们联合起来造反吗，到时候就不知道谁亨谁了）”。当然，他也没有忘了夸刘邦两句“当是时，臣唯独知韩信，非知陛下也”。最后，刘邦仔细想想还是放了蒯通。如果蒯通没有足够的谋略，他能够从虎口脱身吗？</p>

<p>之所以他没有被写入列传里，就是他劝说韩信造反。这件事他没有做错，错的是韩信没有采纳，或者说他在某种意义上选错了主子。司马迁要是敢给他列传，或许还要受一次腐刑，汉武帝会同意他的《史记》出版吗？你给他列传，这不是明摆着让天下人造我大汉的反吗，这事怎么能忍。</p>

<p>《史记》毕竟是司马迁一生的心血，他不能那么做，只能舍弃他了。舍弃你一个，而其他千万的大才会被历史记住！所以，只能委屈你了，蒯通&hellip;&hellip;.要是你不生在汉朝成立的时代，要是在战国，那么你的事迹在今天也会被很多人传颂。虽然对你我所知道的很少，但这一些已经足够，足以显现你的大智大勇！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下iptables防火墙原理及使用]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/25/linuxxia-iptablesfang-huo-qiang-yuan-li-ji-shi-yong/"/>
    <updated>2013-07-25T23:36:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/25/linuxxia-iptablesfang-huo-qiang-yuan-li-ji-shi-yong</id>
    <content type="html"><![CDATA[<p>netfilter/iptables（简称为iptables）组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换（NAT）等功能。iptables和netfilter的关系是一个很容易让人搞不清的问题：很多人知道iptables却不知道netfilter，其实iptables（位于/sbin目录下）只是Linux防火墙的管理工具而已，真正实现防火墙功能的是netfilter（它是Linux内核中实现包过滤的内部结构）。</p>

<h1>iptables传输数据包的过程</h1>

<p><img src="http://txgcwm.github.io/images/2013/7/iptables/flow.png" alt=" flow " /></p>

<!--more-->


<ol>
<li>当一个数据包进入网卡时，它首先进入PREROUTING链，内核根据数据包目的ip地址判断是否需要转送出去。</li>
<li>如果数据包就是进入本机的，它就会沿着上图所指方向向下移动，到达INPUT链。数据包到了INPUT链后，任何进程都会收到它。本机上运行的程序可以发送数据包，这些数据包会经过OUTPUT链，然后到达POSTROUTING链输出。</li>
<li>如果数据包是要转发出去的，且内核允许转发，数据包就会如图所示向右移动，经过FORWARD链，然后到达POSTROUTING链输出。</li>
</ol>


<h1>规则表和规则链</h1>

<p>iptables采用“表”和“链”的分层结构。表（tables）提供特定的功能，iptables内置了4个表，即Filter表、Nat表、Mangle表和Raw表，分别用于实现包过滤、网络地址转换、包重构(修改)和数据跟踪处理。链（chains）是数据包传播的路径，每一条链其实就是众多规则中的一个检查清单，每一条链中可以有一条或数条规则。当一个数据包到达一个链时，iptables就会从链中第一条规则开始检查，看该数据包是否满足规则所定义的条件。如果满足，系统就会根据该条规则所定义的方法处理该数据包，否则iptables将继续检查下一条规则。如果该数据包不符合链中任一条规则，iptables就会根据该链预先定义的默认策略来处理数据包。</p>

<p><img src="http://txgcwm.github.io/images/2013/7/iptables/table.png" alt=" table " /></p>

<h2>规则表</h2>

<p>iptables有4个规则表，其之间的优先顺序为Raw&mdash;-Mangle&mdash;-Nat&mdash;-Filter。</p>

<ol>
<li><p>Filter表有三个链：INPUT、FORWARD、OUTPUT</p>

<p> 作用：过滤数据包<br/>
 内核模块：iptables_filter</p></li>
<li><p>Nat表有三个链：PREROUTING、POSTROUTING、OUTPUT</p>

<p> 作用：用于网络地址转换（IP、端口） <br/>
 内核模块：iptable_nat</p></li>
<li><p>Mangle表有五个链：PREROUTING、POSTROUTING、INPUT、OUTPUT、FORWARD</p>

<p> 作用：修改数据包的服务类型、TTL、并且可以配置路由实现QOS   <br/>
 内核模块：iptable_mangle</p></li>
<li><p>Raw表有两个链：OUTPUT、PREROUTING</p>

<p> 作用：决定数据包是否被状态跟踪机制处理<br/>
 内核模块：iptable_raw</p></li>
</ol>


<h2>规则链</h2>

<ol>
<li>INPUT——进来的数据包应用此规则链中的策略。</li>
<li>OUTPUT——外出的数据包应用此规则链中的策略。</li>
<li>FORWARD——转发数据包时应用此规则链中的策略。</li>
<li>PREROUTING——对数据包作路由选择前应用此链中的规则，所有的数据包进来的时侯都先由这个链处理。</li>
<li>POSTROUTING——对数据包作路由选择后应用此链中的规则，所有的数据包出来的时侯都先由这个链处理。</li>
</ol>


<p>规则链之间的优先顺序分三种情况：</p>

<ol>
<li><p>入站数据流向</p>

<p> 从外界到达防火墙的数据包，先被PREROUTING规则链处理（是否修改数据包地址等），之后会进行路由选择（判断该数据包应该发往何处），如果数据包的目标主机是防火墙本机（比如说Internet用户访问防火墙主机中的web服务器的数据包），那么内核将其传给INPUT链进行处理（决定是否允许通过等），通过以后再交给系统上层的应用程序（比如Apache服务器）进行响应。</p></li>
<li><p>转发数据流向</p>

<p> 来自外界的数据包到达防火墙后，首先被PREROUTING规则链处理，之后会进行路由选择，如果数据包的目标地址是其它外部地址（比如局域网用户通过网关访问QQ站点的数据包），则内核将其传递给FORWARD链进行处理（是否转发或拦截），然后再交给POSTROUTING规则链（是否修改数据包的地址等）进行处理。</p></li>
<li><p>出站数据流向</p>

<p> 防火墙本机向外部地址发送的数据包（比如在防火墙主机中测试公网DNS服务器时），首先被OUTPUT规则链处理，之后进行路由选择，然后传递给POSTROUTING规则链（是否修改数据包的地址等）进行处理。</p></li>
</ol>


<h1>管理和设置iptables规则</h1>

<p>规则（rules）其实就是网络管理员预定义的条件，规则一般的定义为“如果数据包头符合这样的条件，就这样处理这个数据包”。规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包与规则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。配置防火墙的主要工作就是添加、修改和删除这些规则。</p>

<p><img src="http://txgcwm.github.io/images/2013/7/iptables/cmd.png" alt=" cmd " /></p>

<p><img src="http://txgcwm.github.io/images/2013/7/iptables/filter.png" alt=" filter " /></p>

<h2>iptables的基本语法格式</h2>

<p>iptables [-t 表名] 命令选项 ［链名］ ［条件匹配］ ［-j 目标动作或跳转］</p>

<p>说明：表名、链名用于指定iptables命令所操作的表和链，命令选项用于指定管理iptables规则的方式（比如插入、增加、删除、查看等）；条件匹配用于指定对符合什么样条件的数据包进行处理；目标动作或跳转用于指定数据包的处理方式（比如允许通过、拒绝、丢弃、跳转给其它链处理）。</p>

<p>iptables命令的管理控制选项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-A 在指定链的末尾添加（append）一条新的规则 
</span><span class='line'>-D 删除（delete）指定链中的某一条规则，可以按规则序号和内容删除 
</span><span class='line'>-I 在指定链中插入（insert）一条新的规则，默认在第一行添加 
</span><span class='line'>-R 修改、替换（replace）指定链中的某一条规则，可以按规则序号和内容替换 
</span><span class='line'>-L 列出（list）指定链中所有的规则进行查看
</span><span class='line'>-E 重命名用户定义的链，不改变链本身 
</span><span class='line'>-F 清空（flush） 
</span><span class='line'>-N 新建（new-chain）一条用户自己定义的规则链 
</span><span class='line'>-X 删除指定表中用户自定义的规则链（delete-chain） 
</span><span class='line'>-P 设置指定链的默认策略（policy）
</span><span class='line'>-Z 将所有表的所有链的字节和数据包计数器清零 
</span><span class='line'>-n 使用数字形式（numeric）显示输出结果 
</span><span class='line'>-v 查看规则表详细信息（verbose）的信息 
</span><span class='line'>-V 查看版本(version) 
</span><span class='line'>-h 获取帮助（help）</span></code></pre></td></tr></table></div></figure>


<h2>防火墙处理数据包的四种方式</h2>

<ol>
<li>ACCEPT：允许数据包通过。</li>
<li>DROP：直接丢弃数据包，不给任何回应信息</li>
<li>REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息。</li>
<li>LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则。</li>
</ol>


<h2>防火墙规则的保存与恢复</h2>

<p>iptables-save把规则保存到文件中（生成保存规则的文件名为/etc/sysconfig/iptables），再由rc.d目录下的脚本（/etc/rc.d/init.d/iptables）自动装载。使用<code>iptables-save &gt; /etc/sysconfig/iptables</code>命令来保存规则，也可以用<code>service iptables save</code>指令把规则自动保存起来。当计算机启动时，rc.d下的脚本将用命令<code>iptables-restore</code>调用这个文件，从而就自动恢复了规则。</p>

<h2>防火墙常用策略</h2>

<ul>
<li>拒绝进入防火墙的所有ICMP协议数据包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -I INPUT -p icmp -j REJECT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>允许防火墙转发除ICMP协议以外的所有数据包，使用“！”可以将条件取反。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -p ! icmp -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>拒绝转发来自192.168.1.10主机的数据，允许转发来自192.168.0.0/24网段的数据。要把拒绝的放在前面，不然就不起作用了。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -s 192.168.1.11 -j REJECT
</span><span class='line'>$ iptables -A FORWARD -s 192.168.0.0/24 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>丢弃从外网接口（eth1）进入防火墙本机的源地址为私网地址的数据包。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A INPUT -i eth1 -s 192.168.0.0/16 -j DROP
</span><span class='line'>$ iptables -A INPUT -i eth1 -s 172.16.0.0/12 -j DROP
</span><span class='line'>$ iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP</span></code></pre></td></tr></table></div></figure>


<ul>
<li>封堵网段（192.168.1.0/24），两小时后解封。这个策略可以借助crond计划任务来完成。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -I INPUT -s 10.20.30.0/24 -j DROP
</span><span class='line'>$ iptables -I FORWARD -s 10.20.30.0/24 -j DROP
</span><span class='line'>$ at now 2 hours at&gt; iptables -D INPUT 1 at&gt; iptables -D FORWARD 1
</span><span class='line'>
</span><span class='line'>[1]   Stopped     at now 2 hours</span></code></pre></td></tr></table></div></figure>


<ul>
<li>只允许管理员从202.13.0.0/16网段使用SSH远程登录防火墙主机。比较适合对设备进行远程管理时使用，比如位于分公司中的SQL服务器需要被总公司的管理员管理时。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A INPUT -p tcp --dport 22 -s 202.13.0.0/16 -j ACCEPT
</span><span class='line'>$ iptables -A INPUT -p tcp --dport 22 -j DROP</span></code></pre></td></tr></table></div></figure>


<ul>
<li>允许本机开放从TCP端口20-1024提供的应用服务。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A INPUT -p tcp --dport 20:1024 -j ACCEPT
</span><span class='line'>$ iptables -A OUTPUT -p tcp --sport 20:1024 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>允许转发来自192.168.0.0/24局域网段的DNS解析请求数据包。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -s 192.168.0.0/24 -p udp --dport 53 -j ACCEPT
</span><span class='line'>$ iptables -A FORWARD -d 192.168.0.0/24 -p udp --sport 53 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>禁止其他主机ping防火墙主机，但是允许从防火墙上ping其他主机</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -I INPUT -p icmp --icmp-type Echo-Request -j DROP
</span><span class='line'>$ iptables -I INPUT -p icmp --icmp-type Echo-Reply -j ACCEPT
</span><span class='line'>$ iptables -I INPUT -p icmp --icmp-type destination-Unreachable -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>禁止转发来自MAC地址为00：0C：29：27：55：3F的主机的数据包。iptables中使用“-m 模块关键字”的形式调用显示匹配。这里用“-m mac &mdash;mac-source”来表示数据包的源MAC地址。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -m mac --mac-source 00:0c:29:27:55:3F -j DROP</span></code></pre></td></tr></table></div></figure>


<ul>
<li>允许防火墙本机对外开放TCP端口20、21、25、110以及被动模式FTP端口1250-1280，这里用“-m multiport &mdash;dport”来指定目的端口及范围。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A INPUT -p tcp -m multiport --dport 20,21,25,110,1250:1280 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>禁止转发源IP地址为192.168.1.20-192.168.1.99的TCP数据包。此处用“-m iprange &mdash;src-range”指定IP范围。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -p tcp -m iprange --src-range 192.168.1.20-192.168.1.99 -j DROP</span></code></pre></td></tr></table></div></figure>


<ul>
<li>禁止转发与正常TCP连接无关的非&mdash;syn请求数据包。“-m state”表示数据包的连接状态，“NEW”表示与任何连接无关。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -m state --state NEW -p tcp ! --syn -j DROP</span></code></pre></td></tr></table></div></figure>


<ul>
<li>拒绝访问防火墙的新数据包，但允许响应连接或与已有连接相关的数据包。“ESTABLISHED”表示已经响应请求或者已经建立连接的数据包，“RELATED”表示与已建立的连接有相关性的，比如FTP数据连接等。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A INPUT -p tcp -m state --state NEW -j DROP
</span><span class='line'>$ iptables -A INPUT -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>只开放本机的web服务（80）、FTP(20、21、20450-20480)，放行外部主机发住服务器其它端口的应答数据包，将其他入站数据包均予以丢弃处理。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -I INPUT -p tcp -m multiport --dport 20,21,80 -j ACCEPT
</span><span class='line'>$ iptables -I INPUT -p tcp --dport 20450:20480 -j ACCEPT
</span><span class='line'>$ iptables -I INPUT -p tcp -m state --state ESTABLISHED -j ACCEPT
</span><span class='line'>$ iptables -P INPUT DROP</span></code></pre></td></tr></table></div></figure>


<h1>参考文章</h1>

<ul>
<li><a href="http://netfilter.org/">netfilter</a></li>
<li><a href="http://man.chinaunix.net/network/iptables-tutorial-cn-1.1.19.html">Iptables 指南 1.1.19</a>　</li>
<li><a href="http://blog.csdn.net/thmono/archive/2010/04/08/5462043.aspx">iptable 笔记</a></li>
<li><a href="http://netsecurity.51cto.com/art/200512/14457.htm">网络安全频道</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_40ba724c0100jz12.html">iptables_2</a></li>
<li><a href="http://qiliuping.blog.163.com/blog/static/1023829320105245337799/">netfilter/iptables全攻略</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[astyle格式化代码]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/24/astylege-shi-hua-dai-ma/"/>
    <updated>2013-07-24T18:36:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/24/astylege-shi-hua-dai-ma</id>
    <content type="html"><![CDATA[<p>astyle是一个开源工具，它可以方便的将代码格式化成自己想要的样式而不必人工修改。可以在终端下输入指令<code>sudo apt-get install astyle</code>安装，也可以到 <a href="http://astyle.sourceforge.net/">这里</a> 下载源码后自己编译安装。</p>

<p>下面介绍一下astyle的简单使用。例如有以下的源码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{int i;printf("Just a test!\n");for(i=0;i&lt;10;++i)printf("%d\n",i);}return 0;}</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>然后在终端下输入以下指令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ astyle test1.c</span></code></pre></td></tr></table></div></figure>


<p>效果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>    int i;
</span><span class='line'>    printf("Just a test!\n");
</span><span class='line'>    for(i=0; i&lt;10; ++i) {
</span><span class='line'>        printf("%d\n",i);
</span><span class='line'>    }
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>当然也可以加上一些选项，例如“astyle &mdash;style=bsd test1.c”，“ astyle &mdash;style=gnu test1.c”等等。</p>

<p>在vim中的命令模式下，可以使用下面的某一种方式来格式化代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%!astyle (simple case - astyle default mode is C/C++)</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%!astyle --mode=c --style=ansi -s2 (ansi C++ style, use two spaces per indent level)</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1,40!astyle --mode=c --style=ansi (ansi C++ style, filter only lines 1-40)</span></code></pre></td></tr></table></div></figure>


<p>在格式化完代码后，会生成一个后缀为orig的文件，格式化完成之后将它们删除。为方便使用，可以把它写成一个脚本，代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/bash
</span><span class='line'>
</span><span class='line'>for f in $(find . -name '*.c' -or -name '*.cpp' -or -name '*.h' -type f)
</span><span class='line'>do
</span><span class='line'>    astyle $f
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'># after formate the code,we need to rm '*.orig' files 
</span><span class='line'>for f in $(find . -name '*.orig' -type f)
</span><span class='line'>do
</span><span class='line'>    rm $f
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to resolve "error opening terminal Linux"]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/24/how-to-resolve-error-opening-terminal-linux/"/>
    <updated>2013-07-24T18:33:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/24/how-to-resolve-error-opening-terminal-linux</id>
    <content type="html"><![CDATA[<p>Linux环境下，编译嵌入式系统时会用到<code>make menuconfig</code>或<code>make config</code>命令，这些命令通常会使用ncurses库，如果ncurses库没有安装设置正确，可能出现如下的错误信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>error opening terminal Linux
</span><span class='line'>error opening terminal xterm
</span><span class='line'>error opening terminal vt100
</span><span class='line'>error opening terminal vt102
</span><span class='line'>error opening terminal unknown
</span><span class='line'>error opening terminal cgywin
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>可以按照以下两步解决问题：</p>

<ol>
<li>首先要确定ncurses库是否已经正确安装。在Debian或Ubuntu上，可以用<code>dpkg -l | grep ncurses</code>查看ncurses库是否已安装。</li>
<li>如果ncurses已经安装了，需要查看TERM和TERMINFO两个环境变量是否已经设置正确。如果没有设置正确，需要设置为正确的值。</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $TERM
</span><span class='line'>$ echo $TERMINFO</span></code></pre></td></tr></table></div></figure>


<p>关于TERMINFO, 应设置为terminfo的路径，比如/usr/share/terminfo或者/lib/terminfo。查看terminfo的存储位置用以下指令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ whereis terminfo
</span><span class='line'>terminfo: /etc/terminfo /lib/terminfo /usr/share/terminfo /usr/share/man/man5/terminfo.5.gz</span></code></pre></td></tr></table></div></figure>


<p>查看terminfo目录下是否保存了终端信息文件：其中通常分为a, b, c, d&hellip;z这些字母目录，每个目录中包含了以该字母开头的term信息。比如vt100放在&#8221;v&#8221;目录中。我们需要的term必须在对应的目录中存在term信息。确定这些信息后，就可以设置TERM和TERMINFO信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export TERM=vt100
</span><span class='line'>$ export TERMINFO=/usr/share/terminfo</span></code></pre></td></tr></table></div></figure>


<p>上面的设置必须保证/usr/share/terminfo中存在term信息，且/usr/share/terminfo/v/vt100是存在的。关于TERM的设置，有可能需要设置成Linux，vt100-putty等不同的TERM。Linux通常用于Linux控制台，vt100-putty顾名思义是使用putty远程登录的vt100终端。</p>

<p>以下是在Ubuntu12.10环境下，解决了此问题后TERM和TERMINFO两个环境变量的值。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $TERM
</span><span class='line'>xterm
</span><span class='line'>$ echo $TERMINFO
</span><span class='line'>/lib/terminfo/</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下安装SublimeText2及其插件]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/23/ubuntuxia-an-zhuang-sublimetext2ji-qi-cha-jian/"/>
    <updated>2013-07-23T22:33:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/23/ubuntuxia-an-zhuang-sublimetext2ji-qi-cha-jian</id>
    <content type="html"><![CDATA[<p>Sublime Text 2是一个轻量、简洁、高效、跨平台的编辑器，方便的配色以及兼容vim快捷键等各种优点博得了很多前端开发人员的喜爱。Sublime Text 2基本上是共享软件，免费版和收费版基本无区别，只是偶尔会弹框让你去购买，这个基本不影响使用。</p>

<h1>软件安装</h1>

<p>Ubuntu下安装Sublime Text 2有两种方式：指令安装和直接下载安装。</p>

<h2>指令安装</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:webupd8team/sublime-text-2
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install sublime-text-2</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>直接下载安装</h2>

<p>从 <a href="http://www.sublimetext.com/2">这里</a>下载所需要的版本，然后解压文件到安装目录。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo tar -jxvf Sublime\ Text\ 2.0.1.tar.bz2 -C /usr/local/</span></code></pre></td></tr></table></div></figure>


<h1>在applications菜单中创建快捷方式</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo gedit /usr/share/applications/sublimetext.desktop 
</span><span class='line'>
</span><span class='line'>[Desktop Entry]
</span><span class='line'>Encoding=UTF-8
</span><span class='line'>Name=Sublime Text
</span><span class='line'>Comment=Sublime Text
</span><span class='line'>Exec=/usr/local/SublimeText/sublime_text
</span><span class='line'>Icon=/usr/local/SublimeText/Icon/48x48/sublime_text.png
</span><span class='line'>Terminal=false
</span><span class='line'>StartupNotify=true
</span><span class='line'>Type=Application
</span><span class='line'>Categories=Application;Development;</span></code></pre></td></tr></table></div></figure>


<h1>安装插件</h1>

<p>安装Sublime text 2插件也有两种方法：直接安装和使用Package Control组件安装。</p>

<h2>直接安装</h2>

<p>可以直接下载安装包解压缩到Packages目录（菜单->preferences->packages）。</p>

<h2>使用Package Control组件安装</h2>

<p>也可以先安装package control组件，然后直接在线安装：</p>

<ul>
<li>按Ctrl + `调出console ，其中`是键盘左上角那个符号。</li>
<li>粘贴以下代码到底部命令行并回车。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重启Sublime Text 2。</li>
<li>如果在Perferences->package settings中看到package control这一项，则安装成功。 如果这种方法不能安装成功，可以到 <a href="http://wbond.net/sublime_packages/package_control/installation">这里</a> 下载文件手动安装。</li>
</ul>


<p>用Package Control安装插件的方法：a、按下<code>Ctrl+Shift+P</code>调出命令面板；b、输入<code>install</code>调出Install Package选项并回车，然后在列表中选中要安装的插件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加中文标签功能]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/21/octopresstian-jia-zhong-wen-biao-qian-gong-neng/"/>
    <updated>2013-07-21T11:02:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/21/octopresstian-jia-zhong-wen-biao-qian-gong-neng</id>
    <content type="html"><![CDATA[<p>Octopress有自带的分类，详情请见 <a href="http://octopress.org/docs/plugins/category-generator/">官方文档</a> 。<code>_config.yml</code>中配置项如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>category_dir: blog/categories
</span><span class='line'>category_title_prefix: "Category: "</span></code></pre></td></tr></table></div></figure>


<p>然后添加类似<code>categories: [Ruby&amp;Rails]</code>或<code>categories: [Ruby&amp;Rails，C/C++]</code>的分类标签配置到每个<code>_posts/*.markdown</code>文件头中，示例如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "Octopress添加中文标签功能"
</span><span class='line'>date: 2013-07-21 11:02
</span><span class='line'>comments: true
</span><span class='line'>categories: [Ruby&Rails,Octopress]
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h1>添加分类侧边栏并支持中文</h1>

<p>尽管Octopress有自带的分类，但它并不支持中文，如果你在文章中定义了中文分类，那么点击的时候会链接到404页面。事实上，这个分类功能是通过plugins/category_generator.rb来实现，所以只要对该文件进行适当的修改和作一些其它的配置就可以提供中文分类的支持。</p>

<ul>
<li>category_generator.rb的修改我直接使用 <a href="https://github.com/denjones/denjones.github.com/blob/source/plugins/category_generator.rb">这个</a> 文件作了替换，然后作一些细微的修改。</li>
</ul>


<p>SPRabbit(超科学兔耳中队)的 <a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">修改方法</a> 是重新定义分类标签在文章中的格式，例如用<code>中文分类标签名{英文别名}</code>这样的格式来定义标签。于是在文章中显示的是中文分类，但实际链接到英文别名上。这种方法虽然定义标签麻烦些，但可定制性强。</p>

<p>由于书写很麻烦，所以很不喜欢以上重新定义标签的方式，在 <a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">这里</a> 找到了另外一种更改方式。它同样是修改category_generator.rb文件来达到目的，利用了stringex包的to_url函数将中文分类标签的链接名和category_dir下的目录名都转换成相应的拼音，这样无论在本地还是GitHub上都没有问题。事实上，Octopress系统在利用rake new_[post|page]命令创建含有中文名的文章时也采用了这样的技巧。</p>

<p>找到<code>def write_category_indexes</code>中定义category目录的部分：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.write_category_index(File.join(dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase), category)</span></code></pre></td></tr></table></div></figure>


<p>将其修改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.write_category_index(File.join(dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase), category)</span></code></pre></td></tr></table></div></figure>


<p>再找到<code>def category_links(categories)</code>中定义中文分类网页标签的部分：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"&lt;a class='category' href='http://txgcwm.github.io/#{dir}/#{item.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase}/'&gt;#{item}&lt;/a&gt;"</span></code></pre></td></tr></table></div></figure>


<p>将其修改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"&lt;a class='category' href='http://txgcwm.github.io/#{dir}/#{item.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase}/'&gt;#{item}&lt;/a&gt;"</span></code></pre></td></tr></table></div></figure>


<p>注意，上面两处的修改就是在相应的地方加上to_url函数进行地址的转换。如果不想折腾的话，你也可以直接到 <a href="https://github.com/txgcwm/txgcwm.github.com/blob/source/plugins/category_generator.rb">这里</a> 下载我更改后的category_generator.rb插件。</p>

<ul>
<li>在plugins目录中创建category_list_tag.rb文件，文件内容如下：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'stringex'
</span><span class='line'>
</span><span class='line'>module Jekyll
</span><span class='line'>  class CategoryListTag &lt; Liquid::Tag
</span><span class='line'>    def render(context)
</span><span class='line'>      html = ""
</span><span class='line'>      categories = context.registers[:site].categories.keys
</span><span class='line'>    category_dir = context.registers[:site].config['category_dir']
</span><span class='line'>      categories.sort.each do |category|
</span><span class='line'>        posts_in_category = context.registers[:site].categories[category].size    
</span><span class='line'>        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/u, '-').gsub(/-{2,}/u, '-').to_url.downcase)
</span><span class='line'>        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://txgcwm.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>      end
</span><span class='line'>      html
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</span></code></pre></td></tr></table></div></figure>


<p>在实际使用（rake generate/rake preview）的时候，若blog整体采用了非ascii码的编码格式（比如utf-8）就会出现类似这样的错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Liquid error: incompatible encoding regexp match (ascii-8bit regexp with utf-8 string)</span></code></pre></td></tr></table></div></figure>


<p>其实是由于插件文件plugins/category_list_tag.rb本身是ascii编码所致:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chardet category_list_tag.rb
</span><span class='line'>category_list_tag.rb: ascii (confidence: 1.00)</span></code></pre></td></tr></table></div></figure>


<p>category_list_tag.rb中很多地方用到了ruby的正则表达式，而ruby的正则表达式在匹配的时候，默认是按照“代码源文件”的编码格式(在这里是ascii)进行匹配的，而如果blog是utf-8编码的话就会出现上述错误。有两种解决办法：</p>

<ol>
<li>将category_list_tag.rb转成utf-8格式。</li>
<li>更改category_list_tag.rb中所有的正则表达式声明，加上<code>u</code>选项（<code>u</code>的意思就是以utf-8编码格式来进行匹配）。例如，若原正则表达式是<code>/regexp/</code>, 则改成<code>/regexp/u</code>。</li>
</ol>


<p>在我实际处理问题的时候采用了第二种方法，category_list_tag.rb文件中的更改网上大多采用以下的方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase)</span></code></pre></td></tr></table></div></figure>


<p>更改成如下形式（只是简单增加了<code>u</code>选项）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>category_url = File.join(category_dir, category.gsub(/_|\P{Word}/u, '-').gsub(/-{2,}/u, '-').to_url.downcase)</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>添加source/_includes/custom/asides/category_list.html文件，内容可到 <a href="https://github.com/txgcwm/txgcwm.github.com/blob/source/source/_includes/custom/asides/category_list.html">这里</a> 查看。</p></li>
<li><p>修改_config.yml文件，在default_asides项中添加custom/asides/category_list.html，值之间以逗号隔开。</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [asides/recent_posts.html, custom/asides/category_list.html]</span></code></pre></td></tr></table></div></figure>


<p><code>_posts/*.markdown</code>文件头中添加categories标签示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "使用libevent编写Linux服务"
</span><span class='line'>date: 2013-07-18 19:01
</span><span class='line'>comments: true
</span><span class='line'>categories: [C/C++, 开源库, Unix/Linux]
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>到此为止，Octopress中添加分类侧边栏并使其支持中文的修改设置已经完毕。</p>

<h1>参考文章</h1>

<ul>
<li><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">Octopress博客设置</a></li>
<li><a href="http://ikeepu.com/bar/10393365">Octopress博客分类添加中文支持</a></li>
<li><a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">Octopress易筋经，中文分类标签</a></li>
<li><a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">关于在64位 Windows 7 中部署中文化的Octopress</a></li>
<li><a href="http://pfmiles.github.io/blog/liquid-error-about-regexp-match-when-using-octopress-tagcloud/">Liquid Error About Regexp Match When Using Octopress-tagcloud</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将Emacs配置成一个C/C++的IDE编程环境]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/20/jiang-emacspei-zhi-cheng-%5B%3F%5D-ge-c-slash-c-plus-plus-de-idebian-cheng-huan-jing/"/>
    <updated>2013-07-20T14:47:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/20/jiang-emacspei-zhi-cheng-[?]-ge-c-slash-c-plus-plus-de-idebian-cheng-huan-jing</id>
    <content type="html"><![CDATA[<p>在Linux环境下编程，首先要选择开发工具，大部分程序员都是使用VIM和EMACS这两大神器。虽说它们只是编辑器，但由于其超强的可定制性，已成为广大linux工作者的首选。使用<code>sudo apt-get install emacs</code>来安装Emaces。</p>

<h1>Emacs的基本操作和组合键</h1>

<h2>模式键定义</h2>

<p>四个模式键：C&mdash;-Ctrl；M&mdash;-Alt；s&mdash;-Super(Win)；S&mdash;-Shift</p>

<p>比如：</p>

<p>C-x：表示按下ctrl键，然后按下x键。</p>

<p>C-x c C-c：表示按下ctrl，然后按下x键，松开后再按下c键。</p>

<p>C-x k：表示按下ctrl，同时按下x和k键。</p>

<!--more-->


<h2>基本组合键</h2>

<p>C-x C-c：退出Emacs。</p>

<p>C-x C-s：保存当前buffer。</p>

<p>C-x C-f：打开和新建文件。</p>

<p>C-n：光标移到下一行。</p>

<p>C-p：光标移到上一行。</p>

<p>C-k：删除一行。</p>

<p>M-x：执行命令。</p>

<h1>启动时的大小和屏幕中的位置</h1>

<p>关于修改Emacs启动大小和屏幕中的位置有两种方法：1、修该~/.Xdefault文件，然后运行<code>xrdb ~/.Xdefault</code>；2、在~/.emacs文件中进行修改。按照第二种方法作如下设置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;设置启动的大小和屏幕中的位置
</span><span class='line'>(setq default-frame-alist
</span><span class='line'>  '((height . 35)(width . 100)(menubar-lines . 20)(tool-bar-lines . 0)))</span></code></pre></td></tr></table></div></figure>


<p>以上语句表示Emacs在启动后其高度为35，宽度为100，显示在屏幕的x=20，y=0处。</p>

<h1>Emacs的基本常规设定</h1>

<p>按照一般的习惯，.emacs文件中一般不会放太多的设置信息，一般放一些emacs的搜索路径信息。这里将emacs的配置文件（即lisp脚本）都放在~/.emacs.d/emacs的文件夹中。因此首先添加一个emacs的搜索路径：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;;; 添加Emacs搜索路径
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/ecb-2.40")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/codepilot")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/emacs-eclim")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/icicles")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/gnuserv")</span></code></pre></td></tr></table></div></figure>


<p>然后加载我们对emacs的设置脚本，在.emacs中添加如下语句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;;;读取脚本
</span><span class='line'>(load "base.el")
</span><span class='line'>(load "cyexpand.el")
</span><span class='line'>(load "cykbd.el")
</span><span class='line'>(load "addon.el")
</span><span class='line'>
</span><span class='line'>;;编程的配置
</span><span class='line'>(load "cycode.el")</span></code></pre></td></tr></table></div></figure>


<p>对emacs的基本设置，即base.el文件（在~/.emacs.d/emacs中），base.el文件中的部分内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;显示时间
</span><span class='line'>;;(display-time)
</span><span class='line'>(display-time-mode 1);;启用时间显示设置，在minibuffer上面的那个杠上
</span><span class='line'>(setq display-time-24hr-format t);;时间使用24小时制
</span><span class='line'>(setq display-time-day-and-date t);;时间显示包括日期和具体时间
</span><span class='line'>;;(setq display-time-use-mail-icon t);;时间栏旁边启用邮件设置
</span><span class='line'>;;(setq display-time-interval 10);;时间的变化频率，单位多少来着？
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>;;显示列号
</span><span class='line'>(setq column-number-mode t)
</span><span class='line'>;;没列左边显示行号,按f3显示/隐藏行号
</span><span class='line'>(require 'setnu)
</span><span class='line'>(setnu-mode t)
</span><span class='line'>;;(global-set-key[f3] (quote setnu-mode))
</span><span class='line'>
</span><span class='line'>;;显示标题栏 %f 缓冲区完整路径 %p 页面百分数 %l 行号
</span><span class='line'>(setq frame-title-format "%f")
</span><span class='line'>
</span><span class='line'>;;=======================================================================
</span><span class='line'>;;缓冲区
</span><span class='line'>;;=====================================================================
</span><span class='line'>;;设定行距
</span><span class='line'>(setq default-line-spaceing 4)
</span><span class='line'>;;页宽
</span><span class='line'>(setq default-fill-column 60)
</span><span class='line'>;;缺省模式 text-mode
</span><span class='line'>;;(setq default-major-mode 'text-mode)
</span><span class='line'>;;设置删除记录
</span><span class='line'>(setq kill-ring-max 200)
</span><span class='line'>;;以空行结束
</span><span class='line'>;;(setq require-final-newline t)
</span><span class='line'>;;开启语法高亮。
</span><span class='line'>(global-font-lock-mode 1)
</span><span class='line'>;;高亮显示区域选择
</span><span class='line'>(transient-mark-mode t)
</span><span class='line'>;;页面平滑滚动,scroll-margin 3 靠近屏幕边沿3行开始滚动，正好可以看到上下文
</span><span class='line'>;;(setq scroll-margin 3 scroll-consrvatively 10000)
</span><span class='line'>;;高亮显示成对括号
</span><span class='line'>(show-paren-mode t)
</span><span class='line'>(setq show-paren-style 'parentheses)
</span><span class='line'>;;鼠标指针避光标
</span><span class='line'>(mouse-avoidance-mode 'animate)
</span><span class='line'>;;粘贴于光标处,而不是鼠标指针处
</span><span class='line'>(setq mouse-yank-at-point t)</span></code></pre></td></tr></table></div></figure>


<p>设置默认工作目录，即启动emacs后所在的目录，在base.el中加上下面一句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;设置默认工作目录
</span><span class='line'>(setq default-directory "/srv") </span></code></pre></td></tr></table></div></figure>


<h1>C/C++的配置</h1>

<p>C/C++的配置主要是cycode.el文件。开发时很重要的一步就是调试，所以首先就是增加图形化调试界面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;==============================================================
</span><span class='line'>;;gdb-UI配置
</span><span class='line'>;;==============================================================
</span><span class='line'>(setq gdb-many-windows t)
</span><span class='line'>(load-library "multi-gud.el")
</span><span class='line'>(load-library "multi-gdb-ui.el")</span></code></pre></td></tr></table></div></figure>


<p>上面加载了两个lisp的脚本文件，这两个文件是直接在网上下载的图形化调试文件。</p>

<p>为了能高效的浏览和编辑代码，需要安装cedet插件。从官网下载cedet后，在~/.emacs.d/emacs目录中解压，根据解压出来文件夹中的INSTALL文件说明的方法安装cedet即可。有一点需要注意就是安装完成后不能删除安装后的文件，也就是需要保留解压后的文件夹。安装完成后，用下面的语句将我们需要的一些东西包含进来。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;==================================================
</span><span class='line'>;;cedet插件设置
</span><span class='line'>;;==================================================
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/cedet-1.1/speedbar")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/cedet-1.1/eieio")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/cedet-1.1/semantic")</span></code></pre></td></tr></table></div></figure>


<p>然后就可进行有关cedet的设置，这里仅以一个代码折叠和展开为例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;代码折叠
</span><span class='line'>;;(require 'semantic-tag-folding nil 'noerror)
</span><span class='line'>(global-semantic-tag-folding-mode 1)
</span><span class='line'>;;折叠和打开整个buffer的所有代码
</span><span class='line'>(define-key semantic-tag-folding-mode-map (kbd "C--") 'semantic-tag-folding-fold-all)
</span><span class='line'>(define-key semantic-tag-folding-mode-map (kbd "C-=") 'semantic-tag-folding-show-all)
</span><span class='line'>;;折叠和打开单个buffer的所有代码
</span><span class='line'>(define-key semantic-tag-folding-mode-map (kbd "C-_") 'semantic-tag-folding-fold-block)
</span><span class='line'>(define-key semantic-tag-folding-mode-map (kbd "C-+") 'semantic-tag-folding-show-block)</span></code></pre></td></tr></table></div></figure>


<p>为了使用更方便（即对上面cedet插件的一个补充），需要再安装一个ecb插件。下载ecb后解压到~/.emacs.d/emacs目录中即可，然后加上下面两句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;==============================================================
</span><span class='line'>;;ecb配置
</span><span class='line'>;;==============================================================
</span><span class='line'>;;(require 'ecb)
</span><span class='line'>;;开启ecb用,M-x:ecb-activate
</span><span class='line'>(require 'ecb-autoloads)
</span><span class='line'>;;自动启动ecb并且不显示每日提示
</span><span class='line'>;;(require 'ecb)
</span><span class='line'>;;(setq ecb-auto-activate t)
</span><span class='line'>(setq ecb-tip-of-the-day nil)</span></code></pre></td></tr></table></div></figure>


<p>为了实现自动补全功能，需要安装auto-complete和yasnippet这两个插件。auto-complete下载后放到~/.emacs.d/emacs目录中解压，然后进入解压后的目录输入make命令即可；yasnippet下载后解压到~/.emacs.d/emacs目录中即可。下面是关于这两个插件的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;==========================================================
</span><span class='line'>;;YASnippet的配置
</span><span class='line'>;;==========================================================
</span><span class='line'>(require 'yasnippet)    ;;not yasnippet-bundle
</span><span class='line'>(yas/initialize)
</span><span class='line'>(yas/load-directory "~/.emacs.d/emacs/yasnippet-0.6.1c/snippets")</span></code></pre></td></tr></table></div></figure>


<p>装完插件后，作一些综合的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;配置Semantic搜索范围
</span><span class='line'>(setq semanticdb-project-roots
</span><span class='line'>    (list
</span><span class='line'>     (expand-file-name "/")))
</span><span class='line'>;;自定义补全命令，如果单词在中间就补全，否则就tab
</span><span class='line'>(defun my-indent-or-complete()
</span><span class='line'>  (interactive)
</span><span class='line'>  (if (looking-at "\\&gt;")
</span><span class='line'>    (hippie-expand nil)
</span><span class='line'>    (indent-for-tab-command))
</span><span class='line'>  )
</span><span class='line'>;;补全快捷键，ctrl+tab用senator补全，不显示列表
</span><span class='line'>;;alt+/补全，显示列表让选择
</span><span class='line'>(global-set-key [(control tab)] 'my-indent-or-complete)
</span><span class='line'>(define-key c-mode-base-map [(meta ?/)] 'semantic-ia-complete-symbol-menu)
</span><span class='line'>(autoload 'senator-try-expand-semantic "senator")
</span><span class='line'>(setq hippie-expand-try-functions-list
</span><span class='line'>    '(
</span><span class='line'>      senator-try-expand-semantic
</span><span class='line'>      try-expand-dabbrev
</span><span class='line'>      try-expand-dabbrev-visible
</span><span class='line'>      try-expand-dabbrev-all-buffers
</span><span class='line'>      try-expand-dabbrev-from-kill
</span><span class='line'>      try-expand-list
</span><span class='line'>      try-expand-list-all-buffers
</span><span class='line'>      try-expand-line
</span><span class='line'>      try-expand-line-all-buffers
</span><span class='line'>      try-complete-file-name-partially
</span><span class='line'>      try-complete-file-name
</span><span class='line'>      try-expand-whole-kill
</span><span class='line'>      )
</span><span class='line'>    )</span></code></pre></td></tr></table></div></figure>


<h1>键绑定</h1>

<p>为了使用emacs更方便，需要一些键绑定（即自己定义一些组合键），这也是emacs配置中必不可少的一步。自定义组合键放在cykbd.el文件中。根据一般的习惯用f1来表示帮助，即man命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(global-set-key [f1] 'manual-entry)
</span><span class='line'>(global-set-key [C-f1] 'info )</span></code></pre></td></tr></table></div></figure>


<p>f3-f5的一些绑定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;f3为查找字符串,alt+f3关闭当前缓冲区
</span><span class='line'>(global-set-key [f3] 'grep-find)
</span><span class='line'>(global-set-key [M-f3] 'kill-this-buffer)
</span><span class='line'>
</span><span class='line'>;;.emacs中设一个speedbar的快捷键
</span><span class='line'>(global-set-key [(f4)] 'speedbar-get-focus)
</span><span class='line'>;;ctrl-f4,激活,ecb
</span><span class='line'>(global-set-key [C-f4] 'ecb-activate)
</span><span class='line'>
</span><span class='line'>;;F5显示/隐藏工具栏 方便调试
</span><span class='line'>(global-set-key [f5] 'tool-bar-mode)
</span><span class='line'>;;ctrl-F5显示/隐藏菜单栏 ;; M-x menu-bar-open
</span><span class='line'>(global-set-key [C-f5] 'menu-bar-mode)</span></code></pre></td></tr></table></div></figure>


<p>f6为gdb调试，f7调用make来对原文件进行编译：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(global-set-key [f6] 'gdb)
</span><span class='line'>
</span><span class='line'>;;  C-f7, 设置编译命令; f7, 保存所有文件然后编译当前窗口文件
</span><span class='line'>(defun du-onekey-compile ()
</span><span class='line'>  "Save buffers and start compile"
</span><span class='line'>  (interactive)
</span><span class='line'>  (save-some-buffers t)
</span><span class='line'>  (switch-to-buffer-other-window "*compilation*")
</span><span class='line'>  (compile compile-command))
</span><span class='line'>  
</span><span class='line'>(setq-default compile-command "make")    
</span><span class='line'>(global-set-key [C-f7] 'compile)
</span><span class='line'> (global-set-key [f7] 'du-onekey-compile)</span></code></pre></td></tr></table></div></figure>


<p>将f8为对buffer的一些常用操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;目的是开一个shell的小buffer，用于更方便地测试程序(也就是运行程序了)，我经常会用到。
</span><span class='line'>;;f8就是另开一个buffer然后打开shell，C-f8则是在当前的buffer打开shell,shift+f8清空eshell
</span><span class='line'>(defun open-eshell-other-buffer ()
</span><span class='line'>  "Open eshell in other buffer"
</span><span class='line'>  (interactive)
</span><span class='line'>  (split-window-vertically)
</span><span class='line'>  (eshell))
</span><span class='line'>(defun my-eshell-clear-buffer ()
</span><span class='line'>  "Eshell clear buffer."
</span><span class='line'>  (interactive)
</span><span class='line'>  (let ((eshell-buffer-maximum-lines 0))
</span><span class='line'>    (eshell-truncate-buffer)))
</span><span class='line'>(global-set-key [(f8)] 'open-eshell-other-buffer)
</span><span class='line'>(global-set-key [C-f8] 'eshell)
</span><span class='line'>(global-set-key [S-f8] 'my-eshell-clear-buffer)</span></code></pre></td></tr></table></div></figure>


<p>f9-f11的一些绑定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;设置[C-f9]为调用dired命令
</span><span class='line'>(global-set-key [C-f9] 'dired)
</span><span class='line'>(global-set-key [f9] 'other-window);f9在其他窗口之间旋转
</span><span class='line'>
</span><span class='line'>;;设置F10为撤销
</span><span class='line'>(global-set-key [C-f10] 'undo)
</span><span class='line'>
</span><span class='line'>;;设置F11快捷键指定Emacs 的日历系统
</span><span class='line'>(global-set-key [C-f11] 'calendar) </span></code></pre></td></tr></table></div></figure>


<p>用f12查看函数定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;设置C-F12 快速察看日程安排
</span><span class='line'>;;F12调到函数定义
</span><span class='line'>(global-set-key [f12] 'semantic-ia-fast-jump)
</span><span class='line'>(global-set-key [C-f12] 'list-bookmarks)
</span><span class='line'>;;shift-f12跳回去
</span><span class='line'>(global-set-key [S-f12]
</span><span class='line'>  (lambda ()
</span><span class='line'>  (interactive)
</span><span class='line'>  (if (ring-empty-p (oref semantic-mru-bookmark-ring ring))
</span><span class='line'>  (error "Semantic Bookmark ring is currently empty"))
</span><span class='line'>  (let* ((ring (oref semantic-mru-bookmark-ring ring))
</span><span class='line'>  (alist (semantic-mrub-ring-to-assoc-list ring))
</span><span class='line'>  (first (cdr (car alist))))
</span><span class='line'>  (if (semantic-equivalent-tag-p (oref first tag)
</span><span class='line'>  (semantic-current-tag))
</span><span class='line'>  (setq frist (cdr (car (cdr alist)))))
</span><span class='line'>  (semantic-mrub-switch-tags first))))</span></code></pre></td></tr></table></div></figure>


<p>对ecb的键绑定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;==================ecb的配置=================================
</span><span class='line'>;;为了ecb窗口的切换
</span><span class='line'>(global-set-key [M-left] 'windmove-left)
</span><span class='line'>(global-set-key [M-right] 'windmove-right)
</span><span class='line'>(global-set-key [M-up] 'windmove-up)
</span><span class='line'>(global-set-key [M-down] 'windmove-down)
</span><span class='line'>;;隐藏和显示ecb窗口
</span><span class='line'>(global-set-key [f11] 'ecb-hide-ecb-windows)
</span><span class='line'>(global-set-key [S-f11] 'ecb-show-ecb-windows)</span></code></pre></td></tr></table></div></figure>


<p>对窗口的一些键绑定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;关闭当前窗口,alt+4
</span><span class='line'>(global-set-key (kbd "M-4") 'delete-window)
</span><span class='line'>;;(global-set-key (kbd "M-4") 'kill-this-buffer)
</span><span class='line'>;;关闭其他窗口,alt+1
</span><span class='line'>(global-set-key (kbd "M-1") 'delete-other-windows)
</span><span class='line'>;;水平分割窗口,alt+2
</span><span class='line'>(global-set-key (kbd "M-2") 'split-window-vertically)
</span><span class='line'>;;垂直分割窗口,alt+3
</span><span class='line'>(global-set-key (kbd "M-3") 'split-window-horizontally)
</span><span class='line'>;;切换到其他窗口，alt+0
</span><span class='line'>(global-set-key (kbd "M-0") 'other-window)
</span><span class='line'>;;显示缓冲区完整名称
</span><span class='line'>(global-set-key (kbd "M-5") 'display-buffer-name)</span></code></pre></td></tr></table></div></figure>


<h1>Emacs的扩展配置</h1>

<p>为了使emacs更符合个人的习惯，增加了一个cyexpand.el配置文件，其部分设置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; 编码设置
</span><span class='line'>(require 'coding-settings)
</span><span class='line'>
</span><span class='line'>;; `mode-line'显示格式
</span><span class='line'>(require 'mode-line-settings)
</span><span class='line'>
</span><span class='line'>;; 各种语言开发方面的设置,这个设置牵涉到太多配置....
</span><span class='line'>(require 'dev-settings)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>;; 显示行号
</span><span class='line'>(require 'linum-settings)
</span><span class='line'>
</span><span class='line'>;; color theme Emacs主题,很多face文件
</span><span class='line'>(require 'color-theme-settings)
</span><span class='line'>
</span><span class='line'>(require 'ahei-face)
</span><span class='line'>(require 'color-theme-ahei)
</span><span class='line'>(require 'face-settings)
</span><span class='line'>
</span><span class='line'>;; 高亮当前行
</span><span class='line'>(require 'hl-line-settings)
</span><span class='line'>
</span><span class='line'>;; 字体配置
</span><span class='line'>(require 'font-settings)
</span><span class='line'>;; diff
</span><span class='line'>(require 'diff-settings)
</span><span class='line'>;; Emacs的diff: ediff,有个my-fontest-win的文件很关键
</span><span class='line'>(require 'ediff-settings)
</span><span class='line'>
</span><span class='line'>;; 在buffer中方便的查找字符串: color-moccur
</span><span class='line'>(require 'moccur-settings)
</span><span class='line'>;; Emacs超强的增量搜索Isearch配置
</span><span class='line'>(require 'isearch-settings)
</span><span class='line'>
</span><span class='line'>;; 增加更丰富的高亮
</span><span class='line'>(require 'generic-x)
</span><span class='line'>
</span><span class='line'>;; spell check
</span><span class='line'>(setq-default ispell-program-name "aspell")
</span><span class='line'>
</span><span class='line'>;; Emacs中的包管理器
</span><span class='line'>(require 'package)
</span><span class='line'>(package-initialize)
</span><span class='line'>
</span><span class='line'>;; 在Emacs里面使用shell
</span><span class='line'>(require 'term-settings)
</span><span class='line'>(require 'multi-term-settings)
</span><span class='line'>
</span><span class='line'>;; 可以把光标由方块变成一个小长条
</span><span class='line'>(require 'bar-cursor)</span></code></pre></td></tr></table></div></figure>


<p>到此为止，已经将emacs打造成了开发C/C++的简易IDE。在使用过程中只需要会配置base.el、cycode.el、cykbd.el、cyexpand.el这四个文件即可，相关配置文件和插件可以到 <a href="https://github.com/txgcwm/emacs.d">这里</a> 下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uboot中TFTP解释]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/19/ubootzhong-tftpjie-shi/"/>
    <updated>2013-07-19T22:45:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/19/ubootzhong-tftpjie-shi</id>
    <content type="html"><![CDATA[<p>TFTP在Uboot中用于发送较小的文件，使用UDP协议，发送使用69端口，每次发送的最大分组为512 bytes，发送双方采用超时重传机制，数据传输模式为octet模式（二进制模式）。发送文件时使用<code>tftp MemoryAddress FileName</code>命令即可，其中MemoryAddress为放入文件的内存首地址，FileName为传送文件的文件名。</p>

<p>使用TFTP传送文件的步骤：</p>

<ol>
<li>使用时已经初始化以下变量：NetOurIP（本机IP地址，定义在Net.c文件）、NetServerIP（TFTP服务器的IP地址，定义在Net.c文件）、BootFile（需要传送文件的文件名，定于在tftp.c）、NetOurGatewayIP（本机的网关地址）、NetOurSubnetMask（本机子网掩码）。</li>
<li>调用TftpStart 函数开始文件传送。</li>
</ol>


<!--more-->


<h1>客户端状态</h1>

<p>TFTP使用一个变量TftpState来描述TFTP客户端可能的5种状态：</p>

<p><img src="http://txgcwm.github.io/images/2013/7/tftp/states.png" alt=" states " /></p>

<h1>包类型</h1>

<p>使用TFTP传送的包分为6种类型：</p>

<p><img src="http://txgcwm.github.io/images/2013/7/tftp/types.png" alt=" types " /></p>

<h1>各种包结构</h1>

<p>TFTP协议中各种包的结构：</p>

<p><img src="http://txgcwm.github.io/images/2013/7/tftp/pack_struct.png" alt=" pack_struct " /></p>

<p>Uboot中客户端发送的包的包括RRQ和ACK。RRQ（请求读的包）包的结构:</p>

<p><img src="http://txgcwm.github.io/images/2013/7/tftp/rrq.png" alt=" rrq " /></p>

<p>ACK（确认帧）结构：</p>

<p><img src="http://txgcwm.github.io/images/2013/7/tftp/ack.png" alt=" ack " /></p>

<h1>主要函数及作用</h1>

<p>Uboot中与tftp协议有关的文件有tftp.c与tftp.h文件，主要函数包括：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* 根据预先设定的地址load_addr决定将首地址为src，长度为len的block个数据块写入flash 或写入内存*/
</span><span class='line'>static __inline__ void store_block (unsigned block, uchar * src, unsigned len);
</span><span class='line'>
</span><span class='line'>/* 根据TftpState变量的不同值发送不同的 Tftp包 （使用UDP协议发送） */
</span><span class='line'>static void TftpSend (void) ;
</span><span class='line'>
</span><span class='line'>/* 处理收到的Tftp包 */
</span><span class='line'>static void TftpHandler (uchar * pkt, unsigned dest, unsigned src, unsigned len) ;
</span><span class='line'>
</span><span class='line'>/* 超时处理函数 */
</span><span class='line'>static void TftpTimeout (void);
</span><span class='line'>
</span><span class='line'>/* 初始化各个需要的数据 然后开始发送TFTP读请求 */
</span><span class='line'>void TftpStart (void);</span></code></pre></td></tr></table></div></figure>


<h1>流程</h1>

<p>TFTP总体流程：首先客户端发出读写请求，如果服务器批准此请求，则打开连接并接收第一个数据包。客户端收到数据包后发回确认，而服务器发出下一个数据包以前必须得到客户对上一个数据包的确认。如果数据包在传输过程中丢失，服务器方会在超时后重新传输最后一个未被确认的数据包。发送的数据包一般为512字节，如果一个数据包小于 512 字节，则表示这个包是最后一个包，如果发送的数据正好是 512 的整数倍，发送完后再发一个空包。</p>

<p>以下是客户端和服务器端通信的流程图：</p>

<p><img src="http://txgcwm.github.io/images/2013/7/tftp/flow.png" alt=" flow " /></p>

<p>客户端程序流程：</p>

<ol>
<li>客户端设定NetOurIP 、NetServerIP、BootFile 变量的值。</li>
<li>调用TftpStart函数完成如下6步工作：（1）若BootFile为空则使用默认文件名，否则使用BootFile为传送的文件名。（2）比较客户端和服务器的子网地址，判断两者是否在同一个子网内。（3）设定超时处理函数为TftpTimeout 。（4）设置处理接收到的TFTP包的函数为TftpHandler。（5）初始化服务器端口、本机端口、超时次数为0、初始状态为RRQ。（6）调用TftpSend函数发送TFTP读取请求。</li>
<li>TftpSend函数根据TftpState发送不同的包，同时根据包的类型和当前客户端的状态（TftpState）处理接收到的包。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下c语言获取网络接口IP地址]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/19/linuxxia-cyu-yan-huo-qu-wang-luo-jie-kou-ipdi-zhi/"/>
    <updated>2013-07-19T22:34:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/19/linuxxia-cyu-yan-huo-qu-wang-luo-jie-kou-ipdi-zhi</id>
    <content type="html"><![CDATA[<p>在Linux环境下，可以使用以下的代码获取网络的ip地址：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (gethostname(host, sizeof(host)) &lt; 0) {
</span><span class='line'>    printf("Can't get hostname\n");
</span><span class='line'>    return -1;
</span><span class='line'>}
</span><span class='line'>if ((hp = gethostbyname(host)) == NULL) {
</span><span class='line'>    printf("Can't get host address\n");
</span><span class='line'>    return -1;
</span><span class='line'>}
</span><span class='line'>memcpy((char *) &intaddr, (char *) hp-&gt;h_addr_list[0],
</span><span class='line'>        (size_t) hp-&gt;h_length);</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>在嵌入式系统中，使用goahead的时候， 以上代码是获取不到正确ip地址的，我们可以结合以下两个接口函数去获取需要的ip地址：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;sys/socket.h&gt;
</span><span class='line'>#include &lt;sys/ioctl.h&gt;
</span><span class='line'>#include &lt;arpa/inet.h&gt;
</span><span class='line'>#include &lt;netinet/in.h&gt;
</span><span class='line'>#include &lt;net/if.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>static int getIfaceName(char *iface_name, int len)
</span><span class='line'>{
</span><span class='line'>    int r = -1;
</span><span class='line'>    int flgs, ref, use, metric, mtu, win, ir;
</span><span class='line'>    unsigned long int d, g, m;    
</span><span class='line'>    char devname[20];
</span><span class='line'>    FILE *fp = NULL;
</span><span class='line'>
</span><span class='line'>    if((fp = fopen("/proc/net/route", "r")) == NULL) {
</span><span class='line'>        perror("fopen error!\n");
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (fscanf(fp, "%*[^\n]\n") &lt; 0) {
</span><span class='line'>        fclose(fp);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    while (1) {
</span><span class='line'>        r = fscanf(fp, "%19s%lx%lx%X%d%d%d%lx%d%d%d\n",
</span><span class='line'>                 devname, &d, &g, &flgs, &ref, &use,
</span><span class='line'>                 &metric, &m, &mtu, &win, &ir);
</span><span class='line'>        if (r != 11) {
</span><span class='line'>            if ((r &lt; 0) && feof(fp)) {
</span><span class='line'>                break;
</span><span class='line'>            }
</span><span class='line'>            continue;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        strncpy(iface_name, devname, len);
</span><span class='line'>        fclose(fp);
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    fclose(fp);
</span><span class='line'>
</span><span class='line'>    return -1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static int getIpAddress(char *iface_name, char *ip_addr, int len)
</span><span class='line'>{
</span><span class='line'>    int sockfd = -1;
</span><span class='line'>    struct ifreq ifr;
</span><span class='line'>    struct sockaddr_in *addr = NULL;
</span><span class='line'>
</span><span class='line'>    memset(&ifr, 0, sizeof(struct ifreq));
</span><span class='line'>    strcpy(ifr.ifr_name, iface_name);
</span><span class='line'>    addr = (struct sockaddr_in *)&ifr.ifr_addr;
</span><span class='line'>    addr-&gt;sin_family = AF_INET;
</span><span class='line'>
</span><span class='line'>    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {
</span><span class='line'>        perror("create socket error!\n");
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    if (ioctl(sockfd, SIOCGIFADDR, &ifr) == 0) {
</span><span class='line'>        strncpy(ip_addr, inet_ntoa(addr-&gt;sin_addr), len);
</span><span class='line'>        close(sockfd);
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    close(sockfd);
</span><span class='line'>
</span><span class='line'>    return -1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main(int argc, char** argv)
</span><span class='line'>{
</span><span class='line'>    struct in_addr    intaddr;
</span><span class='line'>    char iface_name[20];
</span><span class='line'>
</span><span class='line'>    if(getIfaceName(iface_name, sizeof(iface_name)) &lt; 0) {
</span><span class='line'>        printf("get interface name error!\n");
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if(getIpAddress(iface_name, (char *) &intaddr, 15) &lt; 0) {
</span><span class='line'>        printf("get interface ip address error!\n");
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    printf("address:%s\n",(char *) &intaddr);
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下编译vlc-android源代码]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/19/ubuntuxia-bian-yi-vlc-androidyuan-dai-ma/"/>
    <updated>2013-07-19T21:18:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/19/ubuntuxia-bian-yi-vlc-androidyuan-dai-ma</id>
    <content type="html"><![CDATA[<p>在编译源码前，需要先安装Android的SDK、NDK以及一些必需的软件，具体安装方法这里就不再详述了，网上可以找到很多相应的文章。安装软件可以执行以下指令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-get install  apache-ant(or ant)  autoconf automake autopoint  libtool  gawk (or nawk)
</span><span class='line'>gcc  g++  pkg-config  cmake  patch subversion git</span></code></pre></td></tr></table></div></figure>


<p>ant工具在最后编译android源码生成apk文件会用到，所以需要安装。如果手动安装了ant，需要在环境变量中配置好ant的 path，或者在编译前执行命令<code>export PATH=$PATH:/xxx/ant/bin</code>，保证可以在执行编译的命令行中执行ant命令即可。</p>

<!--more-->


<h1>环境变量配置</h1>

<p>配置ANDROID_SDK（请把path改为自己的路径）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export ANDROID_SDK=/path/to/android-sdk</span></code></pre></td></tr></table></div></figure>


<p>配置ANDROID_NDK</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export ANDROID_NDK=/path/to/android-ndk</span></code></pre></td></tr></table></div></figure>


<p>配置PATH变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export PATH=$PATH:$ANDROID_SDK/tools:$ANDROID_SDK/platform-tools</span></code></pre></td></tr></table></div></figure>


<p>配置NEON相关信息（一般编译的时候，会编译NO_NEON和支持NEON两种包出来）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export NO_NEON=1</span></code></pre></td></tr></table></div></figure>


<p>如果设备不支持NEON技术，请务必配置此项；如果机器支持NEON技术，可以不用配置此项。关于NEON的简单信息：根据维基百科英文版ARM架构中的介绍，Cortex-A8架构的设备均支持NEON技术，而在Cortex-A9架构的设备中则是可选的，更多信息请参考 <a href="http://www.arm.com/zh/products/processors/technologies/neon.php">NEON</a> 和 <a href="http://en.wikipedia.org/wiki/ARM_architecture#Advanced_SIMD_.28NEON.29">ARM architecture</a> 。</p>

<p>配置ABI</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export ANDROID_ABI=armeabi-v7a</span></code></pre></td></tr></table></div></figure>


<h1>获取源码</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://git.videolan.org/vlc-ports/android.git</span></code></pre></td></tr></table></div></figure>


<h1>编译源码</h1>

<p>下载完成后，进入android文件夹执行<code>sh compile.sh</code>，开始自动编译。如果编译过程中遇到错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>checking host system type… Invalid configuration `arm-linux-androideabi’: system 
</span><span class='line'>`androideabi’ not recognized</span></code></pre></td></tr></table></div></figure>


<p>请在重新编译之前执行以下操作：1. 到 <a href="http://git.savannah.gnu.org/gitweb/?p=config.git;a=tree">这里</a>下载最新的config.guess和config.sub文件；2. 将下载的文件拷贝到/usr/share/misc目录下；3. 重新启动编译。</p>

<p>最后提示BUILD SUCESSFUL，说明编译成功了，在android/vlc-android/bin目录下会生成一个apk文件，可以直接拿来安装。如果想自己调整界面部分，或者添加、修改其它功能，可以直接把项目导入eclipse进行开发。</p>

<h1>出错处理</h1>

<p>如果编译过程中提示缺少某一软件的错误，请根据错误提示安装对应的工具，或者在执行编译之前就把之前提到的工具全部安装好。</p>

<p>出错信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> CC     posix/plugin.lo
</span><span class='line'>../../src/posix/plugin.c: In function 'module_Load':
</span><span class='line'>../../src/posix/plugin.c:50:50: warning: unused parameter 'lazy' [-Wunused-parameter]
</span><span class='line'>  CC     posix/thread.lo
</span><span class='line'>../../src/posix/thread.c:85:5: warning: #warning Monotonic clock not available. Expect timing issues. [-Wcpp]
</span><span class='line'>../../src/posix/thread.c: In function 'vlc_cancel':
</span><span class='line'>../../src/posix/thread.c:830:5: error: implicit declaration of function 'pthread_cancel' [-Werror=implicit-function-declaration]
</span><span class='line'>../../src/posix/thread.c: In function 'vlc_savecancel':
</span><span class='line'>../../src/posix/thread.c:847:5: error: implicit declaration of function 'pthread_setcancelstate' [-Werror=implicit-function-declaration]
</span><span class='line'>../../src/posix/thread.c:847:39: error: 'PTHREAD_CANCEL_DISABLE' undeclared (first use in this function)
</span><span class='line'>../../src/posix/thread.c:847:39: note: each undeclared identifier is reported only once for each function it appears in
</span><span class='line'>../../src/posix/thread.c: In function 'vlc_restorecancel':
</span><span class='line'>../../src/posix/thread.c:867:9: error: 'PTHREAD_CANCEL_DISABLE' undeclared (first use in this function)
</span><span class='line'>../../src/posix/thread.c: In function 'vlc_testcancel':
</span><span class='line'>../../src/posix/thread.c:884:5: error: implicit declaration of function 'pthread_testcancel' [-Werror=implicit-function-declaration]
</span><span class='line'>cc1: some warnings being treated as errors
</span><span class='line'>
</span><span class='line'>make[3]: *** [posix/thread.lo] Error 1
</span><span class='line'>make[3]: Leaving directory `/srv/android/vlc/android/src'
</span><span class='line'>make[2]: *** [all] Error 2
</span><span class='line'>make[2]: Leaving directory `/srv/android/vlc/android/src'
</span><span class='line'>make[1]: *** [all-recursive] Error 1
</span><span class='line'>make[1]: Leaving directory `/srv/android/vlc/android'
</span><span class='line'>make: *** [all] Error 2</span></code></pre></td></tr></table></div></figure>


<p>解决方法：
进入下载的android vlc目录，执行以下指令。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd vlc
</span><span class='line'>$ git reset --hard origin
</span><span class='line'>$ git pull origin master
</span><span class='line'>$ git checkout -b android ${TESTED_HASH}
</span><span class='line'>$ git am ../patches/*</span></code></pre></td></tr></table></div></figure>


<p>注：在老的git版本中git checkout并没有-B的选项，所以一开始执行的时候并没有下载android版本的vlc代码，故使用<code>git checkout -b android ${TESTED_HASH}</code>。</p>

<p>出错信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BUILD FAILED
</span><span class='line'>/usr/local/android-sdk-linux/tools/ant/build.xml:517: Unable to resolve project target 'android-15'
</span><span class='line'>
</span><span class='line'>Total time: 3 seconds
</span><span class='line'>make: *** [vlc-android/bin/VLC-debug.apk] Error 1
</span><span class='line'>rm android-libs/libmedia.c android-libs/libutils.c android-libs/libstagefright.c android-libs/libbinder.c</span></code></pre></td></tr></table></div></figure>


<p>解决方法：
进入到android-sdk-linux/tools目录，执行<code>./android</code>下载Android 4.0.3（API15）的相关文件。</p>

<p>出错信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -f -L -- "http://git.xiph.org/?p=speex.git;a=snapshot;h=HEAD;sf=tgz" &gt; "../../contrib/tarballs/speex-git.tar.gz"
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   814  100   814    0     0    226      0  0:00:03  0:00:03 --:--:-- 23941
</span><span class='line'>../../contrib/src/speex/rules.mak:20: .sum-speex not implemented
</span><span class='line'>touch .sum-speex
</span><span class='line'>touch -r .sum-speex .sum-speexdsp
</span><span class='line'>rm -Rf speex-git
</span><span class='line'>mkdir -p speex-git
</span><span class='line'>zcat "../../contrib/tarballs/speex-git.tar.gz" | (cd speex-git && tar xv --strip-components=1)
</span><span class='line'>
</span><span class='line'>gzip: ../../contrib/tarballs/speex-git.tar.gz: not in gzip format
</span><span class='line'>tar: This does not look like a tar archive
</span><span class='line'>tar: Exiting with failure status due to previous errors
</span><span class='line'>make: *** [speex] Error 2</span></code></pre></td></tr></table></div></figure>


<p>解决方法：
将<code>http://git.xiph.org/?p=speex.git;a=snapshot;h=HEAD;sf=tgz</code>输入到浏览器地址栏中就会开始下载你所需要的文件，然后将相应下载的压缩文件存放于contrib/tarballs/目录下，将名字改成speex-git.tar.gz。若碰到其它的库文件有类似的错误，可采用该办法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[车速的计算]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/19/che-su-de-ji-suan/"/>
    <updated>2013-07-19T00:04:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/19/che-su-de-ji-suan</id>
    <content type="html"><![CDATA[<p>假设你坐在汽车内，你会如何计算汽车在高速路上的平均速度？说说方法，请写下闯入你大脑的第一个想法，希望不要太离谱。没有标准，百家争鸣！</p>

<h1>问题背景</h1>

<p>之前从家里到工作地的总体花费时间是知道的，但我对汽车的实际速度并没有一个概念。坐在车上有时很想知道某一地到我的目的地还需要多少时间。因不太擅长跟陌生人交流，所以自己想一些办法解决。因为高速路上会有到某地还有多少距离的提示，而且相隔几里路后又会有提示，所以采用了距离差除以时间，然后用还剩的距离除以速度，最后得到我想知道的时间。在不堵车的情况下，这种方法是比较有效的，误差不是很大。</p>

<h1>网友的回复</h1>

<p>djsxut：1、看仪表盘在一定时间的行驶路程，除以行驶时间得到平均速度；2、不怕麻烦的话，多次取样，再计算平均速度；3、视力足够好，数数高速中间的小树苗，基本上两颗小数栽种的距离是一定的。</p>

<p>hellioncu：每次看到指示牌标记的公里数，并记下时间，公里数差/时间差——就是速度。</p>

<p>群雄逐鹿中原：装个GPS导航软件。汽车上或手机上都行。</p>

<p>folklore：hire a beauty girl, and ask her: what is our average speed now？</p>

<p>cokeboL：距离/时间，这还能有啥。</p>

<p>cxytz01：超速行驶，交警叔叔会告诉你。</p>

<!--more-->


<p>shan_ghost：空速管……（被pia飞……</p>

<p>一介村夫：超车或被超车的时候问问边上的车。</p>

<p>windoze：上高速到下高速，距离可以查地图，再计个时，一除就好了吧….</p>

<p>cjaizss：直接问司机，现在开到几码了。</p>

<p>fireyu：主车轴上或者变速箱轴上放个频率传感器。采集频率信号向上送。轮子的周长是固定的。根据频率次数算每分钟轮子转1圈的次数可以得到每分钟的瞬时速度。</p>

<p>纵观所有的回答，我补充一个方法：通过查看汽油的使用量，（油量之差/时间）/每升油所能够行驶的距离。</p>

<h1>对回答的评论</h1>

<p>对于网友的回答，我假设大家都是“看到问题后，涌入大脑里的第一个想法”。</p>

<p>djsxut、hellioncu、cokeboL、windoze：都是从工程的问题出发解决问题。djsxut的第一种方法简单有效。hellioncu的方法比djsxut的第二种方法精准些。cokeboL虽然没有说出具体的一种计算方法，但我也认为他也明白的表述了他的思想。cokeboL后面一句“这还能有啥”，我不清楚为何会有这个提问（你说“原来是脑筋急转弯啊”，但我并不认为它是个脑筋急转弯，它并不需要你转，只是看看你的第一个反应是什么）。windoze的方法比较费时了。</p>

<p>群雄逐鹿中原：很好的使用了现有的科技。</p>

<p>folklore、cjaizss：合理的利用了现有环境。folklore非要个beautygirl，不知是否是调侃，^_^。</p>

<p>cxytz01、村长：比较冒险，嘿嘿。</p>

<p>shan_ghost、fireyu：思维比较活跃，扩散的技术人才啊，&hellip;o(∩∩)o&hellip;</p>

<h1>引出的问题</h1>

<p>这些问题是基于以上问题的答案提出的：当看到这个问题时，你是从什么样的角度出发的？从看一个问题的角度，也能反应出一个人的性格及处理事物的方式，你又是怎样的性格或处事方式呢？对于有某种性格和某种方式处理问题的人，你认为他做什么比较适合呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用libevent编写Linux服务]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/18/shi-yong-libeventbian-xie-linuxfu-wu/"/>
    <updated>2013-07-18T19:01:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/18/shi-yong-libeventbian-xie-linuxfu-wu</id>
    <content type="html"><![CDATA[<p>libevent是一个事件触发的网络库，适用于windows、linux、bsd等多种平台，内部使用select、epoll、kqueue等系统调用管理事件机制，著名分布式缓存软件memcached也使用到了该库。</p>

<h1>初始化事件</h1>

<p>首先完成对libenvent的事件初始化和事件驱动模型的选择。在使用多线程的情况下，一般我们需获取所返回的事件根基。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>main_base = event_init();</span></code></pre></td></tr></table></div></figure>


<p>event_init函数返回的是一个event_base对象，该对象包括了事件处理过程中的一些全局变量，其结构为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct event_base {
</span><span class='line'>    const struct eventop *evsel;
</span><span class='line'>    void *evbase;
</span><span class='line'>    int event_count;        /* counts number of total events */
</span><span class='line'>    int event_count_active; /* counts number of active events */
</span><span class='line'>    int event_gotterm;      /* Set to terminate loop */
</span><span class='line'>    int event_break;        /* Set to terminate loop immediately */
</span><span class='line'>    /* active event management */
</span><span class='line'>    struct event_list **activequeues;
</span><span class='line'>    int nactivequeues;
</span><span class='line'>    /* signal handling info */
</span><span class='line'>    struct evsignal_info sig;
</span><span class='line'>    struct event_list eventqueue;
</span><span class='line'>    struct timeval event_tv;
</span><span class='line'>    struct min_heap timeheap;
</span><span class='line'>    struct timeval tv_cache;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h1>添加事件</h1>

<p>事件初始化完毕后，可以使用event_set设置事件，然后使用event_add将其加入。首先完成socket的监听，然后将其加入到事件队列中（这里对所有的异常都不做考虑）。</p>

<p>（1）socket监听</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct sockaddr_in listen_addr;
</span><span class='line'>
</span><span class='line'>int port = 10000; //socket监听端口
</span><span class='line'>int listen_fd = socket(AF_INET, SOCK_STREAM, 0);
</span><span class='line'>
</span><span class='line'>memset(&listen_addr, 0, sizeof(listen_addr));
</span><span class='line'>
</span><span class='line'>listen_addr.sin_family = AF_INET;
</span><span class='line'>listen_addr.sin_addr.s_addr = INADDR_ANY;
</span><span class='line'>listen_addr.sin_port = htons(port)
</span><span class='line'>
</span><span class='line'>reuseaddr_on = 1;
</span><span class='line'>
</span><span class='line'>/*支持端口复用*/
</span><span class='line'>setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &reuseaddr_on, sizeof(reuseaddr_on));
</span><span class='line'>
</span><span class='line'>bind(listen_fd, (struct sockaddr *) &listen_addr, sizeof(listen_addr));
</span><span class='line'>listen(listen_fd, 1024);
</span><span class='line'>
</span><span class='line'>/*将描述符设置为非阻塞*/
</span><span class='line'>int flags = fcntl(listen_fd,F_GETFL);
</span><span class='line'>flags |= O_NONBLOCK;
</span><span class='line'>fcntl(listen_fd, F_SETFL, flags);</span></code></pre></td></tr></table></div></figure>


<p>（2）事件设置</p>

<p>socket服务建立后，就可以进行事件设置。使用event_set来设置事件对象，其传入参数包括事件根基(event_base对象)，描述符，事件类型，事件发生时的回调函数，回调函数传入参数。其中事件类型包括EV_READ、EV_WRITE、EV_PERSIST，EV_PERSIST和前两者结合使用，表示该事件为持续事件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct event ev;
</span><span class='line'>
</span><span class='line'>event_set(&ev, listen_fd, EV_READ | EV_PERSIST, accept_handle, (void *)&ev);</span></code></pre></td></tr></table></div></figure>


<p>（3）事件添加与删除</p>

<p>事件设置好后，就可以将其加入事件队列。event_add用来将事件加入，它接受两个参数：要添加的事件和时间的超时值。如果需要将事件删除，可以使用event_del来完成。event_del函数会取消所指定的事件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>event_add(&ev, NULL)</span></code></pre></td></tr></table></div></figure>


<h1>进入事件循环</h1>

<p>libevent提供了多种方式来进入事件循环，常用的是event_dispatch和event_base_loop，前者最后实际是使用当前事件根基来调用event_base_loop。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>event_base_loop(main_base, 0);</span></code></pre></td></tr></table></div></figure>


<h1>处理连接</h1>

<p>已经完成了事件的设置、事件的添加并进入到了事件循环，但是当事件发生时又如何处理呢？ 当连接建立时回调函数accept_handle会自动的得到调用。对于缓冲区的读写在非阻塞式网络编程中是一个难以处理的问题，幸运的是libevent提供了bufferevent和evbuf来替我们完成该项工作。这里我们采用bufferevent来处理。</p>

<p>（1）生成bufferevent对象</p>

<p>使用bufferevent_new对象来生成bufferevent对象，并分别指定读、写、连接错误时的处理函数和函数传入参数。</p>

<p>（2）设置读取量</p>

<p>bufferevent的读事件激活以后，即使用户没有读取完bufferevent缓冲区中的数据, bufferevent读事件也不会再次被激活。因为bufferevent的读事件是由其所监控的描述符的读事件激活的，只有描述符可读，读事件才会被激活。可通过设置wm_read.high来控制bufferevent从描述符缓冲区中读取的数据量。</p>

<p>（3）将事件加入事件队列</p>

<p>和前面一样，在事件设置好后，需将事件加入到事件队列中， 不过bufferevent的有自己专门的加入函数bufferevent_base_set和激活函数bufferevent_enable。bufferevent接收两个参数事件根基和事件对象，前者用来指定事件将加入到哪个事件根基中，后者说明需将那个bufferevnet事件加入。在bufferevent初始化完毕后，可以使用bufferevent_enable和bufferevent_disable反复的激活与禁止事件，其接收参数为事件对象和事件标志。其中标志参数为EV_READ和EV_WRITE。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void accept_handle(const int sfd, const short event, void *arg)
</span><span class='line'>{
</span><span class='line'>    struct sockaddr_in addr;
</span><span class='line'>
</span><span class='line'>    socklen_t addrlen = sizeof(addr);
</span><span class='line'>
</span><span class='line'>    int fd = accept(sfd, (struct sockaddr *) &addr, &addrlen); //处理连接
</span><span class='line'>
</span><span class='line'>    buf_ev = bufferevent_new(fd,   buffered_on_read, NULL, NULL, fd)
</span><span class='line'>    buf_ev-&gt;wm_read.high = 4096
</span><span class='line'>    bufferevent_base_set(main_base, buf_ev);
</span><span class='line'>    bufferevent_enable(buf_ev, EV_READ);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>读取缓冲区</h1>

<p>当缓冲区读就绪时会自动激活前面注册的缓冲区读函数，我们可以使用bufferevent_read函数来读取缓冲区，bufferevent_read函数参数分别为:所需读取的事件缓冲区，读入数据的存放地，希望读取的字节数。函数返回实际读取的字节数。注意：即时缓冲区未读完，事件也不会再次被激活（除非再次有数据）。因此此处需反复读取直到全部读取完毕。</p>

<h1>写回客户端</h1>

<p>bufferevent系列函数不但支持读取缓冲区，而且支持写缓冲区（即将结果返回给客户端）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void buffered_on_read(struct bufferevent *bev, void * arg){
</span><span class='line'>    char buffer[4096]
</span><span class='line'>
</span><span class='line'>    ret = bufferevent_read(bev, &buffer, 4096);
</span><span class='line'>    bufferevent_write(bef, (void *)&buffer, 4096);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>异步事件处理示例</h1>

<p>利用libevent编写服务端程序，主要有4部分。
（1）创建主通知链base</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>base = event_base_new();</span></code></pre></td></tr></table></div></figure>


<p>（2）创建要监听的事件，并将其加入到主通知链中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>listener_event = event_new(base, listener, EV_READ|EV_PERSIST, do_accept, (void*)base);
</span><span class='line'>event_add(listener_event, NULL);
</span><span class='line'>event_free( listener_event ); //释放由event_new申请的结构体</span></code></pre></td></tr></table></div></figure>


<p>
（3）主循环</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>event_base_dispatch(base);</span></code></pre></td></tr></table></div></figure>


<p>（4）释放</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>event_base_free(base);</span></code></pre></td></tr></table></div></figure>


<p>以下程序中do_read, do_write是异步的，为了解决了异步之间的问题，程序使用了state这个结构体变量将do_read和do_write联系起来。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;netinet/in.h&gt;
</span><span class='line'>#include &lt;sys/socket.h&gt;
</span><span class='line'>#include &lt;event2/event.h&gt;
</span><span class='line'>#include &lt;assert.h&gt;
</span><span class='line'>#include &lt;unistd.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;errno.h&gt;
</span><span class='line'>#include &lt;fcntl.h&gt;
</span><span class='line'>
</span><span class='line'>#define MAX_LINE 16384
</span><span class='line'>#define PORT 9999
</span><span class='line'>
</span><span class='line'>void do_read(evutil_socket_t fd, short events, void *arg);
</span><span class='line'>void do_write(evutil_socket_t fd, short events, void *arg);
</span><span class='line'>
</span><span class='line'>struct fd_state {
</span><span class='line'>    char buffer[MAX_LINE];
</span><span class='line'>    size_t buffer_used;
</span><span class='line'>
</span><span class='line'>    size_t n_written;
</span><span class='line'>    size_t write_upto;
</span><span class='line'>
</span><span class='line'>    struct event *read_event;
</span><span class='line'>    struct event *write_event;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>struct fd_state *alloc_fd_state(struct event_base *base, evutil_socket_t fd)
</span><span class='line'>{
</span><span class='line'>    struct fd_state *state =
</span><span class='line'>     (struct fd_state *)malloc(sizeof(struct fd_state));
</span><span class='line'>    if (!state) {
</span><span class='line'>        return NULL;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    state-&gt;read_event =
</span><span class='line'>     event_new(base, fd, EV_READ | EV_PERSIST, do_read, state);
</span><span class='line'>    if (!state-&gt;read_event) {
</span><span class='line'>        free(state);
</span><span class='line'>        return NULL;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    state-&gt;write_event =
</span><span class='line'>     event_new(base, fd, EV_WRITE | EV_PERSIST, do_write, state);
</span><span class='line'>    if (!state-&gt;write_event) {
</span><span class='line'>        event_free(state-&gt;read_event);
</span><span class='line'>        free(state);
</span><span class='line'>        return NULL;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    assert(state-&gt;write_event);
</span><span class='line'>
</span><span class='line'>    return state;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void free_fd_state(struct fd_state *state)
</span><span class='line'>{
</span><span class='line'>    event_free(state-&gt;read_event);
</span><span class='line'>    event_free(state-&gt;write_event);
</span><span class='line'>    free(state);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void do_read(evutil_socket_t fd, short events, void *arg)
</span><span class='line'>{
</span><span class='line'>    struct fd_state *state = arg;
</span><span class='line'>    char buf[1024];
</span><span class='line'>    int i;
</span><span class='line'>    ssize_t result;
</span><span class='line'>    while (1) {
</span><span class='line'>        // assert(state-&gt;write_event);
</span><span class='line'>        result = recv(fd, buf, sizeof(buf), 0);
</span><span class='line'>        if (result &lt;= 0)
</span><span class='line'>            break;
</span><span class='line'>        printf("[%s][%d]buf=[%s]len=[%d]\n", __FILE__, __LINE__, buf,
</span><span class='line'>         result);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    memcpy(state-&gt;buffer, "reply", sizeof("reply"));
</span><span class='line'>    assert(state-&gt;write_event);
</span><span class='line'>    event_add(state-&gt;write_event, NULL);
</span><span class='line'>    state-&gt;write_upto = state-&gt;buffer_used;
</span><span class='line'>
</span><span class='line'>    if (result == 0) {
</span><span class='line'>        free_fd_state(state);
</span><span class='line'>    } else if (result &lt; 0) {
</span><span class='line'>        if (errno == EAGAIN)    // XXXX use evutil macro
</span><span class='line'>            return;
</span><span class='line'>        perror("recv");
</span><span class='line'>        free_fd_state(state);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void do_write(evutil_socket_t fd, short events, void *arg)
</span><span class='line'>{
</span><span class='line'>    struct fd_state *state = arg;
</span><span class='line'>
</span><span class='line'>    //while (state-&gt;n_written &lt; state-&gt;write_upto)
</span><span class='line'>    {
</span><span class='line'>        //ssize_t result = send(fd, state-&gt;buffer + state-&gt;n_written,
</span><span class='line'>        //state-&gt;write_upto - state-&gt;n_written, 0);
</span><span class='line'>        ssize_t result =
</span><span class='line'>         send(fd, state-&gt;buffer, strlen(state-&gt;buffer), 0);
</span><span class='line'>        if (result &lt; 0) {
</span><span class='line'>            if (errno == EAGAIN)    // XXX use evutil macro
</span><span class='line'>                return;
</span><span class='line'>            free_fd_state(state);
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>        assert(result != 0);
</span><span class='line'>        state-&gt;n_written += result;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //if (state-&gt;n_written == state-&gt;buffer_used)
</span><span class='line'>    {
</span><span class='line'>        state-&gt;n_written = state-&gt;write_upto = state-&gt;buffer_used = 1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    event_del(state-&gt;write_event);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void do_accept(evutil_socket_t listener, short event, void *arg)
</span><span class='line'>{
</span><span class='line'>    struct event_base *base = arg;
</span><span class='line'>    struct sockaddr_storage ss;
</span><span class='line'>    socklen_t slen = sizeof(ss);
</span><span class='line'>
</span><span class='line'>    int fd = accept(listener, (struct sockaddr *)&ss, &slen);
</span><span class='line'>    if (fd &lt; 0) {        // XXXX eagain??
</span><span class='line'>        perror("accept");
</span><span class='line'>    } else if (fd &gt; FD_SETSIZE) {
</span><span class='line'>        close(fd);    // XXX replace all closes with EVUTIL_CLOSESOCKET */
</span><span class='line'>    } else {
</span><span class='line'>        struct fd_state *state;
</span><span class='line'>        evutil_make_socket_nonblocking(fd);
</span><span class='line'>        state = alloc_fd_state(base, fd);
</span><span class='line'>
</span><span class='line'>        assert(state);    /*XXX err */
</span><span class='line'>        assert(state-&gt;write_event);
</span><span class='line'>        event_add(state-&gt;read_event, NULL);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>    evutil_socket_t listener;
</span><span class='line'>    struct sockaddr_in sin;
</span><span class='line'>    struct event_base *base;
</span><span class='line'>    struct event *listener_event;
</span><span class='line'>
</span><span class='line'>    setvbuf(stdout, NULL, _IONBF, 0);
</span><span class='line'>    
</span><span class='line'>    base = event_base_new();
</span><span class='line'>    if (!base)
</span><span class='line'>        return -1;        /*XXXerr */
</span><span class='line'>
</span><span class='line'>    sin.sin_family = AF_INET;
</span><span class='line'>    sin.sin_addr.s_addr = 0;
</span><span class='line'>    sin.sin_port = htons(PORT);
</span><span class='line'>
</span><span class='line'>    listener = socket(AF_INET, SOCK_STREAM, 0);
</span><span class='line'>    evutil_make_socket_nonblocking(listener);
</span><span class='line'>
</span><span class='line'>#ifndef WIN32
</span><span class='line'>    {
</span><span class='line'>        int one = 1;
</span><span class='line'>        setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &one,
</span><span class='line'>             sizeof(one));
</span><span class='line'>    }
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>    if (bind(listener, (struct sockaddr *)&sin, sizeof(sin)) &lt; 0) {
</span><span class='line'>        perror("bind");
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (listen(listener, 16) &lt; 0) {
</span><span class='line'>        perror("listen");
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    listener_event =
</span><span class='line'>     event_new(base, listener, EV_READ | EV_PERSIST, do_accept,
</span><span class='line'>         (void *)base);
</span><span class='line'>    /*XXX check it */
</span><span class='line'>    event_add(listener_event, NULL);
</span><span class='line'>    event_base_dispatch(base);
</span><span class='line'>    event_base_free(base);
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[链栈]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/15/lian-zhan/"/>
    <updated>2013-07-15T21:49:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/15/lian-zhan</id>
    <content type="html"><![CDATA[<p>栈是限制在表的一端进行插入和删除运算的线性表。通常称插入、删除的这一端为栈顶，另一端称为栈底；当表中没有元素时称为空栈；栈为后进先出的线性表，简称为LIFO表；栈的修改是按后进先出的原则进行；每次删除的总是当前栈中最新的元素（即最后插入的元素），而最先插入的被放在栈的底部，要到最后才能删除。</p>

<h1>链栈结点</h1>

<p>出栈与入栈是栈的最主要操作，当无法预见栈所需大小时，往往需要采用链栈的方式。在链栈中，不需要像单链表一样需要头结点。链栈的结构如下图所示：</p>

<p><img src="http://txgcwm.github.io/images/2013/7/lian-zhan/stacknode.png" alt=" stacknode " /></p>

<p>可将其结构定义为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef char SElemType
</span><span class='line'>
</span><span class='line'>typedef struct StackNode
</span><span class='line'>{
</span><span class='line'>    SElemType data;//根据实际需要定义数据类型
</span><span class='line'>    struct StackNode *next;
</span><span class='line'>}StackNode,*LinkStackPtr;
</span><span class='line'>
</span><span class='line'>typedef struct LinkStack
</span><span class='line'>{
</span><span class='line'>    LinkStackPtr top;//指向栈链顶部
</span><span class='line'>    int count;//用以判断栈是否为空，可初始化为0
</span><span class='line'>}LinkStack;</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h1>进栈</h1>

<p>能够进栈的前提是已成功建立栈空间。进栈函数所需的参数主要是指向栈顶的指针和入栈的内容，因此可定义为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int Push(LinkStack *pS, SElemType e);</span></code></pre></td></tr></table></div></figure>


<p>进栈操作的过程如下图所示:</p>

<p><img src="http://txgcwm.github.io/images/2013/7/lian-zhan/stackpush.png" alt=" stackpush " /></p>

<p>Step1：开辟内存，将需要入栈的元素压入栈；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LinkStackPtr s = (LinkStackPtr)malloc(sizeof(StackNode));
</span><span class='line'>s-&gt;data = e;</span></code></pre></td></tr></table></div></figure>


<p>Step2：更改指针；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s-&gt;next = pS-&gt;top; //新结点的next指向原来栈顶
</span><span class='line'>pS-&gt;top = s; //链栈新的top指针指向新建立的结点</span></code></pre></td></tr></table></div></figure>


<p>Step3：更改栈状态（累计入栈元素个数）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pS-&gt;count++;</span></code></pre></td></tr></table></div></figure>


<h1>出栈</h1>

<p>出栈之前需要判断当前栈的状态，如果栈元素个数为零，则是空栈，无法进行出栈操作。出栈操作函数同样需要两个参数，一是指向链栈的指针，二是弹出的栈元素，因此定义为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int Pop(LinkStackPtr *pS, SElemType *e); //之所以是*e，是为了在函数结束后可以取得该弹出元素</span></code></pre></td></tr></table></div></figure>


<p>出栈操作过程如下图所示：</p>

<p><img src="http://txgcwm.github.io/images/2013/7/lian-zhan/stackpop.png" alt=" stackpop " /></p>

<p>Step1：获取弹出元素；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*e = pS-&gt;top-&gt;data;</span></code></pre></td></tr></table></div></figure>


<p>Step2：top指针指向栈顶；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p = pS-&gt;top ;
</span><span class='line'>pS-&gt;top = p-&gt;next;//LinkStackPtr p;</span></code></pre></td></tr></table></div></figure>


<p>Step3：释放结点；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>free(p);</span></code></pre></td></tr></table></div></figure>


<p>Step4：更改栈状态。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pS-&gt;count--;</span></code></pre></td></tr></table></div></figure>


<h1>测试程序</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>typedef char SElemType;
</span><span class='line'>
</span><span class='line'>typedef struct StackNode {
</span><span class='line'>    SElemType data;
</span><span class='line'>    struct StackNode *next;
</span><span class='line'>} StackNode, *LinkStackPtr;
</span><span class='line'>
</span><span class='line'>typedef struct LinkStack {
</span><span class='line'>    LinkStackPtr top;
</span><span class='line'>    int count;
</span><span class='line'>} LinkStack;
</span><span class='line'>
</span><span class='line'>void InitialStack(LinkStack * L)
</span><span class='line'>{
</span><span class='line'>    L-&gt;top = NULL;
</span><span class='line'>    L-&gt;count = 0;
</span><span class='line'>    
</span><span class='line'>    return;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int StackEmpty(LinkStack * pS)
</span><span class='line'>{
</span><span class='line'>    return (!pS-&gt;count);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int Push(LinkStack * pS, SElemType e)
</span><span class='line'>{
</span><span class='line'>    LinkStackPtr s = (LinkStackPtr) malloc(sizeof(StackNode));
</span><span class='line'>    if(s == NULL) {
</span><span class='line'>        printf("no enough memory!\n");
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    s-&gt;data = e;
</span><span class='line'>    s-&gt;next = pS-&gt;top;
</span><span class='line'>    pS-&gt;top = s;
</span><span class='line'>    pS-&gt;count++;
</span><span class='line'>    
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int Pop(LinkStack * pS, SElemType * e)
</span><span class='line'>{
</span><span class='line'>    LinkStackPtr p = NULL;
</span><span class='line'>    
</span><span class='line'>    if (StackEmpty(pS)) {
</span><span class='line'>        printf("stack is empty！\n");
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    *e = pS-&gt;top-&gt;data;
</span><span class='line'>    p = pS-&gt;top;
</span><span class='line'>    pS-&gt;top = p-&gt;next;
</span><span class='line'>    free(p);
</span><span class='line'>    pS-&gt;count--;
</span><span class='line'>    
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void PrintStackLink(LinkStack * pS)
</span><span class='line'>{
</span><span class='line'>    int i;
</span><span class='line'>    LinkStackPtr L = NULL;
</span><span class='line'>    
</span><span class='line'>    L = pS-&gt;top;
</span><span class='line'>    if (StackEmpty(pS)) {
</span><span class='line'>        printf("stack is empty！\n");
</span><span class='line'>        return;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    for (i = 0; i &lt; (pS-&gt;count); i++) {
</span><span class='line'>        printf("%c\n", L-&gt;data);
</span><span class='line'>        L = L-&gt;next;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>    char getch;
</span><span class='line'>    char outch;
</span><span class='line'>    LinkStack myStack;
</span><span class='line'>    
</span><span class='line'>    InitialStack(&myStack);
</span><span class='line'>    
</span><span class='line'>    printf("请输入压入栈的数据（char型），输入#结束:\n");
</span><span class='line'>    scanf("%c", &getch);
</span><span class='line'>    while (getch != '#') {
</span><span class='line'>        Push(&myStack, getch);
</span><span class='line'>        scanf("%c", &getch);
</span><span class='line'>    }
</span><span class='line'>    printf("栈链内容为：\n");
</span><span class='line'>    PrintStackLink(&myStack);
</span><span class='line'>
</span><span class='line'>    while (!StackEmpty(&myStack)) {
</span><span class='line'>        Pop(&myStack, &outch);
</span><span class='line'>        printf("弹出内容为：%c\n", outch);
</span><span class='line'>    }
</span><span class='line'>    PrintStackLink(&myStack);
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pkg-config的使用]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/14/pkg-configde-shi-yong/"/>
    <updated>2013-07-14T11:22:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/14/pkg-configde-shi-yong</id>
    <content type="html"><![CDATA[<p>pkg-config是向用户和应用程序提供相应库的路径、版本号等信息的程序。比如使用pkg-config查看gcc的CFLAGS参数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pkg-config --libs --cflags opencv
</span><span class='line'>-I/usr/include/opencv  -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_ml 
</span><span class='line'>-lopencv_video -lopencv_features2d -lopencv_calib3d -lopencv_objdetect 
</span><span class='line'>-lopencv_contrib -lopencv_legacy -lopencv_flann</span></code></pre></td></tr></table></div></figure>


<p>以上就是我们用gcc编译连接时CFLAGS的参数。因此当我们需要编译连接某个库时，只需要把上面那行加入gcc的参数里面即可。这也是configure的作用，它会检查你需要的包，产生相应的信息。</p>

<p>pkg-config从包名为xxx.pc这个文件中查找相应的信息。缺省情况下，首先在prefix/lib/pkgconfig/（在linux上其路径为/usr/lib/pkconfig/）中查找相关包（比如opencv）对应的文件（opencv.pc）。若是没有找到，它也会到PKG_CONFIG_PATH这个环境变量所指定的路径下去找。若是还没有找到，它就会报错，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Package opencv was not found in the pkg-config search path.
</span><span class='line'>Perhaps you should add the directory containing `opencv.pc'
</span><span class='line'>to the PKG_CONFIG_PATH environment variable
</span><span class='line'>No package 'opencv' found</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>设置环境变量PKG_CONFIG_PATH方法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PKG_CONFIG_PATH=/cv/lib:$PKG_CONFIG_PATH</span></code></pre></td></tr></table></div></figure>


<p>查看opencv.pc文件的内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat opencv.pc 
</span><span class='line'># Package Information for pkg-config
</span><span class='line'>
</span><span class='line'>prefix=/usr
</span><span class='line'>exec_prefix=${prefix}
</span><span class='line'>libdir=${exec_prefix}/lib
</span><span class='line'>includedir_old=${prefix}/include/opencv
</span><span class='line'>includedir_new=${prefix}/include
</span><span class='line'>
</span><span class='line'>Name: OpenCV
</span><span class='line'>Description: Open Source Computer Vision Library
</span><span class='line'>Version: 2.3.1
</span><span class='line'>Libs: -L${libdir} -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_ml 
</span><span class='line'>-lopencv_video -lopencv_features2d -lopencv_calib3d -lopencv_objdetect -lopencv_contrib 
</span><span class='line'>-lopencv_legacy -lopencv_flann
</span><span class='line'>Cflags: -I${includedir_old} -I${includedir_new}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下删除文本文件中的所有空行]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/13/linuxxia-shan-chu-wen-ben-wen-jian-zhong-de-suo-you-kong-xing/"/>
    <updated>2013-07-13T22:20:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/13/linuxxia-shan-chu-wen-ben-wen-jian-zhong-de-suo-you-kong-xing</id>
    <content type="html"><![CDATA[<p>很多情况下文本文件中会出现许多空行，这些都是我们不想要的。大多时候我们会选择手工删除，这样显然太麻烦，况且当文件行数很多的时候，其麻烦程度是不能忍受的。所以需要一个工具，可以达到删除所有空行的目的，并且最好还能一次处理多个文件。以下是Linux下的一个脚本文件，支持一次处理多个文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>TEMP_F="del.lines.$$"
</span><span class='line'>
</span><span class='line'>usage()
</span><span class='line'>{
</span><span class='line'>  echo "Usage: $0 filename [filename...]"
</span><span class='line'>  exit -1
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>if [ $# -eq 0 ] ; then
</span><span class='line'>  usage
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>while [ $# -gt 0 ]
</span><span class='line'>do
</span><span class='line'>  FILE_NAME=$1
</span><span class='line'>
</span><span class='line'>  case $1 in 
</span><span class='line'>      --help)
</span><span class='line'>          usage
</span><span class='line'>      ;;
</span><span class='line'>
</span><span class='line'>      *)
</span><span class='line'>          if [ -f $1 ] ; then
</span><span class='line'>              sed '/^$/d' $FILE_NAME &gt; $TEMP_F
</span><span class='line'>              mv $TEMP_F $FILE_NAME
</span><span class='line'>          else
</span><span class='line'>              echo "$0 can not find this file: $1"
</span><span class='line'>          fi      
</span><span class='line'>      ;;
</span><span class='line'>  esac
</span><span class='line'>
</span><span class='line'>  shift
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Base64编码解码算法]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/11/base64bian-ma-jie-ma-suan-fa/"/>
    <updated>2013-07-11T23:09:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/11/base64bian-ma-jie-ma-suan-fa</id>
    <content type="html"><![CDATA[<p>Base64使用ascii码子集的64个字符，即大小写的26个英文字母，0～9，＋，/。编码基于3个字符，每个字符用8位二进制表示，一共24位，再分为4四组，每组6位表示一个Base64值（例如0就是A，27就是b）。Base64值如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
</span><span class='line'>'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
</span><span class='line'>'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
</span><span class='line'>'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
</span><span class='line'>'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
</span><span class='line'>'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
</span><span class='line'>'w', 'x', 'y', 'z', '0', '1', '2', '3',
</span><span class='line'>'4', '5', '6', '7', '8', '9', '+', '/',</span></code></pre></td></tr></table></div></figure>


<p>如果被加密的字符串每3个一组，还剩1或2个字符，使用特殊字符&#8221;=&ldquo;补齐。例如编码只有2个字符“me”，m的ascii是109，e的是101，用二进制表示分别是01101101、01100101，连接起来就是0110110101100101，再按6位分为一组：011011、010110、010100（不足6位补0），ascii分别是27、22、 20，即Base64值为bWU，不足4字用＝补齐，因此bWU＝就me的Base64值。</p>

<!--more-->


<p>在<a href="https://github.com/dwjackson/basenc">这里</a>可以找到一个c语言的base32/base64开源库。以下是goahead中base64编码解码的实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static char_t    map64[] = {
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
</span><span class='line'>    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
</span><span class='line'>    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
</span><span class='line'>    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>static char_t    alphabet64[] = {
</span><span class='line'>    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
</span><span class='line'>    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
</span><span class='line'>    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
</span><span class='line'>    'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
</span><span class='line'>    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
</span><span class='line'>    'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
</span><span class='line'>    'w', 'x', 'y', 'z', '0', '1', '2', '3',
</span><span class='line'>    '4', '5', '6', '7', '8', '9', '+', '/',
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>/*********************************** Code *************************************/
</span><span class='line'>/*
</span><span class='line'> *    Decode a buffer from "string" and into "outbuf"
</span><span class='line'> */
</span><span class='line'>int websDecode64(char_t *outbuf, char_t *string, int outlen)
</span><span class='line'>{
</span><span class='line'>    unsigned long    shiftbuf;
</span><span class='line'>    char_t            *cp, *op;
</span><span class='line'>    int                c, i, j, shift;
</span><span class='line'>
</span><span class='line'>    op = outbuf;
</span><span class='line'>    *op = '\0';
</span><span class='line'>    cp = string;
</span><span class='line'>    while (*cp && *cp != '=') {
</span><span class='line'>        /*
</span><span class='line'>         *        Map 4 (6bit) input bytes and store in a single long (shiftbuf)
</span><span class='line'>         */
</span><span class='line'>        shiftbuf = 0;
</span><span class='line'>        shift = 18;
</span><span class='line'>        for (i = 0; i &lt; 4 && *cp && *cp != '='; i++, cp++) {
</span><span class='line'>            c = map64[*cp & 0xff];
</span><span class='line'>            if (c == -1) {
</span><span class='line'>                error(E_L, E_LOG, T("Bad string: %s at %c index %d"), string,
</span><span class='line'>                      c, i);
</span><span class='line'>                return -1;
</span><span class='line'>            }
</span><span class='line'>            shiftbuf = shiftbuf | (c &lt;&lt; shift);
</span><span class='line'>            shift -= 6;
</span><span class='line'>        }
</span><span class='line'>        /*
</span><span class='line'>         *        Interpret as 3 normal 8 bit bytes (fill in reverse order).
</span><span class='line'>         *        Check for potential buffer overflow before filling.
</span><span class='line'>         */
</span><span class='line'>        --i;
</span><span class='line'>        if ((op + i) &gt;= &outbuf[outlen]) {
</span><span class='line'>            gstrcpy(outbuf, T("String too big"));
</span><span class='line'>            return -1;
</span><span class='line'>        }
</span><span class='line'>        for (j = 0; j &lt; i; j++) {
</span><span class='line'>            *op++ = (char_t) ((shiftbuf &gt;&gt; (8 * (2 - j))) & 0xff);
</span><span class='line'>        }
</span><span class='line'>        *op = '\0';
</span><span class='line'>    }
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>/******************************************************************************/
</span><span class='line'>/*
</span><span class='line'> *    Encode a buffer from "string" into "outbuf"
</span><span class='line'> */
</span><span class='line'>void websEncode64(char_t *outbuf, char_t *string, int outlen)
</span><span class='line'>{
</span><span class='line'>    unsigned long    shiftbuf;
</span><span class='line'>    char_t            *cp, *op;
</span><span class='line'>    int                x, i, j, shift;
</span><span class='line'>
</span><span class='line'>    op = outbuf;
</span><span class='line'>    *op = '\0';
</span><span class='line'>    cp = string;
</span><span class='line'>    while (*cp) {
</span><span class='line'>        /*
</span><span class='line'>         *        Take three characters and create a 24 bit number in shiftbuf
</span><span class='line'>         */
</span><span class='line'>        shiftbuf = 0;
</span><span class='line'>        for (j = 2; j &gt;= 0 && *cp; j--, cp++) {
</span><span class='line'>            shiftbuf |= ((*cp & 0xff) &lt;&lt; (j * 8));
</span><span class='line'>        }
</span><span class='line'>        /*
</span><span class='line'>         *        Now convert shiftbuf to 4 base64 letters. The i,j magic calculates
</span><span class='line'>         *        how many letters need to be output.
</span><span class='line'>         */
</span><span class='line'>        shift = 18;
</span><span class='line'>        for (i = ++j; i &lt; 4 && op &lt; &outbuf[outlen] ; i++) {
</span><span class='line'>            x = (shiftbuf &gt;&gt; shift) & 0x3f;
</span><span class='line'>            *op++ = alphabet64[(shiftbuf &gt;&gt; shift) & 0x3f];
</span><span class='line'>            shift -= 6;
</span><span class='line'>        }
</span><span class='line'>        /*
</span><span class='line'>         *        Pad at the end with '='
</span><span class='line'>         */
</span><span class='line'>        while (j-- &gt; 0) {
</span><span class='line'>            *op++ = '=';
</span><span class='line'>        }
</span><span class='line'>        *op = '\0';
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Linux提供了命令行方式的base64编码和解码。</p>

<ul>
<li>将字符串str+换行 编码为base64字符串输出。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "str" | base64</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将字符串str编码为base64字符串输出。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo -n "str" | base64</span></code></pre></td></tr></table></div></figure>


<ul>
<li>从指定的文件file中读取数据，编码为base64字符串输出。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ base64 file</span></code></pre></td></tr></table></div></figure>


<ul>
<li>从标准输入中读取已经进行base64编码的内容，解码输出。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ base64 -d </span></code></pre></td></tr></table></div></figure>


<ul>
<li>从标准输入中读取已经进行base64编码的内容，解码输出。加上-i参数，忽略非字母表字符，比如换行符。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ base64 -d -i</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将base64编码的字符串str+换行 解码输出。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "str" | base64 -d</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将base64编码的字符串str解码输出。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo -n "str" | base64 -d</span></code></pre></td></tr></table></div></figure>


<ul>
<li>从指定的文件file中读取base64编码的内容，解码输出。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ base64 -d file </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
