<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[残剑]]></title>
  <link href="http://txgcwm.github.io/atom.xml" rel="self"/>
  <link href="http://txgcwm.github.io/"/>
  <updated>2013-08-03T13:51:22+08:00</updated>
  <id>http://txgcwm.github.io/</id>
  <author>
    <name><![CDATA[残剑]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[扩大内需对当前的中国非常有必要]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/03/kuo-da-nei-xu-dui-dang-qian-de-zhong-guo-fei-chang-you-bi-yao/"/>
    <updated>2013-08-03T13:37:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/03/kuo-da-nei-xu-dui-dang-qian-de-zhong-guo-fei-chang-you-bi-yao</id>
    <content type="html"><![CDATA[<p><img src="http://shenzhen.zlhome.com/upload/editorupimg/2011-08-05/94855183-7403-4e3b-b819-7b59cd8aa9c1.jpg"></p>

<p>中国当前的消费模式：赚钱，存钱，有了足够的钱之后就是买房，买了房后口袋里的钱几乎就剩下不多了，接下来的问题就要考虑养老问题了，这时候已经到了一定的年龄阶段，过去的激情已经不再存在，一生所赚的钱几乎大部分都花在了这两个方面，其它的消费就是在生活必需品上了，剩下的消费少得可怜！</p>

<p>对于中国这样的一个大国，这是完全不合理的，这严重阻碍了其它产业的发展。买房，养老，看似就是中国人从开始到结束的最终目标，所谓的生活已经不是生活而是一种负担。买房，养老，这两个问题没有得到良好的解决，居民就不敢大胆的消费，企业生产的产品就处于滞销的境地。然而，企业为了更好的生存只能靠出口。出口当然也需要很大的成本，在本国不能创造利润只能这样做了。而一方面政府为了在初期能够更好的发展经济，也鼓励出口，进而对企业进行出口退税，这在很大程度上伤害了中国的经济，尽管在短期上取得了利益。卖到国际上的中国商品很低廉，留给自己的当然也就很少了。</p>

<p>现在很庆幸，中国政府已经取消了很大一部分商品的出口退税，也就是说企业想要出口的话就需要加大成本。有人会说，这样的话，我们的企业在国际上是否会失去竞争力，然而恰恰相反，反而会提高。这样企业就更注重于产品质量的提高以及服务。要知道没有了依靠，它的发展更多的是靠自己，考虑的更多。另一方面，既然外在的市场需要更多的成本，那么就会更加的注重中国本国的市场。</p>

<p>要打开中国的市场还是个问题，就是以上的两个问题是关键。如果政府能够在未来几年内很好的解决这两个问题的话，中国的经济增长在很大程度上就不会那么强烈的依赖于外国的市场，企业的生产成本也会更低，职工就能得到更好的保障。</p>

<p>有数据显示，只要中国的房价下降百分之五十的话，中国的很多居民就不会为买房而担忧，就会有更多的金钱用于其它方面的消费，从而提升了我国的相关产业的发展。中国太依靠国际市场是一个很不好的现象，虽然现在是一个平坦的世界，但作为一个大国，我们要有应对突发事件的能力，更好的依靠自己。战争的可能性在这个世纪依然是存在的，真的发生了，我们就没有丝毫惧怕的理由了，我们的经济依然会很好的快速增长，因为内需在强大的支撑着。</p>

<p>有一件令人寒心的是就是在沃尔玛的货架上可以买到3美元的名牌鞋子，而在中国只能买到很贵并且有可能是假冒的鞋子，中国人看到了能不寒心吗？而这一切又是谁的错呢?我认为最关键的问题就是房子和养老的问题。这样说又有什么理由呢？中国人不能消费，所赚的钱要用到以上两个问题上，所以只有小部分的钱拿出来。企业是要生存的，如果把货物卖给中国的销售商的话，他们很难办到能够将商品销售出去，这些需要很长的一个周期，回收成本也就是一个漫长的过程，中国人不会冒险的去消费啊；但换作将商品出售给一个外国的销售商的话，尽管收到的利润很少，但是能够迅速的回收成本，进而企业可以再生产，企业得到了延续。作为一个企业家，你我都会选择后者的，即便你是那么的爱国，可是&hellip;</p>

<p>希望在未来的几年内，中国政府能够更好地解决买房与养老问题，一旦中国的内需扩大，中国才是真真的崛起!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log10的实现]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/03/log10de-shi-xian/"/>
    <updated>2013-08-03T01:46:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/03/log10de-shi-xian</id>
    <content type="html"><![CDATA[<p>在项目中要使用到log10计算，可所用系统的标准库里并没有移植该功能，需要自己实现。请问，采用什么算法实现该功能？</p>

<p>在网上找了一个例子，但不确定能否在嵌入式的一些平台使用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>double my_log10(double x)
</span><span class='line'>{
</span><span class='line'>    register double ret;
</span><span class='line'>
</span><span class='line'>       __asm__(
</span><span class='line'>  "fldlg2\n\t" 
</span><span class='line'>  "fxch\n\t" 
</span><span class='line'>  "fyl2x"
</span><span class='line'>  :"=t"(ret)
</span><span class='line'>          :"0"(x)
</span><span class='line'>      );
</span><span class='line'>   return ret;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>也查看了glibc的源码，可调用了其它的一些API，对库的依赖比较大，逐步移植的话比较麻烦。代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>double __log10 (double x)
</span><span class='line'>{
</span><span class='line'>    if (__builtin_expect (islessequal (x, 0.0), 0) && _LIB_VERSION != _IEEE_)
</span><span class='line'>    {
</span><span class='line'>        if (x == 0.0)
</span><span class='line'>        {
</span><span class='line'>             feraiseexcept (FE_DIVBYZERO);
</span><span class='line'>             return __kernel_standard (x, x, 18); /* log10(0) */
</span><span class='line'>        }
</span><span class='line'>        else
</span><span class='line'>        {
</span><span class='line'>            feraiseexcept (FE_INVALID);
</span><span class='line'>            return __kernel_standard (x, x, 19); /* log10(x&lt;0) */
</span><span class='line'>        }
</span><span class='line'>     }
</span><span class='line'>
</span><span class='line'>   return  __ieee754_log10 (x);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>参考 <a href="http://www.cnblogs.com/skyivben/archive/2013/02/15/2912914.html">这里</a> 实现了一个c语言版本的log10快速算法，还不是很完善。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;math.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>static double Sqrt(double x)
</span><span class='line'>{
</span><span class='line'>    if (x &lt; 0)
</span><span class='line'>        return -1;
</span><span class='line'>    if (x == 0)
</span><span class='line'>        return 0;
</span><span class='line'>    double y = (double)sqrt((double)x);
</span><span class='line'>
</span><span class='line'>    return (y + x / y) / 2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static double NegativeLog(double q)
</span><span class='line'>{                           
</span><span class='line'>    int p;
</span><span class='line'>    double pi2 = 6.283185307179586476925286766559;
</span><span class='line'>    double eps2 = 0.00000000000001; // 1e-14
</span><span class='line'>    double eps1;    // 1e-28
</span><span class='line'>    double r = q, s = q, n = q, q2 = q * q, q1 = q2 * q;
</span><span class='line'>
</span><span class='line'>    eps1 = eps2 * eps2;
</span><span class='line'>
</span><span class='line'>    for (p = 1; (n *= q1) &gt; eps1; s += n, q1 *= q2)
</span><span class='line'>        r += (p = !p) ? n : -n;
</span><span class='line'>
</span><span class='line'>    double u = 1 - 2 * r, v = 1 + 2 * s, t = u / v;
</span><span class='line'>    double a = 1, b = Sqrt(1 - t * t * t * t);
</span><span class='line'>
</span><span class='line'>    for (; a - b &gt; eps2; b = Sqrt(a * b), a = t)
</span><span class='line'>        t = (a + b) / 2;
</span><span class='line'>
</span><span class='line'>    return pi2 / (a + b) / v / v;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static double Log(double x)
</span><span class='line'>{
</span><span class='line'>    int k = 0;
</span><span class='line'>    double ln10 = 2.30258509299404568401799145468;
</span><span class='line'>
</span><span class='line'>    if (x &lt;= 0)
</span><span class='line'>        return -1;
</span><span class='line'>    if (x == 1)
</span><span class='line'>        return 0;
</span><span class='line'>
</span><span class='line'>    for (; x &gt; 0.1; k++)
</span><span class='line'>        x /= 10;
</span><span class='line'>    for (; x &lt;= 0.01; k--)
</span><span class='line'>        x *= 10;
</span><span class='line'>
</span><span class='line'>    return k * ln10 - NegativeLog(x);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>double Log10(double x)
</span><span class='line'>{
</span><span class='line'>    double ln10 = 2.30258509299404568401799145468;
</span><span class='line'>
</span><span class='line'>    return Log(x) / ln10;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>    printf(" self Log10: %f\n math log10: %f\n\n", Log10(1000), log10(1000));
</span><span class='line'>    printf(" self Log10: %f\n math log10: %f\n\n", Log10(1), log10(1));
</span><span class='line'>    printf(" self Log10: %f\n math log10: %f\n\n", Log10(8192.1024), log10(8192.1024));
</span><span class='line'>    printf(" self Log10: %f\n math log10: %f\n\n", Log10(0.3), log10(0.3));
</span><span class='line'>    printf(" self Log10: %f\n math log10: %f\n\n", Log10(33.8), log10(33.8));
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kfifo.c中in和out的溢出问题]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/03/kfifo-dot-czhong-inhe-outde-yi-chu-wen-ti/"/>
    <updated>2013-08-03T01:08:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/03/kfifo-dot-czhong-inhe-outde-yi-chu-wen-ti</id>
    <content type="html"><![CDATA[<p>先上内核循环缓冲结构体的定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct kfifo {
</span><span class='line'>    unsigned char *buffer;        /* the buffer holding the data */
</span><span class='line'>    unsigned int size;        /* the size of the allocated buffer */
</span><span class='line'>    unsigned int in;        /* data is added at offset (in % size) */
</span><span class='line'>    unsigned int out;        /* data is extracted from off. (out % size) */
</span><span class='line'>    spinlock_t *lock;        /* protects concurrent modifications */
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>如果对“Linux内核中的循环缓冲区”不是很了解的话，可以先参考 <a href="http://www.kerneltravel.net/jiaoliu/kern-kfifo.html">这里</a> 。内核中有关kfifo.c和kfifo.h两个文件的源码以及该问题的具体情况，可以查看 <a href="http://bbs.chinaunix.net/thread-4088139-1-1.html">这里</a> 。</p>

<!--more-->


<p>对于结构体内的in和out两个变量，内核是作如下处理的:1、在读入数据时增加in；2、在取出数据时增加out；3、当检测到两个相等的时候将它们复位归0。1和2不作讨论和分析，针对第3点的处理，内核代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline unsigned int kfifo_get(struct kfifo *fifo,
</span><span class='line'>                                     unsigned char *buffer, unsigned int len)
</span><span class='line'>{
</span><span class='line'>    unsigned long flags;
</span><span class='line'>    unsigned int ret;
</span><span class='line'>
</span><span class='line'>    spin_lock_irqsave(fifo-&gt;lock, flags);
</span><span class='line'>    ret = __kfifo_get(fifo, buffer, len);
</span><span class='line'>
</span><span class='line'>    /*
</span><span class='line'>     * optimization: if the FIFO is empty, set the indices to 0
</span><span class='line'>     * so we don't wrap the next time
</span><span class='line'>     */
</span><span class='line'>    if (fifo-&gt;in == fifo-&gt;out)
</span><span class='line'>        fifo-&gt;in = fifo-&gt;out = 0;
</span><span class='line'>
</span><span class='line'>    spin_unlock_irqrestore(fifo-&gt;lock, flags);
</span><span class='line'>
</span><span class='line'>    return ret;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>问题：当数据写入速度大于读取速度的时候，in和out的值将永远不会相等，也就是说buffer永远是有数据的，这样的话in和out都存在超出自身数值表示范围，从而导致错误？</p>

<p>针对这个问题，不知大家有什么好的建议？</p>

<h2>网友felix021的回复</h2>

<p>之前看错了你的问题。</p>

<p>从源码的实现上来说，in和out的确是有可能会出现溢出，但是出现的情况非常极端：每次读取数据的时候都比当前缓冲区中的数据还少、而且这种情况持续直到写入的数据超过4GB。通常应该是不会遇到的；鉴于墨菲定律可能带来的恶果，的确还是得考虑一下。</p>

<p>不过可以再想想，溢出了就真的会导致程序出错吗？</p>

<p>回头再仔细看看 __kfifo_put()里面的代码，在写入的时候是这样实现的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* first put the data starting from fifo-&gt;in to buffer end */
</span><span class='line'>l = min(len, fifo-&gt;size - (fifo-&gt;in & (fifo-&gt;size - 1)));
</span><span class='line'>memcpy(fifo-&gt;buffer + (fifo-&gt;in & (fifo-&gt;size - 1)), buffer, l);</span></code></pre></td></tr></table></div></figure>


<p>注意<code>(fifo-&gt;in &amp; (fifo-&gt;size - 1)</code>这里用了<code>&amp;</code>符号，而不是直接<code>%fifo-&gt;size</code>，也就是说，初始化的时候size必然得设置成2的n次方（这个限制在内核里很合理，因为内核分配的空间通常是2的倍数，比如一个page）。</p>

<p>在像x86这种溢出跟取模操作等价的处理器上，对于当前的写入操作实际上“正好”没有风险。同样的，由于in/out都是 unsigned int，在后续的 kfifo_get/kfifo_len 里面<code>in - out</code>(比如说<code>2 - 4294967295</code>，你可以试试)，结果仍然“正好”是正确的。</p>

<p>结论就是，它居然真的没有风险（前提是在溢出、无符号整数减法操作与x86处理器类似的CPU上）。</p>

<p>不得不说，内核源码的开发者真吝啬啊，多写一个赋值操作都不舍得。</p>

<h2>参考文章</h2>

<p><a href="http://segmentfault.com/q/1010000000249362">内核kfifo.c中in和out的问题</a> <br/>
<a href="http://bbs.chinaunix.net/thread-4088139-1-1.html">内核中kfifo.c相关的问题</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux管道的实现机制]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/02/linuxguan-dao-de-shi-xian-ji-zhi/"/>
    <updated>2013-08-02T00:24:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/02/linuxguan-dao-de-shi-xian-ji-zhi</id>
    <content type="html"><![CDATA[<p>在Linux中，管道是一种使用非常频繁的通信机制。从本质上说，管道也是一种文件，但它又和一般的文件有所不同，管道可以克服使用文件进行通信的两个问题，具体表现为：</p>

<ul>
<li><p>限制管道的大小。实际上，管道是一个固定大小的缓冲区。在Linux中，该缓冲区的大小为1页，即4K字节，使得它的大小不像文件那样不加检验地增长。使用单个固定缓冲区也会带来问题，比如在写管道时可能变满，当这种情况发生时，随后对管道的write()调用将默认地被阻塞，等待某些数据被读取，以便腾出足够的空间供write()调用写。</p></li>
<li><p>读取进程也可能工作得比写进程快。当所有当前进程数据已被读取时，管道变空。当这种情况发生时，一个随后的read()调用将默认地被阻塞，等待某些数据被写入，这解决了read()调用返回文件结束的问题。</p></li>
</ul>


<p>注意：从管道读数据是一次性操作，数据一旦被读，它就从管道中被抛弃，释放空间以便写更多的数据。</p>

<!--more-->


<h1>管道的结构</h1>

<p>在Linux中，管道的实现并没有使用专门的数据结构，而是借助了文件系统的file结构和VFS的索引节点inode。通过将两个file结构指向同一个临时的VFS索引节点，而这个VFS索引节点又指向一个物理页面而实现的。如下图所示。</p>

<p><img src="http://txgcwm.github.io/images/2013/8/pipe/struct.png" alt=" struct " /></p>

<p>图中有两个file数据结构，但它们定义文件操作例程地址是不同的，其中一个是向管道中写入数据的例程地址，而另一个是从管道中读出数据的例程地址。这样，用户程序的系统调用仍然是通常的文件操作，而内核却利用这种抽象机制实现了管道这一特殊操作。</p>

<h1>管道的读写</h1>

<p>管道实现的源代码在fs/pipe.c中，在pipe.c中有很多函数，其中有两个函数比较重要，即管道读函数pipe_read()和管道写函数pipe_wrtie()。管道写函数通过将字节复制到VFS索引节点指向的物理内存而写入数据，而管道读函数则通过复制物理内存中的字节而读出数据。当然，内核必须利用一定的机制同步对管道的访问，为此，内核使用了锁、等待队列和信号。</p>

<p>当写进程向管道中写入时，它利用标准的库函数write()，系统根据库函数传递的文件描述符，可找到该文件的file结构。file结构中指定了用来进行写操作的函数（即写入函数）地址，于是，内核调用该函数完成写操作。写入函数在向内存中写入数据之前，必须首先检查VFS索引节点中的信息，同时满足如下条件时，才能进行实际的内存复制工作：</p>

<ul>
<li>内存中有足够的空间可容纳所有要写入的数据；</li>
<li>内存没有被读程序锁定。</li>
</ul>


<p>如果同时满足上述条件，写入函数首先锁定内存，然后从写进程的地址空间中复制数据到内存。否则，写入进程就休眠在VFS索引节点的等待队列中，接下来，内核将调用调度程序，而调度程序会选择其他进程运行。写入进程实际处于可中断的等待状态，当内存中有足够的空间可以容纳写入数据，或内存被解锁时，读取进程会唤醒写入进程，这时，写入进程将接收到信号。当数据写入内存之后，内存被解锁，而所有休眠在索引节点的读取进程会被唤醒。</p>

<p>管道的读取过程和写入过程类似。但是，进程可以在没有数据或内存被锁定时立即返回错误信息，而不是阻塞该进程，这依赖于文件或管道的打开模式。反之，进程可以休眠在索引节点的等待队列中等待写入进程写入数据。当所有的进程完成了管道操作之后，管道的索引节点被丢弃，而共享数据页也被释放。</p>

<h1>CU上的问题</h1>

<h2>popkart718的提问</h2>

<p>《Unix环境高级编程》403页中部分描述如下：</p>

<p><img src="http://txgcwm.github.io/images/2013/8/pipe/sync.jpg" alt=" sync " /></p>

<p>明明是两个管道，为什么read的时候会发生阻塞呢？</p>

<h2>解答</h2>

<p>read依赖于管道的打开模式，打开管道时可使用pipe2设定相应的flags。书上所写的阻塞是在管道中没有数据的情况下发生的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   int pipe2(int pipefd[2], int flags);
</span><span class='line'>
</span><span class='line'>DESCRIPTION
</span><span class='line'>   pipe()  creates  a  pipe, a unidirectional data channel that can be used for interprocess communication.  The array pipefd is used to return
</span><span class='line'>   two file descriptors referring to the ends of the pipe.  pipefd[0] refers to the read end of the pipe.  pipefd[1] refers to the write end of
</span><span class='line'>   the  pipe.  Data written to the write end of the pipe is buffered by the kernel until it is read from the read end of the pipe.  For further
</span><span class='line'>   details, see pipe(7).
</span><span class='line'>
</span><span class='line'>   If flags is 0, then pipe2() is the same as pipe().  The following values can be bitwise ORed in flags to obtain different behavior:
</span><span class='line'>
</span><span class='line'>   O_NONBLOCK  Set the O_NONBLOCK file status flag on the two new open file descriptions.  Using this flag saves extra  calls  to  fcntl(2)  to
</span><span class='line'>               achieve the same result.
</span><span class='line'>
</span><span class='line'>   O_CLOEXEC   Set  the  close-on-exec  (FD_CLOEXEC) flag on the two new file descriptors.  See the description of the same flag in open(2) for
</span><span class='line'>               reasons why this may be useful.</span></code></pre></td></tr></table></div></figure>


<p>同时也可以查看内核文件fs/pipe.c中的pipe_read函数实现。以下是简单的测试程序。</p>

<p>测试一：使用pipe2且传入参数的flags为0（相当于使用pipe）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;unistd.h&gt;
</span><span class='line'>#include &lt;signal.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>int fd[2];
</span><span class='line'>
</span><span class='line'>void handle(int sig)
</span><span class='line'>{
</span><span class='line'>  if (sig == SIGUSR1)
</span><span class='line'>      write(fd[1], "p", 1);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>  char c;
</span><span class='line'>  pid_t pid;
</span><span class='line'>
</span><span class='line'>  if (pipe2(fd, 0) &lt; 0) {
</span><span class='line'>      printf("can not creat pipe!\n");
</span><span class='line'>      return -1;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  if ((pid = fork()) &lt; 0) {
</span><span class='line'>      printf("can not fork!\n");
</span><span class='line'>      return -1;
</span><span class='line'>  } else if (pid &gt; 0) {
</span><span class='line'>      close(fd[0]);
</span><span class='line'>      signal(SIGUSR1, handle);
</span><span class='line'>      for (;;) {
</span><span class='line'>      }
</span><span class='line'>  } else {
</span><span class='line'>      close(fd[1]);
</span><span class='line'>      for (;;) {
</span><span class='line'>          if (read(fd[0], &c, 1) == 1)
</span><span class='line'>              printf("c:%c\n", c);
</span><span class='line'>          else
</span><span class='line'>              printf("nothing to read!\n");
</span><span class='line'>
</span><span class='line'>          sleep(2);
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>编译后，可以看到程序阻塞在那里，当使用“kill -10 进程号”时，才会从管道中读出数据。</p>

<p>测试二：使用pipe2时设置flags的参数为O_NONBLOCK</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;sys/types.h&gt;
</span><span class='line'>#include &lt;sys/stat.h&gt;
</span><span class='line'>#include &lt;fcntl.h&gt;
</span><span class='line'>#include &lt;unistd.h&gt;
</span><span class='line'>#include &lt;signal.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>int fd[2];
</span><span class='line'>
</span><span class='line'>void handle(int sig)
</span><span class='line'>{
</span><span class='line'>  if (sig == SIGUSR1)
</span><span class='line'>      write(fd[1], "p", 1);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>  char c;
</span><span class='line'>  pid_t pid;
</span><span class='line'>
</span><span class='line'>  if (pipe2(fd, O_NONBLOCK) &lt; 0) {
</span><span class='line'>      printf("can not creat pipe!\n");
</span><span class='line'>      return -1;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  if ((pid = fork()) &lt; 0) {
</span><span class='line'>      printf("can not fork!\n");
</span><span class='line'>      return -1;
</span><span class='line'>  } else if (pid &gt; 0) {
</span><span class='line'>      close(fd[0]);
</span><span class='line'>      signal(SIGUSR1, handle);
</span><span class='line'>      for (;;) {
</span><span class='line'>      }
</span><span class='line'>  } else {
</span><span class='line'>      close(fd[1]);
</span><span class='line'>      for (;;) {
</span><span class='line'>          if (read(fd[0], &c, 1) == 1)
</span><span class='line'>              printf("c:%c\n", c);
</span><span class='line'>          else
</span><span class='line'>              printf("nothing to read!\n");
</span><span class='line'>
</span><span class='line'>          sleep(2);
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>编译后，执行程序可以看到它不停的打印消息，若管道内没有数据的话，read就直接返回了。</p>

<h1>参考文章</h1>

<p><a href="http://oss.org.cn/kernel-book/ch07/7.1.1.htm">Linux管道的实现机制</a> <br/>
<a href="http://bbs.chinaunix.net/thread-4069374-1-1.html">进程通信管道问题</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关注你的是谁]]></title>
    <link href="http://txgcwm.github.io/blog/2013/08/01/guan-zhu-ni-de-shi-shui/"/>
    <updated>2013-08-01T22:46:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/08/01/guan-zhu-ni-de-shi-shui</id>
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/7834999djw1dorelc6br4j.jpg"></p>

<p>仔细看了看自己的QQ好友，总数将近300多人，可实际会去交谈的大约50人以内。我们彼此生活在自己的小圈子里，即便开始了一段交谈，双方都会担心彼此之间的话题噶然而止，以致陷入尴尬的境地，所以我们索性不开始一段交流。</p>

<!--more-->


<p>QQ群是一个很好的东西，当我们想说的时候就在上面吼上一句，不想说的时候就默默地在旁观望，不会有“对面还有个人在等我的回话呢？我是否应该说点其它什么东西”的尴尬。同样，微信也有这么个优点。</p>

<p>即便我们经常交流的好友只有那么几个，但其他的好友依然需要他们静静的躺在我们的列表中，以防某一天我们会需要对方的帮助、咨询、交流。</p>

<p>每个人的好友圈里大体有这么几类人：同学、同事、朋友、客户以及网络上结交的网友。其中以前三类人居多，后两者相对较少。我们有那么多的好友，为何经常交流的朋友只有那么几个？可能跟工作环境和从事领域、个人性格和处事风格、生活背景、地域环境等等因素有关。</p>

<p>除了同事和客户外，其他人或许我们只是偶尔交流，但即便如此，我们也会被很多朋友默默的关注着。这里不讨论男女之间因爱慕或者是亲情而关注的话题，主要说的是普通朋友之间的那种关注。关注你的人大体有以下几类：对你发表的话题感兴趣的人、欣赏你的人、工作环境的同事、交心的朋友。</p>

<h1>对你发表的话题感兴趣的人</h1>

<p>当你发表了一个很有意思的话题，勾起了人们的好奇心，这时他们就会来看看。而如果你没有什么特别能够吸引他们的东西的时候，他们往往不会关注你。他们看重的是事情，更多的会去思考“这是什么样的事情？多有意思，要是能够多点什么就更好了”。</p>

<h1>欣赏你的人</h1>

<p>与前者不同，他们更看重的是你这个人——欣赏你的人格和你的思想，无论你发表什么样的说说或者文章他们都会来看看。他们更多的思考“你为什么会写下这些东西，想表达的是什么，为什么他想的跟我的想法都一样”，但他们往往不给你任何的评论，生怕自己所说的不合适而失去他们在你脑海中的映像。虽然他们平时也很少甚至是不跟你交流、交谈，当某一天他们的心里有千万头“草泥马”在奔腾、头脑中的“火花”在哧哧作响的时候，他们会找上你，和你大谈特谈。而你也发现他们身上的特质和你有共同点的时候，你们会进一步发展，成为交心的朋友。</p>

<h1>工作环境的同事</h1>

<p>这些人是很特殊的群体，起初他们关注你并不是因为你的话题和人本身，而是想通过一些事情和话语更加的了解你，进而增进彼此之间的认识，便于以后的交流。他们在适当的时候，也会和你讨论一些话题，分享一些观点和建议。时间久了，随着对你了解地更加深入，会慢慢地开始欣赏你，最后成为交心的朋友。他们有一个更大的优势，他们平时和你一起工作，更容易从实际工作中去了解你、认识你。</p>

<h1>交心的朋友</h1>

<p>他们不仅对你的话题感兴趣，对你本身更加感兴趣。当你述说某件事情或话题的时候，他们会加入到你的讨论中，发表他们的观点，同时也给出他们认为正确的意见。而这一类人往往也是你关注的对象，你们彼此欣赏着对方。</p>

<h1>我们的财富</h1>

<p>2012年的时候，美国企业状告新东方账目作假，致使新东方的股票大跌。中国企业家联合会的各位大佬询问“老俞，你实话实说，你们到底有没有做过亏心事。如果你说‘做过’，那以后你的事我们就不管了。如果你说‘没做过’，那我们会把新东方救回来。我们不要什么解释，只要你的一句话”。俞敏洪回道“我们没有做过”。第二天，几亿美金入场，买入了大量的新东方股票，将新东方从死亡的边缘救了回来。</p>

<p>朋友之间不需要任何的解释，他们始终理解你，知道你为什么那么做。而需要你给出解释的人，即便你是用事实在说话，他们也始终不相信你。珍惜那些关注我们的人，他们同样是我们人生的财富。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊聊测试]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/31/liao-liao-ce-shi/"/>
    <updated>2013-07-31T23:26:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/31/liao-liao-ce-shi</id>
    <content type="html"><![CDATA[<p><img src="http://www.51testing.com/zhuanti/img/csvskf_02.gif"></p>

<p>从工作到现在，一直有较长时间跟测试方面的人员交流，所以也顺道聊聊测试的话题。有一部分人只把测试看作是试用用户，并不认为她们在整个过程中能够起到多大的作用，而忽略了她们的巨大价值。一件产品只有通过测试的点头之后才能够走向市场，否则即便上市了每个人的心里都会胆寒，说不定在某个时刻就爆发了问题。测试不仅仅是高级的试用用户，更是一个开发师、设计师和分析师。</p>

<!--more-->


<p>在第一家设备公司的时候，经常去复现测试人员提交的bug，但总是测试不出来，于是就去找她们复现这些问题。当找到她们的时候，她们总能又一次把问题复现。我真的不了解那些测试人员是什么样的思维，很多bug能够被她们用奇特的方法测试出来。很多开发人员总是跑过去跟测试人员讲“你不能这么测试，你应该这么测试”，一般测试人员辩驳几句后会选择沉默。但她们还是坚持着自己的观点，然后把提交的测试问题重新返还给开发人员，只要开发人员不解决她们就不会把问题关闭，跟你死耗着，看你怎么办。由于跟测试人员待在一起时间长了，很了解她们的实力，所以我一般都不会自信的说“这个肯定没有问题，怎么可能出现这样的bug”。如果我真的那么自信的说话，当她们重新复现到问题的时候，我是否会无地自容呢？长久下来，当她们复现出问题的时候，她们都会很和蔼的说“没事，慢慢修复吧。如果复现不了，再来找我，我再帮你复现”。每次的交流都是心平气和，不会有不愉快的冲突。</p>

<p>到了第二家公司的时候，遇到了一个更好的测试人员。她不仅能够清楚的描述问题，还能够附带她的分析，对解决问题起到了很大的帮助。她经常会问我设备内软件的设计架构和原理，我也非常乐意告诉她这些东西。一旦她了解了，就会帮助我分析问题，这样就加快了我解决bug的速度。以下的一段文字是她提交某一bug的描述：</p>

<blockquote><p>【测试版本】：Vxxx</p>

<p>【测试步骤】： <br/>
1、PC接入终端（PCB板已增加屏蔽罩），通过VLC观看频点xxxxxx的节目流畅。 <br/>
2、手机接入终端，启动android客户端但不观看电视节目，此时观察VLC节目中周期性出现水幕或跳跃问题。分析原因是android客户端启动后会向终端获取状态信息。 <br/>
3、操作手机客户端观看电视节目，VLC和手机客户端的节目均播放流畅，分析原因是手机客户端在观看视频时不会获取心跳信息。 <br/>
4、启动windows客户端但不观看电视节目，VLC和手机客户端的节目又周期性出现水幕或跳跃问题。分析原因是windows客户端启动后回获取心跳信息。 <br/>
5、windows客户端观看电视节目后，VLC和手机客户端的节目扔会周期性出现水幕或跳跃问题。原因是windows客户端在节目播放过程中仍会获取状态信息。</p>

<p>问题：客户端周期性获取终端状态会导致节目播放时出现水幕，心跳机制需优化。</p>

<p>【测试结论】：客户端周期性获取心跳包会影响节目播放效果</p></blockquote>

<p>写的很清楚，分析得很有道理。我根据她提供的描述信息去查看问题，检测到引发问题的原因与上述描述的一致。正因她详细地描述测试现象及相关的对比实验、细致的分析，我仅花了几分钟的时间就解决了这个问题。如果没有她所做的工作，我可能会从“视频流传输”方面去分析，这或许会花费几个小时甚至几天的时间去跟踪这个问题。</p>

<p>我曾问过一个朋友“你们公司的测试人员会如何去做”，他回道“在自己的设备上遇到问题后再在使用其它公司的设备作对比测试，然后将问题提交给开发人员”。如他所述，很多测试人员都会做基本的对比测试，却缺少了自己对问题的必要分析。</p>

<p>一个好的测试人员不仅能够发现问题，还能够帮你分析问题且提出解决问题的方案。开发人员很多时候不应该去左右她们，不应该去影响她们，不应该给她们一个框架，她们的思维需要的就是天马行空！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux的硬链接与软链接]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/29/linuxde-ying-lian-jie-yu-ruan-lian-jie/"/>
    <updated>2013-07-29T23:37:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/29/linuxde-ying-lian-jie-yu-ruan-lian-jie</id>
    <content type="html"><![CDATA[<p>文件有文件名与数据，这在Linux上被分成两个部分：用户数据(user data)与元数据(metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在Linux中，元数据中的inode号（inode是文件元数据的一部分但其并不包含文件名，inode号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过inode号寻找正确的文件数据块。下图展示了程序通过文件名获取文件内容的过程。</p>

<p><img src="http://txgcwm.github.io/images/2013/7/link/file.png" alt=" file " /></p>

<p>为解决文件的共享使用，Linux系统引入了两种链接：硬链接(hard link)与软链接（又称符号链接，即soft link或symbolic link）。链接为Linux系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个inode号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名。</p>

<p><img src="http://txgcwm.github.io/images/2013/7/link/access.png" alt=" access " /></p>

<!--more-->


<h1>硬链接</h1>

<p>硬链接可由命令link或ln创建。如下是对文件oldfile创建硬链接。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>link oldfile newfile 
</span><span class='line'>ln oldfile newfile </span></code></pre></td></tr></table></div></figure>


<p>由于硬链接是有着相同inode号仅文件名不同的文件，因此硬链接存在以下几点特性：</p>

<ul>
<li>文件有相同的inode及data block；</li>
<li>只能对已存在的文件进行创建；</li>
<li>不能交叉文件系统进行硬链接的创建；</li>
<li>不能对目录进行创建，只可对文件创建；</li>
<li>删除一个硬链接文件并不影响其它有相同inode号的文件。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -li
</span><span class='line'>total 0
</span><span class='line'>
</span><span class='line'>// 只能对已存在的文件创建硬连接
</span><span class='line'>$ link old.file hard.link
</span><span class='line'>link: cannot create link `hard.link' to `old.file': No such file or directory
</span><span class='line'>
</span><span class='line'>$ echo "This is an original file" &gt; old.file
</span><span class='line'>$ cat old.file
</span><span class='line'>This is an original file
</span><span class='line'>$ stat old.file
</span><span class='line'>  File: `old.file'
</span><span class='line'>  Size: 25            Blocks: 8          IO Block: 4096   regular file
</span><span class='line'>Device: 807h/2055d    Inode: 796901      Links: 1
</span><span class='line'>Access: (0664/-rw-rw-r--)  Uid: ( 1000/  txgcwm)   Gid: ( 1000/  txgcwm)
</span><span class='line'>Access: 2013-07-29 23:57:49.435157205 +0800
</span><span class='line'>Modify: 2013-07-29 23:57:27.295157688 +0800
</span><span class='line'>Change: 2013-07-29 23:57:27.295157688 +0800
</span><span class='line'> Birth: -
</span><span class='line'> 
</span><span class='line'>// 文件有相同的inode号以及data block
</span><span class='line'>$ link old.file hard.link | ls -li
</span><span class='line'>total 8
</span><span class='line'>796901 -rw-rw-r-- 2 txgcwm txgcwm 25 Jul 29 23:57 hard.link
</span><span class='line'>796901 -rw-rw-r-- 2 txgcwm txgcwm 25 Jul 29 23:57 old.file
</span><span class='line'>
</span><span class='line'>// 不能交叉文件系统
</span><span class='line'>$ sudo ln /dev/input/event5 /root/bfile.txt
</span><span class='line'>[sudo] password for txgcwm: 
</span><span class='line'>ln: failed to create hard link `/root/bfile.txt' =&gt; `/dev/input/event5': Invalid cross-device link
</span><span class='line'>
</span><span class='line'>// 不能对目录进行创建硬连接
</span><span class='line'>$ mkdir -p old.dir/test
</span><span class='line'>$ ln old.dir/ hardlink.dir
</span><span class='line'>ln: `old.dir/': hard link not allowed for directory</span></code></pre></td></tr></table></div></figure>


<p>文件old.file与hard.link有着相同的inode号（796901）及文件权限，inode是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当inode存在且链接计数器（link count）不为0时。inode号仅在各文件系统下是唯一的，当Linux挂载多个文件系统后将出现inode号重复的现象，因此硬链接创建时不可跨文件系统。设备文件目录/dev使用的文件系统是devtmpfs，而/home（与根目录/一致）使用的是磁盘文件系统ext4。以下使用命令df查看当前系统中挂载的文件系统类型、各文件系统inode使用情况及文件系统挂载点。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo df -i --print-type
</span><span class='line'>Filesystem     Type      Inodes  IUsed   IFree IUse% Mounted on
</span><span class='line'>/dev/sda5      ext4     1250928  63404 1187524    6% /
</span><span class='line'>udev           devtmpfs  211313    603  210710    1% /dev
</span><span class='line'>tmpfs          tmpfs     215180    566  214614    1% /run
</span><span class='line'>none           tmpfs     215180      3  215177    1% /run/lock
</span><span class='line'>none           tmpfs     215180      9  215171    1% /run/shm
</span><span class='line'>none           tmpfs     215180     23  215157    1% /run/user
</span><span class='line'>/dev/sda6      ext4       62464    355   62109    1% /boot
</span><span class='line'>/dev/sda7      ext4     1250928  91579 1159349    8% /home
</span><span class='line'>/dev/sda11     ext4     2501856 336584 2165272   14% /srv
</span><span class='line'>/dev/sda12     ext4     1875968 144226 1731742    8% /opt
</span><span class='line'>/dev/sda8      ext4      249984    132  249852    1% /tmp
</span><span class='line'>/dev/sda9      ext4     1250928 584616  666312   47% /usr
</span><span class='line'>/dev/sda10     ext4      249984  24565  225419   10% /var
</span><span class='line'>
</span><span class='line'>$ sudo find / -inum 1114
</span><span class='line'>/lib/modules/3.5.0-25-generic/kernel/drivers/hwmon/mcp3021.ko
</span><span class='line'>/sys/devices/LNXSYSTM:00/device:00/PNP0A08:00/device:02/PNP0C02:00/power/autosuspend_delay_ms</span></code></pre></td></tr></table></div></figure>


<p>值得一提的是，Linux系统存在inode号被用完但磁盘空间还有剩余的情况。硬链接不能对目录创建是受限于文件系统的设计。现Linux文件系统中的目录均隐藏了两个特殊的目录：当前目录（.）与父目录（..）。查看这两个特殊目录的inode号可知其实这两目录就是两个硬链接（注意目录/lost+found/的inode号）。若系统允许对目录创建硬链接，则会产生目录环。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo ls -aliF /lost+found
</span><span class='line'>total 20
</span><span class='line'>11 drwx------  2 root root 16384 Nov 11  2012 ./
</span><span class='line'> 2 drwxr-xr-x 23 root root  4096 Jul  7 13:47 ../
</span><span class='line'> 
</span><span class='line'>$ sudo stat /lost+found/
</span><span class='line'>  File: `/lost+found/'
</span><span class='line'>  Size: 16384         Blocks: 32         IO Block: 4096   directory
</span><span class='line'>Device: 805h/2053d    Inode: 11          Links: 2
</span><span class='line'>Access: (0700/drwx------)  Uid: (    0/    root)   Gid: (    0/    root)
</span><span class='line'>Access: 2013-07-30 00:10:47.479140197 +0800
</span><span class='line'>Modify: 2012-11-11 00:50:27.000000000 +0800
</span><span class='line'>Change: 2012-11-11 00:50:27.000000000 +0800
</span><span class='line'> Birth: -</span></code></pre></td></tr></table></div></figure>


<h1>软链接</h1>

<p>软链接与硬链接不同，若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软连接。软链接就是一个普通文件，只是数据块内容有点特殊。软链接有着自己的inode号以及用户数据块。因此软链接的创建与使用没有类似硬链接的诸多限制：</p>

<ul>
<li>软链接有自己的文件属性及权限等；</li>
<li>可对不存在的文件或目录创建软链接；</li>
<li>软链接可交叉文件系统；</li>
<li>软链接可对文件或目录创建；</li>
<li>创建软链接时，链接计数 i_nlink 不会增加；</li>
<li>删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -li
</span><span class='line'>total 0
</span><span class='line'>
</span><span class='line'>// 可对不存在的文件创建软链接
</span><span class='line'>$ ln -s old.file soft.link
</span><span class='line'>$ ls -liF
</span><span class='line'>total 0
</span><span class='line'>796810 lrwxrwxrwx 1 txgcwm txgcwm 8 Jul 30 00:25 soft.link -&gt; old.file
</span><span class='line'>
</span><span class='line'>// 由于被指向的文件不存在，此时的软链接 soft.link 就是死链接
</span><span class='line'>$ cat soft.link
</span><span class='line'>cat: soft.link: No such file or directory
</span><span class='line'>
</span><span class='line'>// 创建被指向的文件 old.file，soft.link 恢复成正常的软链接
</span><span class='line'>$ echo "This is an original file_A" &gt;&gt; old.file
</span><span class='line'>$ cat soft.link
</span><span class='line'>This is an original file_A
</span><span class='line'>
</span><span class='line'>// 对不存在的目录创建软链接
</span><span class='line'>$ ln -s old.dir soft.link.dir
</span><span class='line'>$ mkdir -p old.dir/test
</span><span class='line'>$ tree . -F --inodes
</span><span class='line'>.
</span><span class='line'>├── [ 796834]  old.dir/
</span><span class='line'>│   └── [ 796851]  test/
</span><span class='line'>├── [ 796830]  old.file
</span><span class='line'>├── [ 796830]  soft.link -&gt; old.file
</span><span class='line'>└── [ 796834]  soft.link.dir -&gt; old.dir/
</span><span class='line'>
</span><span class='line'>3 directories, 2 files</span></code></pre></td></tr></table></div></figure>


<h1>参考文章</h1>

<p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/">理解Linux的硬链接与软链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于提建议]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/29/guan-yu-ti-jian-yi/"/>
    <updated>2013-07-29T20:20:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/29/guan-yu-ti-jian-yi</id>
    <content type="html"><![CDATA[<p><img src="http://www.beidou119.com/uploadfile/2013/0106/20130106093231928.jpg"></p>

<p>在一个公司里，我们是否应该提建议，又该如何去提？对于我来说是一个很难的问题，时常提一些建议却得不到对方的理解，甚至别人根本不屑听你讲的东西。慢慢地，也就没有了那个心情，让一切顺其发展。其实我也尝试着想让自己更好地去处理这件事情，也提了问题去询问网友，可得出的结果趋于一致性。以下是我在CU论坛上的提问，以及一些朋友的回复。</p>

<!--more-->


<blockquote><p>在公司里，员工间彼此讨论着公司的各个方面，却很少向上级主管提出。可能其中是有好的建议的，可始终没人提。尤其是对一些创业公司，我认为意见是很重要的。针对这一问题，各位朋友所在的公司又是如何对待员工提的意见，或者是如何鼓励员工提意见，又或者是各个员工针对该问题的态度是什么？</p>

<p>CTUOS: 。。。。看时候。。看领导吧。。提的多。。死的快。。。。。反正我现在就不说老。。。</p>

<p>forestiger: 遇到好领导提还行，不好的领导提不好死的快，所以一般不提。</p>

<p>action08: 关键还是看领导是否有愿意听的心态，，，不少企业领导为了表现自己是领导还是很专断的，甚至听到不同意见的人会打压，，文化文化。不少领导号称开明，我这里还是找到了案例，好话说说都好听；真正做得的高尚人还是难啊！</p>

<p>qinyiwang：感觉没有啥渠道，当面说？发邮件？</p></blockquote>

<p>从回复的结果看，大家都认为没有必要提，提了对自己还未必是好事。这样的一个结果，必然有其缘由。很多的领导表面上希望手下多提意见，表示“对事不对人”，可当员工真的提意见的时候就变成了“对人不对事”，说不定日后还有很多的小鞋子穿。一切只是形式而已，从来没有想过认真的执行一次。或许当面临巨大的危机才真正想执行，那时可能已经没有员工愿意提任何意见了。老是喊着“狼来了”，当狼真的来的时候又有谁会相信呢！虽然比喻不是很恰当，但又何其的相似。</p>

<p>看《贞观长歌》的时候，唐太宗曾提到“隋亡非炀帝一人之过，过在君臣。倘若群臣直言相谏，炀帝能够采纳一些谏言，也不至于如此快的亡国”。是啊，隋朝的灭亡是综合因素导致了这个结果。同样，一个公司也不可能因为一个人而兴起或衰败，是每一个个体因素综合的结果。不同的只是每个人在其中所占据的分量不同罢了。</p>

<p>自古君王死社稷，文臣死谏，武将死战！作为一个公司职员的我们，又该如何呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一封关于“书写技术文档提议”的信]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/28/%5B%3F%5D-feng-guan-yu-shu-xie-ji-zhu-wen-dang-ti-yi-de-xin/"/>
    <updated>2013-07-28T14:50:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/28/[?]-feng-guan-yu-shu-xie-ji-zhu-wen-dang-ti-yi-de-xin</id>
    <content type="html"><![CDATA[<p><img src="http://img2.itokit.com/uploadfile/2012/0308/20120308113544112.gif"></p>

<p>中国有句古话叫“授人以鱼不如授人以渔”，说的是传授给人既有知识，不如传授给人学习知识的方法。道理其实很简单，鱼是目的，钓鱼是手段，一条鱼能解一时之饥，却不能解长久之饥，如果想要永远有鱼吃，那就要学会钓鱼的方法。</p>

<!--more-->


<p>往往很多人理解这句话的时候是从“传授者”的角度出发，觉得“应该如何去做，而不应该如何去做，哪一种才是更好的选择”；然而，在某些特定的环境下却需要从“受众者”的角度去思考，作为一个“受众者”应该明白的问自己“此时此刻，我需要的是什么”。对于一个饥寒交迫的人来说，当然更希望得到那一框鱼以解燃眉之急，后续的生存并非一定要靠钓鱼才能为继；而对于一个已经解决温饱的人来说，更希望的是掌握钓鱼的技能，以后靠自己的垂钓便能享受到美味的鱼儿。</p>

<p>作为一个“受众者”，它是利益的所得者，在相应的环境下，明明白白知道自己想要什么才是最重要的。</p>

<p>对于一个公司来说，同样适用以上的那句古话。从公司的角度来看，可以把公司当作是一个“受众者”，把公司里的员工当作“传授者”。公司处于不同的发展阶段，对员工的需求会有所不同。每年的这个时候是一个“暗流涌动”的季节，难免会给公司带来一定的挑战。针对这个挑战，对公司来说并不是一件好事，怎么可能把它说成是“受众者”呢？针对这种问题，从辩证的角度去分析它会显得合理些。</p>

<p>企业间的人才流动交流，往往都有一段时间用来重新布置及安排任务，而这个安排的任务往往因时、因势而定。</p>

<p>如果公司的一切条件都已具备，那么让员工尽量去完成手头上的项目，对于公司这个“受众者”来说的话是利益最大化的。如果没有一个后来者能够顶替任务的话，那么尽量留下一些技术文档，对于公司来说才是利益最大化的。</p>

<p>我们的公司还很年轻，目前依旧处于发展的阶段，某些方面还不是很完善。针对公司现有的状况，谈谈我个人所看到的现象。之前接替服务器端工作的时候，尝试着去看wiki上的相关文档，发现XXX留下的文档对于后来者是很有价值的，很容易了解到“如何部署服务器”、“如何运行服务器上的监控脚本”等等。终端的前任离开了，但Windows方面的工具等一些东西却是有遗失的。虽然有些东西用作测试等其它方面的使用，但它却是非常有价值的东西（可以用来分析问题，解决相应的问题，缩短调试的时间等）。</p>

<p>记得当初第一份工作的时候，前东家的合同上有这么一句话（在为公司服务期间，所编写的代码和文档的所有权归公司所有），当时我笑了，我心想“系统已经如此的稳定，我们只是解解bug，会有什么东西留下，这是不是杞人忧天了”。然而，我幼稚的想法是非常错误的。除了平时解决bug，我们还是为公司开发了一些功能模块。公司强调着“所有权”的时候，它更侧重强调了“你要为公司留下什么”。一旦有人员流动时，借助着已有的文档，新的同仁就能够很快接手工作。虽然口头上的传授也是一种方法，但口口相传往往会产生一些谬误，也容易失去一些重要的东西。</p>

<p>这让我想起了《笑傲江湖》的一个段子“岳不群的师父传授给它几招《辟邪剑谱》，并嘱咐他‘这几招功夫华山派要代代相传’。岳不群看了之后，也认为那只是平庸无奇的几招。见识了林平之耍的几招之后，觉得跟自己以前学习的那几招很相似，觉得林家的《辟邪剑谱》就是本门失传已久的武功绝学。自此以后，他就开始费劲心思的去寻找那本书。当他得到的时候，他仅花费了不长的时间就学会了其中所有的武功”。在岳不群之前，华山派的那几招功夫传了好几代，却什么也没有悟出来，究其原因缺的就是《辟邪剑谱》那本书。假设华山派没有失去那本武功秘籍，‘辟邪剑法’相信也能够跟‘紫霞神功’一样，代代相传。</p>

<p>可见古语“好记性不如烂笔头”是值得让人深思的。何况一有变动的话，“好记性”已不在公司内部，成为了不可控因素。即便凭借以往的关系能够获取帮助，但他已不存在为公司服务的义务，帮不帮完全在乎心情。终端已尝试着整理一些文档，努力去阐明系统的架构。人可能往往看不清自己，所以这里暂且不论终端。只说说Windows客户端和测试，该两项在Wiki上的文档也是相对较少的。</p>

<p>正如前面提到的，Windows方面的东西是有遗失的。目前，tuner模块的code是由Windows客户端方面维护的，至于“如何编译”、“如何烧写”、“如何更改mac地址和id”等等方面的文档是没有的。尽管只要花时间就能找到方法（这属于一种重复造轮子的行为，有文档的话，我们只要一步步操作即可），但已经会的东西我们又何必去浪费时间去研究呢？客户端的功能虽然已经完备，但也缺少文档的说明。虽然看code加上其他人员对系统的介绍，作为一个后来者也能够逐步接替该部分工作。但这就好比“岳不群不停地在那里耍大招，左冷禅在一旁观看（即便岳不群愿意这样做，左冷禅也未必能够学习到‘飞针’那一招）”那样，既费时，又不能体会其中真正的奥秘。</p>

<p>很多人并不重视测试的作用，认为测试的工作有很多人可以替代。但我不以为然，一个好的测试人员描述的不仅仅是测试的表象，更多的会指出问题的根源，往往会起到指导开发人员的作用。测试方面也很需要一些文档，而且这是很有必要的。虽然测试用例目前已经较完备，可谁来告诉后来者“如何设计同样有效的测试用例”、 “如何正确有效的提交bug（这减少了开发和测试之间一些不必要的交互）”、“如何测试该系统”呢？我承认通过“开发者在某种意义上去指导后来的测试人员”来缩短学习时间。但我并不认为这是一种有效、好的方法，开发者往往带有主观色彩，会告诉测试人员“你应该怎么做，不应该怎么做”，这往往会误导测试（按照开发讲的东西去测试，而未能发现其中深藏的问题）。测试人员就应该专注于前辈留下的文档而脱离于开发者 ，站在客户的角度去思考问题。</p>

<p>如今，需要做的并不一定是要完成某项任务，而是要一些有意义的文档。任务就好比是“鱼”，是目的；而文档就好比是“以渔”，是手段。现今公司要的是“以渔”（作为一个“受众者”是目前所能获取到的最大利益），避免未来重复的造轮子。</p>

<p>虽然这只是一个建议，但还是诚恳的希望您能慎重的考虑一下。文中难免有错误的出现，敬请谅解！</p>

<p>书于蒋村兴达苑21幢2单元401，2013年3月25日23时36分</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[略说博客]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/28/lue-shuo-bo-ke/"/>
    <updated>2013-07-28T12:29:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/28/lue-shuo-bo-ke</id>
    <content type="html"><![CDATA[<p><img src="http://www.youdao.com/help/toys/bloggadget/001/1.gif"></p>

<p>在平时搜索技术问题的时候，收藏了一些技术博客。我发现博主的所在地域、服务公司、学习背景、年龄分布都有一些特性，初步作了一些整理同大家分享。在这里只论那些搭建独立博客的博主，而不讨论那些在各大论坛上构建博客的博主。</p>

<!--more-->


<h1>博主分布图</h1>

<h2>区域分布</h2>

<p>华东以上海、杭州为主，互联网企业相对较多，其公司的开放、自由、分享的文化起到了很关键的作用；华南以深圳、广州为主；华北以北京为主；中西部以重庆、武汉、西安为主，很多是学生博主群体，学校的文化在这方面起到了很重要的作用；西南部以成都为主。</p>

<h2>公司分布</h2>

<p>阿里系最多，腾讯系次之，网易系也有不少，其它较多的是一些新兴的互联网公司（这其中很多有阿里系的身影）。从这方面可以看出，阿里的公司氛围是很不错的，大伙都有分享的精神。补充一点，阿里也分享了很多的开源项目，到github上可以找到。</p>

<h2>学校分布</h2>

<p>西安邮电大学最多，华中科技大学次之，西安电子科技大学、西安交通大学、浙江大学也有不少，其它大学相对较少。所有大学中，西邮给我的映像最好，它们的学生在Linux方面有较高的造诣，出现了很多这方面的牛人。</p>

<h2>年龄分布</h2>

<p>以20～30岁年龄段居多，属于新兴博主，大多以技术路线为主；30～40岁年龄段的博主次之，属于资深博主，不仅有丰富的技术知识，还有精彩的人生阅历及感悟方面的文章；10～20岁年龄段的相对较少，属于后起之秀，大多也以技术为主线，其中年龄最小的大概是12、13岁。很多“老人”坚持写博客6、7年以上，实在是一件不容易的事情；小博主的崛起，真正应了“后生可畏”，想想自己那个年龄段都不知道自己想要做什么，看来“前浪”很快就会被“拍死在沙滩上”。</p>

<h1>杂说</h1>

<p>曾经在QQ空间、网易、其它技术论坛上写过博客，但都因为各种各样的原因（没有专一的主题，工作的变更导致技术方向的改变，人性的懒散等等）没有坚持下来。虽然不在那些博客中写文章，偶尔还是会去看看自己之前写的东西。</p>

<p>2011年的时候决定改变一下自己，觉得应该把自己学习到的东西记录一下，与网上的朋友们分享分享，所以在CU博客上安了家。这个博客从那时到现在一直有更新，大多是个人的学习笔记及从网络上转载的文章，后续也会继续更新。</p>

<p>很不幸的是，2013年年初的时候CU博客改版了，书写博客的整体体验很差，也向管理员反应过这个事件，可并未察觉出它们有更新博客系统的迹象。慢慢的就开始不爽了！5月份的时候就基于github和Octopress搭建了一个个人独立博客，陆陆续续到7月份才构建了一个自己认为比较满意的博客。独立博客的好处在于其可定制性强，不好的地方就是对于一个小白博主来说有一定的技术难度。</p>

<p>如果你是技术狼/媛，对Linux方面有兴趣的话可以看我的 <a href="http://blog.chinaunix.net/uid/25885064.html">CU博客</a> 和 <a href="http://txgcwm.github.io/">个人独立博客</a> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于微访谈]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/27/guan-yu-wei-fang-tan/"/>
    <updated>2013-07-27T23:34:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/27/guan-yu-wei-fang-tan</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://pic002.cnblogs.com/images/2010/14032/2010111217383632.jpg" width="228" height="221" title="Place Kitten #2" ></p>

<h1>想法的初衷</h1>

<p>进入社会后，周围的事情与我们想象的并不一样，起初我们无所适从，慢慢的我们适应了这个复杂的社会。在这个适应的过程中，背负着社会和家庭的压力，或许有许多人蹉跎了岁月、消磨了意志、荒废了理想，也应该有一些人坚持不懈地行走在通往理想的道路上。有多少人还曾记得自己当初的梦想，记得或不记得都有很多的感慨。我们也常想把它记录下来，但真正提笔的时候却不知道从何处下手，所以也就放弃了。</p>

<!--more-->


<p>曾经一个同学在QQ上上传了一张“关于某某事意见签名”的单子，那时引起了强烈的反响，很多人都不曾记得有那么一回事。是的，岁月在消磨着我们的记忆。很多事情我们应该用笔把它记录下来，但多少人会使用日记把过往的经历记录下来呢？那么这个艰难的任务就交由我来处理吧，让我当一次“小史公”来记录你们走过的道路。虽然不能记录每一天的状况，但我们可以记录下一大段时间内的精彩。</p>

<p>由于行业、地域等方面的原因，交流圈变得小型化、区域化，彼此之间的交流越来越少，但我相信大家牵挂着彼此。借助这样一个机会，让大家了解一下我们的近况，增进彼此之间的认识，同时也可以让我们认识到更多的行业。</p>

<p>或许我们小有成就，认为这一切不足以拿来分享，可你的经历却可能给一些朋友带来帮助，其它朋友也可能给你带去更好的建议促你成长；或许我们过得很艰辛，这又如何，只有经历过辛酸才能品味美好。无论怎样，我们都可能得获取到宝贵的建议，让我们越走越好。</p>

<h1>执行流程</h1>

<p>按照初步的设计，本次微访谈的大概流程如下：</p>

<ol>
<li>向受访者发出要求，朋友们也可以主动告知我希望接受这样一个访谈；</li>
<li>如果接受的话，请告知我目前你所从事的事业、想法等等基本信息，我根据获取到的信息设计一些问题；</li>
<li>可以选择以邮件回复的方式或跟我以网络通讯工具交谈的方式来完成微访谈；</li>
<li>整理微访谈的问答以博文的形式发出，问答中所使用的署名采用受访者的网名，如果不同意可以不发表。</li>
</ol>


<h1>后续计划</h1>

<p>或许很多人不屑于这样的一次访谈，认为一个小小人物不值得记述，但我认为小人物的故事同样精彩。若干年后，或许我们成功了，又或许依旧平凡，回过头看看我们又会有怎样的感慨呢？所以，我希望两年后再做一次微访谈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加表格]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/27/octopresstian-jia-biao-ge/"/>
    <updated>2013-07-27T15:08:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/27/octopresstian-jia-biao-ge</id>
    <content type="html"><![CDATA[<p>Markdown语法为“方便在网上读文章、写文章、修改文章更容易”这一目标而生。它不是HTML的替代品，也不是为了终结HTML。它的语法非常简单，只相当于HTML标签的一个非常非常小的子集。它并非是为了更容易输入HTML标签而创造一种新语法。HTML是一种适合发表的格式；而Markdown是一种书写格式。正因如此，Markdown的格式化语法仅需解决用纯文本表达的问题。</p>

<p>下面的这个例子是在一篇Markdown文章中添加一个HTML表格：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;table&gt;
</span><span class='line'>    &lt;tr&gt;
</span><span class='line'>        &lt;td&gt;Column1&lt;/td&gt;
</span><span class='line'>        &lt;td&gt;Column2&lt;/td&gt;
</span><span class='line'>    &lt;/tr&gt;
</span><span class='line'>    &lt;tr&gt;
</span><span class='line'>        &lt;td&gt;foo&lt;/td&gt;
</span><span class='line'>        &lt;td&gt;foo&lt;/td&gt;
</span><span class='line'>    &lt;/tr&gt;
</span><span class='line'>&lt;/table&gt;    </span></code></pre></td></tr></table></div></figure>


<!--more-->




<table>
    <tr>
        <td>Column1</td>
        <td>Column2</td>
    </tr>
    <tr>
        <td>foo</td>
        <td>foo</td>
    </tr>
</table>


<p></p>

<p>也可以使用markdown的扩展语法添加一个表格：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Column1     | Column2      
</span><span class='line'>----------- | ------------ 
</span><span class='line'>foo         | foo</span></code></pre></td></tr></table></div></figure>


<p>但使用html语法做一个表格很麻烦，而且看起来也不是很美观。使用markdown语法做出来的表格却没有边框。所以需要重新做一些设定，以下为设置和更改的方法。</p>

<p>Step 1. 在source/stylesheets/目录下增加data-table.css文件，添加如下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* + table {
</span><span class='line'>    border-style:solid;
</span><span class='line'>    border-width:1px;
</span><span class='line'>    border-color:#e7e3e7;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>* + table th, * + table td {
</span><span class='line'>    border-style:dashed;
</span><span class='line'>    border-width:1px;
</span><span class='line'>    border-color:#e7e3e7;
</span><span class='line'>    padding-left: 3px;
</span><span class='line'>    padding-right: 3px;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>* + table th {
</span><span class='line'>    border-style:solid;
</span><span class='line'>    font-weight:bold;
</span><span class='line'>    background: url("/images/noise.png?1330434582") repeat scroll left top #F7F3F7;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>* + table th[align="left"], * + table td[align="left"] {
</span><span class='line'>    text-align:left;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>* + table th[align="right"], * + table td[align="right"] {
</span><span class='line'>    text-align:right;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>* + table th[align="center"], * + table td[align="center"] {
</span><span class='line'>    text-align:center;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Step 2. 添加link到head.html中，在source/_includes/head.html文件中插入如下语句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link href="http://txgcwm.github.io/stylesheets/data-table.css" media="screen, projection" rel="stylesheet" type="text/css" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>重新设定后，表格样式如下：</p>

<table>
<thead>
<tr>
<th>Column1     </th>
<th> Column2      </th>
</tr>
</thead>
<tbody>
<tr>
<td>foo         </td>
<td> foo</td>
</tr>
</tbody>
</table>


<br></br>


<p><big>参考文章:</big> <br/>
<a href="http://samwize.com/2012/09/24/octopress-table-stylesheet/">Octopress Table Stylesheet</a><br/>
<a href="http://jhjguxin.github.io/blog/2012/04/24/markdownyu-fa/">Markdown语法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux操作系统下的MAN命令]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/27/linuxcao-zuo-xi-tong-xia-de-manming-ling/"/>
    <updated>2013-07-27T13:27:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/27/linuxcao-zuo-xi-tong-xia-de-manming-ling</id>
    <content type="html"><![CDATA[<p>Unix/Linux下的man命令可以查询常用的命令和函数。可是只知道用“man 函数名”来查询会遇到很多问题，比如<code>man read</code>，想看的是ANSI C中stdio的read函数原型和说明，出来的却是BASH命令的说明。这是怎么回事呢？原来read本身是man命令的一个参数，这样就会以为你要使用read的功能，而不是查看read函数。那么要怎样查看read函数呢?可以使用<code>man 2 read</code>或者是<code>man 3 read</code>查看。</p>

<h1>分卷号</h1>

<p>以上指令的中间数字是什么意思呢？是man的分卷号，所有的手册页都属于一个特定的分卷号，用一个字符来表示。Linux下最通用的分卷号及其名称和说明如下表所示。</p>

<table>
<thead>
<tr>
<th>分卷号         </th>
<th>名称 </th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td> 用户命令     </td>
<td> 可由任何人启动  </td>
</tr>
<tr>
<td>2</td>
<td> 系统调用     </td>
<td> 由内核提供的函数  </td>
</tr>
<tr>
<td>3</td>
<td> 例程        </td>
<td> 库函数    </td>
</tr>
<tr>
<td>4</td>
<td> 设备        </td>
<td> /dev目录下的特殊文件   </td>
</tr>
<tr>
<td>5</td>
<td> 文件格式描述  </td>
<td> 例如/etc/passwd   </td>
</tr>
<tr>
<td>6</td>
<td> 游戏        </td>
<td> 略  </td>
</tr>
<tr>
<td>7</td>
<td> 杂项        </td>
<td> 例如宏命令包、惯例等  </td>
</tr>
<tr>
<td>8</td>
<td> 系统管理员工具</td>
<td> 只能由root启动  </td>
</tr>
<tr>
<td>9</td>
<td> 其他（Linux特定的）</td>
<td> 用来存放内核例行程序的文档  </td>
</tr>
<tr>
<td>n</td>
<td> 新文档           </td>
<td> 可能要移到更适合的领域  </td>
</tr>
<tr>
<td>o</td>
<td> 老文档           </td>
<td> 可能会在一段期限内保留  </td>
</tr>
<tr>
<td>l</td>
<td> 本地文档          </td>
<td> 与特定系统有关的  </td>
</tr>
</tbody>
</table>


<!--more-->


<br></br>


<h1>常用参数和用法</h1>

<ul>
<li>打开所有领域内的同名帮助，例如man fam，首先会进入一个fam(1M)的命令版fam帮助，再按q键就会进入FAM(3X)，库函数版的帮助。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man -a cmd</span></code></pre></td></tr></table></div></figure>


<ul>
<li>显示所有cmd的所有手册文件的路径，如<code>man -aw fam</code>指令。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man -aw cmd</span></code></pre></td></tr></table></div></figure>


<ul>
<li>直接指定特定领域内搜索手册页，如<code>man 3 fam</code>直接进入库函数版的帮助。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man 领域代号 cmd</span></code></pre></td></tr></table></div></figure>


<ul>
<li>指定手册文件的搜索路径，如<code>man -M /home/mysql/man mysql</code>显示的就是你安装的mysql的帮助，而不是系统自带的旧版mysql的帮助。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man -M cmd</span></code></pre></td></tr></table></div></figure>


<ul>
<li>把man手册信息输出到文本文件。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man cmd | col -b &gt; cmd.txt</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看特定语言版本的手册页，显示特定语言manpage文件的路径。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ LANG=语言代号
</span><span class='line'>$ man -w cmd</span></code></pre></td></tr></table></div></figure>


<p>例如要查看mplayer的中文man路径：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ LANG=en_US.UTF-8
</span><span class='line'>$ man -w mplayer
</span><span class='line'>/usr/share/man/zh/man1/mplayer.1.gz</span></code></pre></td></tr></table></div></figure>


<h1>配置文件/etc/man.config</h1>

<p>如果不想每次<code>man cmd</code>都要用<code>-M</code>指定路径，那么可以通过修改配置文件，添加内容如：</p>

<pre><code>MANPATH /home/mysql/man
</code></pre>

<p>man在各领域的搜索次序可以通过修改以下设置：</p>

<pre><code>MANSECT 1:8:2:3:4:5:6:7:9:tcl:n:l:p:o
</code></pre>

<p>不过，一般不推荐修改man的配置文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[奇谋之士蒯通]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/26/qi-mou-zhi-shi-kuai-tong/"/>
    <updated>2013-07-26T21:52:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/26/qi-mou-zhi-shi-kuai-tong</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://pic.baike.soso.com/p/20120927/20120927185828-406438040.jpg" width="210" height="248" title="Place Kitten #2" ></p>

<p>《史记》中有各式各样的人物，司马迁却没有给奇谋之士蒯通单独列传，留下那不平凡的事迹给后人称颂。关于蒯通这个人的事迹，也只能从其他人的列传里了解到他，对于他的谋略以及对天下形势的远见都令人佩服。</p>

<p>如此有才华的人，却为何没有自己的列传，只能出现在他人的列传之中？原因很简单，司马迁写书的时代是大汉王朝，而蒯通却在那个朝代犯下了特大的错误。那么这么一个人到底有什么样的才华呢？且让我们看看他的一些事迹。</p>

<!--more-->


<h1>善待秦吏</h1>

<p>他还是在范阳的时候，那时也是很不得志。山东群起的农民大军攻入了他所在的县城，并且捕捉了县令，由于长期受到秦国法律的压制，很多人都建议处死县令以快人心。这样看来，也是情理之中！可这时他站了出来，极力反对这样做，认为这样做是极其愚蠢的。</p>

<p>“县令之所以那么做，只是按照秦国的法律办事，如果没有照办的话，他就会受到法律的惩罚。将军认为自己的军队是要听从统帅的命令，还是自作主张。如果将军认为服从命令是有必要的话，那么他作为一个秦国的官员是很尽职的。将军执意要处死一个遵从命令的士兵，这种事能不让人心寒吗？在残酷的秦法之下，他也是一个受害者。恰恰相反，将军要厚待县令，尽管他之前所做的一切近乎残忍。如果你杀了他的话，秦国其它的县令听到了这个消息后又会怎么想，他们看不到希望就只会奋死反抗，那时将军有把握战胜他们吗？秦王专政确实不得民心，可是他强大的军队是值得将军深思的。”将军遵从了他的意见，没有杀那个县令，并且厚待了他，让他到未攻下的县城郊外游玩，以示义军对过去的错误既往不咎。看到这一幕，秦国的县令纷纷投城，这就是所谓的不战而屈人之兵啊！</p>

<p>之后不知道他为什么没有留在那个将军的麾下，或许他认为那个将军无才吧。也难怪，我竭力在记忆中去寻找那个将军的名字，可是我就是想不起来。他作出了一个抉择，去投靠了韩信。或许投靠韩信也是一个错误，韩信的优柔寡断注定了蒯通的命运是悲哀的。</p>

<h1>三分天下</h1>

<p>汉王被楚围攻，不能逃脱，此时求助于韩信，蒯通说齐王：“今天下三分，而大王已经得到了一份，现在就看大王你的决定了。要是你投靠了汉王，汉王就会取得天下。那时你的死期也就到了，之所以你现在还活得好好的是因为天下还有一个楚王存在，而你就是他的克星，现在留着你是很有价值的。你要是投靠项王，项王就会取得天下，虽然项王不用大才，你却可以暂时保全性命。要是你选择谁都不帮的话，从此以后三分天下，谁都不敢先动。凭借着齐国的财富，可以修炼兵甲，鼓励农耕，不出几年齐国就可以东进，一举歼灭汉楚大军。那时，即便他们联手也无济于事。将军的丰功伟业也将会被世人传颂，还望将军慎思！”</p>

<p>然而，韩信并没有接纳他的意见，摆出了那一大堆仁义高论，搬兵去救刘邦了。</p>

<h1>各为其主</h1>

<p>蒯通给自己埋下了一个杀头的伏笔，他竟然劝韩信造反：“虽然天下已经太平，可是将军功高盖主，汉王坐在龙椅上会安心吗？把你除掉只是暂时没有一个合适的理由，将军趁现在世局还不太稳定要早做决定啊！时间一久很多部下就可能被汉王给收买了，那时将军想再起兵就难上加难了。”可是，韩信再一次没有听从他的意见，最终落得个身首异处的下场。</p>

<p>韩信在最后的留言中有这么一句“信言恨不用蒯通计”。在清除同党的时候，刘邦特别强调一定要活捉蒯通。刘邦见到他就大骂“是不是你教淮阴侯造反的”，蒯通回答的也干脆“是的，就是我教他的，他不用我的计策，所以被杀了；要是他用的话，大王你能够杀了他吗&#8221;。刘邦很生气，直接来了这么一句“亨之”。这时，他喊冤了。汉王很是好奇“是你教韩信造反的，你自己都承认了，亨了你，有何冤枉的”。蒯通辩道&#8221;秦国无道，天下的人都反对他；秦王失鹿，天下的人都追逐它。最终却被大王得到了。曾经那么多人为了得到它，都反对大王，难道大王真的要把他们都亨了吗？况且大王现在很多精锐部队都曾反对过你，难道你连他们都要亨了吗（言下之意是你杀了他们你靠谁去，你就不怕他们联合起来造反吗，到时候就不知道谁亨谁了）”。当然，他也没有忘了夸刘邦两句“当是时，臣唯独知韩信，非知陛下也”。最后，刘邦仔细想想还是放了蒯通。如果蒯通没有足够的谋略，他能够从虎口脱身吗？</p>

<p>之所以他没有被写入列传里，就是他劝说韩信造反。这件事他没有做错，错的是韩信没有采纳，或者说他在某种意义上选错了主子。司马迁要是敢给他列传，或许还要受一次腐刑，汉武帝会同意他的《史记》出版吗？你给他列传，这不是明摆着让天下人造我大汉的反吗，这事怎么能忍。</p>

<p>《史记》毕竟是司马迁一生的心血，他不能那么做，只能舍弃他了。舍弃你一个，而其他千万的大才会被历史记住！所以，只能委屈你了，蒯通&hellip;&hellip;.要是你不生在汉朝成立的时代，要是在战国，那么你的事迹在今天也会被很多人传颂。虽然对你我所知道的很少，但这一些已经足够，足以显现你的大智大勇！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下iptables防火墙原理及使用]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/25/linuxxia-iptablesfang-huo-qiang-yuan-li-ji-shi-yong/"/>
    <updated>2013-07-25T23:36:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/25/linuxxia-iptablesfang-huo-qiang-yuan-li-ji-shi-yong</id>
    <content type="html"><![CDATA[<p>netfilter/iptables（简称为iptables）组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换（NAT）等功能。iptables和netfilter的关系是一个很容易让人搞不清的问题：很多人知道iptables却不知道netfilter，其实iptables（位于/sbin目录下）只是Linux防火墙的管理工具而已，真正实现防火墙功能的是netfilter（它是Linux内核中实现包过滤的内部结构）。</p>

<h1>iptables传输数据包的过程</h1>

<p><img src="http://txgcwm.github.io/images/2013/7/iptables/flow.png" alt=" flow " /></p>

<!--more-->


<ol>
<li>当一个数据包进入网卡时，它首先进入PREROUTING链，内核根据数据包目的ip地址判断是否需要转送出去。</li>
<li>如果数据包就是进入本机的，它就会沿着上图所指方向向下移动，到达INPUT链。数据包到了INPUT链后，任何进程都会收到它。本机上运行的程序可以发送数据包，这些数据包会经过OUTPUT链，然后到达POSTROUTING链输出。</li>
<li>如果数据包是要转发出去的，且内核允许转发，数据包就会如图所示向右移动，经过FORWARD链，然后到达POSTROUTING链输出。</li>
</ol>


<h1>规则表和规则链</h1>

<p>iptables采用“表”和“链”的分层结构。表（tables）提供特定的功能，iptables内置了4个表，即Filter表、Nat表、Mangle表和Raw表，分别用于实现包过滤、网络地址转换、包重构(修改)和数据跟踪处理。链（chains）是数据包传播的路径，每一条链其实就是众多规则中的一个检查清单，每一条链中可以有一条或数条规则。当一个数据包到达一个链时，iptables就会从链中第一条规则开始检查，看该数据包是否满足规则所定义的条件。如果满足，系统就会根据该条规则所定义的方法处理该数据包，否则iptables将继续检查下一条规则。如果该数据包不符合链中任一条规则，iptables就会根据该链预先定义的默认策略来处理数据包。</p>

<p><img src="http://txgcwm.github.io/images/2013/7/iptables/table.png" alt=" table " /></p>

<h2>规则表</h2>

<p>iptables有4个规则表，其之间的优先顺序为Raw&mdash;-Mangle&mdash;-Nat&mdash;-Filter。</p>

<ol>
<li><p>Filter表有三个链：INPUT、FORWARD、OUTPUT</p>

<p> 作用：过滤数据包<br/>
 内核模块：iptables_filter</p></li>
<li><p>Nat表有三个链：PREROUTING、POSTROUTING、OUTPUT</p>

<p> 作用：用于网络地址转换（IP、端口） <br/>
 内核模块：iptable_nat</p></li>
<li><p>Mangle表有五个链：PREROUTING、POSTROUTING、INPUT、OUTPUT、FORWARD</p>

<p> 作用：修改数据包的服务类型、TTL、并且可以配置路由实现QOS   <br/>
 内核模块：iptable_mangle</p></li>
<li><p>Raw表有两个链：OUTPUT、PREROUTING</p>

<p> 作用：决定数据包是否被状态跟踪机制处理<br/>
 内核模块：iptable_raw</p></li>
</ol>


<h2>规则链</h2>

<ol>
<li>INPUT——进来的数据包应用此规则链中的策略。</li>
<li>OUTPUT——外出的数据包应用此规则链中的策略。</li>
<li>FORWARD——转发数据包时应用此规则链中的策略。</li>
<li>PREROUTING——对数据包作路由选择前应用此链中的规则，所有的数据包进来的时侯都先由这个链处理。</li>
<li>POSTROUTING——对数据包作路由选择后应用此链中的规则，所有的数据包出来的时侯都先由这个链处理。</li>
</ol>


<p>规则链之间的优先顺序分三种情况：</p>

<ol>
<li><p>入站数据流向</p>

<p> 从外界到达防火墙的数据包，先被PREROUTING规则链处理（是否修改数据包地址等），之后会进行路由选择（判断该数据包应该发往何处），如果数据包的目标主机是防火墙本机（比如说Internet用户访问防火墙主机中的web服务器的数据包），那么内核将其传给INPUT链进行处理（决定是否允许通过等），通过以后再交给系统上层的应用程序（比如Apache服务器）进行响应。</p></li>
<li><p>转发数据流向</p>

<p> 来自外界的数据包到达防火墙后，首先被PREROUTING规则链处理，之后会进行路由选择，如果数据包的目标地址是其它外部地址（比如局域网用户通过网关访问QQ站点的数据包），则内核将其传递给FORWARD链进行处理（是否转发或拦截），然后再交给POSTROUTING规则链（是否修改数据包的地址等）进行处理。</p></li>
<li><p>出站数据流向</p>

<p> 防火墙本机向外部地址发送的数据包（比如在防火墙主机中测试公网DNS服务器时），首先被OUTPUT规则链处理，之后进行路由选择，然后传递给POSTROUTING规则链（是否修改数据包的地址等）进行处理。</p></li>
</ol>


<h1>管理和设置iptables规则</h1>

<p>规则（rules）其实就是网络管理员预定义的条件，规则一般的定义为“如果数据包头符合这样的条件，就这样处理这个数据包”。规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包与规则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。配置防火墙的主要工作就是添加、修改和删除这些规则。</p>

<p><img src="http://txgcwm.github.io/images/2013/7/iptables/cmd.png" alt=" cmd " /></p>

<p><img src="http://txgcwm.github.io/images/2013/7/iptables/filter.png" alt=" filter " /></p>

<h2>iptables的基本语法格式</h2>

<p>iptables [-t 表名] 命令选项 ［链名］ ［条件匹配］ ［-j 目标动作或跳转］</p>

<p>说明：表名、链名用于指定iptables命令所操作的表和链，命令选项用于指定管理iptables规则的方式（比如插入、增加、删除、查看等）；条件匹配用于指定对符合什么样条件的数据包进行处理；目标动作或跳转用于指定数据包的处理方式（比如允许通过、拒绝、丢弃、跳转给其它链处理）。</p>

<p>iptables命令的管理控制选项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-A 在指定链的末尾添加（append）一条新的规则 
</span><span class='line'>-D 删除（delete）指定链中的某一条规则，可以按规则序号和内容删除 
</span><span class='line'>-I 在指定链中插入（insert）一条新的规则，默认在第一行添加 
</span><span class='line'>-R 修改、替换（replace）指定链中的某一条规则，可以按规则序号和内容替换 
</span><span class='line'>-L 列出（list）指定链中所有的规则进行查看
</span><span class='line'>-E 重命名用户定义的链，不改变链本身 
</span><span class='line'>-F 清空（flush） 
</span><span class='line'>-N 新建（new-chain）一条用户自己定义的规则链 
</span><span class='line'>-X 删除指定表中用户自定义的规则链（delete-chain） 
</span><span class='line'>-P 设置指定链的默认策略（policy）
</span><span class='line'>-Z 将所有表的所有链的字节和数据包计数器清零 
</span><span class='line'>-n 使用数字形式（numeric）显示输出结果 
</span><span class='line'>-v 查看规则表详细信息（verbose）的信息 
</span><span class='line'>-V 查看版本(version) 
</span><span class='line'>-h 获取帮助（help）</span></code></pre></td></tr></table></div></figure>


<h2>防火墙处理数据包的四种方式</h2>

<ol>
<li>ACCEPT：允许数据包通过。</li>
<li>DROP：直接丢弃数据包，不给任何回应信息</li>
<li>REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息。</li>
<li>LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则。</li>
</ol>


<h2>防火墙规则的保存与恢复</h2>

<p>iptables-save把规则保存到文件中（生成保存规则的文件名为/etc/sysconfig/iptables），再由rc.d目录下的脚本（/etc/rc.d/init.d/iptables）自动装载。使用<code>iptables-save &gt; /etc/sysconfig/iptables</code>命令来保存规则，也可以用<code>service iptables save</code>指令把规则自动保存起来。当计算机启动时，rc.d下的脚本将用命令<code>iptables-restore</code>调用这个文件，从而就自动恢复了规则。</p>

<h2>防火墙常用策略</h2>

<ul>
<li>拒绝进入防火墙的所有ICMP协议数据包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -I INPUT -p icmp -j REJECT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>允许防火墙转发除ICMP协议以外的所有数据包，使用“！”可以将条件取反。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -p ! icmp -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>拒绝转发来自192.168.1.10主机的数据，允许转发来自192.168.0.0/24网段的数据。要把拒绝的放在前面，不然就不起作用了。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -s 192.168.1.11 -j REJECT
</span><span class='line'>$ iptables -A FORWARD -s 192.168.0.0/24 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>丢弃从外网接口（eth1）进入防火墙本机的源地址为私网地址的数据包。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A INPUT -i eth1 -s 192.168.0.0/16 -j DROP
</span><span class='line'>$ iptables -A INPUT -i eth1 -s 172.16.0.0/12 -j DROP
</span><span class='line'>$ iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP</span></code></pre></td></tr></table></div></figure>


<ul>
<li>封堵网段（192.168.1.0/24），两小时后解封。这个策略可以借助crond计划任务来完成。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -I INPUT -s 10.20.30.0/24 -j DROP
</span><span class='line'>$ iptables -I FORWARD -s 10.20.30.0/24 -j DROP
</span><span class='line'>$ at now 2 hours at&gt; iptables -D INPUT 1 at&gt; iptables -D FORWARD 1
</span><span class='line'>
</span><span class='line'>[1]   Stopped     at now 2 hours</span></code></pre></td></tr></table></div></figure>


<ul>
<li>只允许管理员从202.13.0.0/16网段使用SSH远程登录防火墙主机。比较适合对设备进行远程管理时使用，比如位于分公司中的SQL服务器需要被总公司的管理员管理时。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A INPUT -p tcp --dport 22 -s 202.13.0.0/16 -j ACCEPT
</span><span class='line'>$ iptables -A INPUT -p tcp --dport 22 -j DROP</span></code></pre></td></tr></table></div></figure>


<ul>
<li>允许本机开放从TCP端口20-1024提供的应用服务。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A INPUT -p tcp --dport 20:1024 -j ACCEPT
</span><span class='line'>$ iptables -A OUTPUT -p tcp --sport 20:1024 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>允许转发来自192.168.0.0/24局域网段的DNS解析请求数据包。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -s 192.168.0.0/24 -p udp --dport 53 -j ACCEPT
</span><span class='line'>$ iptables -A FORWARD -d 192.168.0.0/24 -p udp --sport 53 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>禁止其他主机ping防火墙主机，但是允许从防火墙上ping其他主机</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -I INPUT -p icmp --icmp-type Echo-Request -j DROP
</span><span class='line'>$ iptables -I INPUT -p icmp --icmp-type Echo-Reply -j ACCEPT
</span><span class='line'>$ iptables -I INPUT -p icmp --icmp-type destination-Unreachable -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>禁止转发来自MAC地址为00：0C：29：27：55：3F的主机的数据包。iptables中使用“-m 模块关键字”的形式调用显示匹配。这里用“-m mac &mdash;mac-source”来表示数据包的源MAC地址。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -m mac --mac-source 00:0c:29:27:55:3F -j DROP</span></code></pre></td></tr></table></div></figure>


<ul>
<li>允许防火墙本机对外开放TCP端口20、21、25、110以及被动模式FTP端口1250-1280，这里用“-m multiport &mdash;dport”来指定目的端口及范围。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A INPUT -p tcp -m multiport --dport 20,21,25,110,1250:1280 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>禁止转发源IP地址为192.168.1.20-192.168.1.99的TCP数据包。此处用“-m iprange &mdash;src-range”指定IP范围。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -p tcp -m iprange --src-range 192.168.1.20-192.168.1.99 -j DROP</span></code></pre></td></tr></table></div></figure>


<ul>
<li>禁止转发与正常TCP连接无关的非&mdash;syn请求数据包。“-m state”表示数据包的连接状态，“NEW”表示与任何连接无关。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A FORWARD -m state --state NEW -p tcp ! --syn -j DROP</span></code></pre></td></tr></table></div></figure>


<ul>
<li>拒绝访问防火墙的新数据包，但允许响应连接或与已有连接相关的数据包。“ESTABLISHED”表示已经响应请求或者已经建立连接的数据包，“RELATED”表示与已建立的连接有相关性的，比如FTP数据连接等。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -A INPUT -p tcp -m state --state NEW -j DROP
</span><span class='line'>$ iptables -A INPUT -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>只开放本机的web服务（80）、FTP(20、21、20450-20480)，放行外部主机发住服务器其它端口的应答数据包，将其他入站数据包均予以丢弃处理。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iptables -I INPUT -p tcp -m multiport --dport 20,21,80 -j ACCEPT
</span><span class='line'>$ iptables -I INPUT -p tcp --dport 20450:20480 -j ACCEPT
</span><span class='line'>$ iptables -I INPUT -p tcp -m state --state ESTABLISHED -j ACCEPT
</span><span class='line'>$ iptables -P INPUT DROP</span></code></pre></td></tr></table></div></figure>


<h1>参考文章</h1>

<ul>
<li><a href="http://netfilter.org/">netfilter</a></li>
<li><a href="http://man.chinaunix.net/network/iptables-tutorial-cn-1.1.19.html">Iptables 指南 1.1.19</a>　</li>
<li><a href="http://blog.csdn.net/thmono/archive/2010/04/08/5462043.aspx">iptable 笔记</a></li>
<li><a href="http://netsecurity.51cto.com/art/200512/14457.htm">网络安全频道</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_40ba724c0100jz12.html">iptables_2</a></li>
<li><a href="http://qiliuping.blog.163.com/blog/static/1023829320105245337799/">netfilter/iptables全攻略</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[astyle格式化代码]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/24/astylege-shi-hua-dai-ma/"/>
    <updated>2013-07-24T18:36:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/24/astylege-shi-hua-dai-ma</id>
    <content type="html"><![CDATA[<p>astyle是一个开源工具，它可以方便的将代码格式化成自己想要的样式而不必人工修改。可以在终端下输入指令<code>sudo apt-get install astyle</code>安装，也可以到 <a href="http://astyle.sourceforge.net/">这里</a> 下载源码后自己编译安装。</p>

<p>下面介绍一下astyle的简单使用。例如有以下的源码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{int i;printf("Just a test!\n");for(i=0;i&lt;10;++i)printf("%d\n",i);}return 0;}</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>然后在终端下输入以下指令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ astyle test1.c</span></code></pre></td></tr></table></div></figure>


<p>效果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>    int i;
</span><span class='line'>    printf("Just a test!\n");
</span><span class='line'>    for(i=0; i&lt;10; ++i) {
</span><span class='line'>        printf("%d\n",i);
</span><span class='line'>    }
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>当然也可以加上一些选项，例如“astyle &mdash;style=bsd test1.c”，“ astyle &mdash;style=gnu test1.c”等等。</p>

<p>在vim中的命令模式下，可以使用下面的某一种方式来格式化代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%!astyle (simple case - astyle default mode is C/C++)</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%!astyle --mode=c --style=ansi -s2 (ansi C++ style, use two spaces per indent level)</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1,40!astyle --mode=c --style=ansi (ansi C++ style, filter only lines 1-40)</span></code></pre></td></tr></table></div></figure>


<p>在格式化完代码后，会生成一个后缀为orig的文件，格式化完成之后将它们删除。为方便使用，可以把它写成一个脚本，代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/bash
</span><span class='line'>
</span><span class='line'>for f in $(find . -name '*.c' -or -name '*.cpp' -or -name '*.h' -type f)
</span><span class='line'>do
</span><span class='line'>    astyle $f
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'># after formate the code,we need to rm '*.orig' files 
</span><span class='line'>for f in $(find . -name '*.orig' -type f)
</span><span class='line'>do
</span><span class='line'>    rm $f
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to resolve "error opening terminal Linux"]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/24/how-to-resolve-error-opening-terminal-linux/"/>
    <updated>2013-07-24T18:33:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/24/how-to-resolve-error-opening-terminal-linux</id>
    <content type="html"><![CDATA[<p>Linux环境下，编译嵌入式系统时会用到<code>make menuconfig</code>或<code>make config</code>命令，这些命令通常会使用ncurses库，如果ncurses库没有安装设置正确，可能出现如下的错误信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>error opening terminal Linux
</span><span class='line'>error opening terminal xterm
</span><span class='line'>error opening terminal vt100
</span><span class='line'>error opening terminal vt102
</span><span class='line'>error opening terminal unknown
</span><span class='line'>error opening terminal cgywin
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>可以按照以下两步解决问题：</p>

<ol>
<li>首先要确定ncurses库是否已经正确安装。在Debian或Ubuntu上，可以用<code>dpkg -l | grep ncurses</code>查看ncurses库是否已安装。</li>
<li>如果ncurses已经安装了，需要查看TERM和TERMINFO两个环境变量是否已经设置正确。如果没有设置正确，需要设置为正确的值。</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $TERM
</span><span class='line'>$ echo $TERMINFO</span></code></pre></td></tr></table></div></figure>


<p>关于TERMINFO, 应设置为terminfo的路径，比如/usr/share/terminfo或者/lib/terminfo。查看terminfo的存储位置用以下指令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ whereis terminfo
</span><span class='line'>terminfo: /etc/terminfo /lib/terminfo /usr/share/terminfo /usr/share/man/man5/terminfo.5.gz</span></code></pre></td></tr></table></div></figure>


<p>查看terminfo目录下是否保存了终端信息文件：其中通常分为a, b, c, d&hellip;z这些字母目录，每个目录中包含了以该字母开头的term信息。比如vt100放在&#8221;v&#8221;目录中。我们需要的term必须在对应的目录中存在term信息。确定这些信息后，就可以设置TERM和TERMINFO信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export TERM=vt100
</span><span class='line'>$ export TERMINFO=/usr/share/terminfo</span></code></pre></td></tr></table></div></figure>


<p>上面的设置必须保证/usr/share/terminfo中存在term信息，且/usr/share/terminfo/v/vt100是存在的。关于TERM的设置，有可能需要设置成Linux，vt100-putty等不同的TERM。Linux通常用于Linux控制台，vt100-putty顾名思义是使用putty远程登录的vt100终端。</p>

<p>以下是在Ubuntu12.10环境下，解决了此问题后TERM和TERMINFO两个环境变量的值。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $TERM
</span><span class='line'>xterm
</span><span class='line'>$ echo $TERMINFO
</span><span class='line'>/lib/terminfo/</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下安装SublimeText2及其插件]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/23/ubuntuxia-an-zhuang-sublimetext2ji-qi-cha-jian/"/>
    <updated>2013-07-23T22:33:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/23/ubuntuxia-an-zhuang-sublimetext2ji-qi-cha-jian</id>
    <content type="html"><![CDATA[<p>Sublime Text 2是一个轻量、简洁、高效、跨平台的编辑器，方便的配色以及兼容vim快捷键等各种优点博得了很多前端开发人员的喜爱。Sublime Text 2基本上是共享软件，免费版和收费版基本无区别，只是偶尔会弹框让你去购买，这个基本不影响使用。</p>

<h1>软件安装</h1>

<p>Ubuntu下安装Sublime Text 2有两种方式：指令安装和直接下载安装。</p>

<h2>指令安装</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:webupd8team/sublime-text-2
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install sublime-text-2</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>直接下载安装</h2>

<p>从 <a href="http://www.sublimetext.com/2">这里</a>下载所需要的版本，然后解压文件到安装目录。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo tar -jxvf Sublime\ Text\ 2.0.1.tar.bz2 -C /usr/local/</span></code></pre></td></tr></table></div></figure>


<h1>在applications菜单中创建快捷方式</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo gedit /usr/share/applications/sublimetext.desktop 
</span><span class='line'>
</span><span class='line'>[Desktop Entry]
</span><span class='line'>Encoding=UTF-8
</span><span class='line'>Name=Sublime Text
</span><span class='line'>Comment=Sublime Text
</span><span class='line'>Exec=/usr/local/SublimeText/sublime_text
</span><span class='line'>Icon=/usr/local/SublimeText/Icon/48x48/sublime_text.png
</span><span class='line'>Terminal=false
</span><span class='line'>StartupNotify=true
</span><span class='line'>Type=Application
</span><span class='line'>Categories=Application;Development;</span></code></pre></td></tr></table></div></figure>


<h1>安装插件</h1>

<p>安装Sublime text 2插件也有两种方法：直接安装和使用Package Control组件安装。</p>

<h2>直接安装</h2>

<p>可以直接下载安装包解压缩到Packages目录（菜单->preferences->packages）。</p>

<h2>使用Package Control组件安装</h2>

<p>也可以先安装package control组件，然后直接在线安装：</p>

<ul>
<li>按Ctrl + `调出console ，其中`是键盘左上角那个符号。</li>
<li>粘贴以下代码到底部命令行并回车。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重启Sublime Text 2。</li>
<li>如果在Perferences->package settings中看到package control这一项，则安装成功。 如果这种方法不能安装成功，可以到 <a href="http://wbond.net/sublime_packages/package_control/installation">这里</a> 下载文件手动安装。</li>
</ul>


<p>用Package Control安装插件的方法：a、按下<code>Ctrl+Shift+P</code>调出命令面板；b、输入<code>install</code>调出Install Package选项并回车，然后在列表中选中要安装的插件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加中文标签功能]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/21/octopresstian-jia-zhong-wen-biao-qian-gong-neng/"/>
    <updated>2013-07-21T11:02:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/21/octopresstian-jia-zhong-wen-biao-qian-gong-neng</id>
    <content type="html"><![CDATA[<p>Octopress有自带的分类，详情请见 <a href="http://octopress.org/docs/plugins/category-generator/">官方文档</a> 。<code>_config.yml</code>中配置项如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>category_dir: blog/categories
</span><span class='line'>category_title_prefix: "Category: "</span></code></pre></td></tr></table></div></figure>


<p>然后添加类似<code>categories: [Ruby&amp;Rails]</code>或<code>categories: [Ruby&amp;Rails，C/C++]</code>的分类标签配置到每个<code>_posts/*.markdown</code>文件头中，示例如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "Octopress添加中文标签功能"
</span><span class='line'>date: 2013-07-21 11:02
</span><span class='line'>comments: true
</span><span class='line'>categories: [Ruby&Rails,Octopress]
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h1>添加分类侧边栏并支持中文</h1>

<p>尽管Octopress有自带的分类，但它并不支持中文，如果你在文章中定义了中文分类，那么点击的时候会链接到404页面。事实上，这个分类功能是通过plugins/category_generator.rb来实现，所以只要对该文件进行适当的修改和作一些其它的配置就可以提供中文分类的支持。</p>

<ul>
<li>category_generator.rb的修改我直接使用 <a href="https://github.com/denjones/denjones.github.com/blob/source/plugins/category_generator.rb">这个</a> 文件作了替换，然后作一些细微的修改。</li>
</ul>


<p>SPRabbit(超科学兔耳中队)的 <a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">修改方法</a> 是重新定义分类标签在文章中的格式，例如用<code>中文分类标签名{英文别名}</code>这样的格式来定义标签。于是在文章中显示的是中文分类，但实际链接到英文别名上。这种方法虽然定义标签麻烦些，但可定制性强。</p>

<p>由于书写很麻烦，所以很不喜欢以上重新定义标签的方式，在 <a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">这里</a> 找到了另外一种更改方式。它同样是修改category_generator.rb文件来达到目的，利用了stringex包的to_url函数将中文分类标签的链接名和category_dir下的目录名都转换成相应的拼音，这样无论在本地还是GitHub上都没有问题。事实上，Octopress系统在利用rake new_[post|page]命令创建含有中文名的文章时也采用了这样的技巧。</p>

<p>找到<code>def write_category_indexes</code>中定义category目录的部分：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.write_category_index(File.join(dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase), category)</span></code></pre></td></tr></table></div></figure>


<p>将其修改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.write_category_index(File.join(dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase), category)</span></code></pre></td></tr></table></div></figure>


<p>再找到<code>def category_links(categories)</code>中定义中文分类网页标签的部分：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"&lt;a class='category' href='http://txgcwm.github.io/#{dir}/#{item.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase}/'&gt;#{item}&lt;/a&gt;"</span></code></pre></td></tr></table></div></figure>


<p>将其修改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"&lt;a class='category' href='http://txgcwm.github.io/#{dir}/#{item.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase}/'&gt;#{item}&lt;/a&gt;"</span></code></pre></td></tr></table></div></figure>


<p>注意，上面两处的修改就是在相应的地方加上to_url函数进行地址的转换。如果不想折腾的话，你也可以直接到 <a href="https://github.com/txgcwm/txgcwm.github.com/blob/source/plugins/category_generator.rb">这里</a> 下载我更改后的category_generator.rb插件。</p>

<ul>
<li>在plugins目录中创建category_list_tag.rb文件，文件内容如下：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'stringex'
</span><span class='line'>
</span><span class='line'>module Jekyll
</span><span class='line'>  class CategoryListTag &lt; Liquid::Tag
</span><span class='line'>    def render(context)
</span><span class='line'>      html = ""
</span><span class='line'>      categories = context.registers[:site].categories.keys
</span><span class='line'>    category_dir = context.registers[:site].config['category_dir']
</span><span class='line'>      categories.sort.each do |category|
</span><span class='line'>        posts_in_category = context.registers[:site].categories[category].size    
</span><span class='line'>        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/u, '-').gsub(/-{2,}/u, '-').to_url.downcase)
</span><span class='line'>        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://txgcwm.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>      end
</span><span class='line'>      html
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</span></code></pre></td></tr></table></div></figure>


<p>在实际使用（rake generate/rake preview）的时候，若blog整体采用了非ascii码的编码格式（比如utf-8）就会出现类似这样的错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Liquid error: incompatible encoding regexp match (ascii-8bit regexp with utf-8 string)</span></code></pre></td></tr></table></div></figure>


<p>其实是由于插件文件plugins/category_list_tag.rb本身是ascii编码所致:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chardet category_list_tag.rb
</span><span class='line'>category_list_tag.rb: ascii (confidence: 1.00)</span></code></pre></td></tr></table></div></figure>


<p>category_list_tag.rb中很多地方用到了ruby的正则表达式，而ruby的正则表达式在匹配的时候，默认是按照“代码源文件”的编码格式(在这里是ascii)进行匹配的，而如果blog是utf-8编码的话就会出现上述错误。有两种解决办法：</p>

<ol>
<li>将category_list_tag.rb转成utf-8格式。</li>
<li>更改category_list_tag.rb中所有的正则表达式声明，加上<code>u</code>选项（<code>u</code>的意思就是以utf-8编码格式来进行匹配）。例如，若原正则表达式是<code>/regexp/</code>, 则改成<code>/regexp/u</code>。</li>
</ol>


<p>在我实际处理问题的时候采用了第二种方法，category_list_tag.rb文件中的更改网上大多采用以下的方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase)</span></code></pre></td></tr></table></div></figure>


<p>更改成如下形式（只是简单增加了<code>u</code>选项）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>category_url = File.join(category_dir, category.gsub(/_|\P{Word}/u, '-').gsub(/-{2,}/u, '-').to_url.downcase)</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>添加source/_includes/custom/asides/category_list.html文件，内容可到 <a href="https://github.com/txgcwm/txgcwm.github.com/blob/source/source/_includes/custom/asides/category_list.html">这里</a> 查看。</p></li>
<li><p>修改_config.yml文件，在default_asides项中添加custom/asides/category_list.html，值之间以逗号隔开。</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [asides/recent_posts.html, custom/asides/category_list.html]</span></code></pre></td></tr></table></div></figure>


<p><code>_posts/*.markdown</code>文件头中添加categories标签示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "使用libevent编写Linux服务"
</span><span class='line'>date: 2013-07-18 19:01
</span><span class='line'>comments: true
</span><span class='line'>categories: [C/C++, 开源库, Unix/Linux]
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>到此为止，Octopress中添加分类侧边栏并使其支持中文的修改设置已经完毕。</p>

<h1>参考文章</h1>

<ul>
<li><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">Octopress博客设置</a></li>
<li><a href="http://ikeepu.com/bar/10393365">Octopress博客分类添加中文支持</a></li>
<li><a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">Octopress易筋经，中文分类标签</a></li>
<li><a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">关于在64位 Windows 7 中部署中文化的Octopress</a></li>
<li><a href="http://pfmiles.github.io/blog/liquid-error-about-regexp-match-when-using-octopress-tagcloud/">Liquid Error About Regexp Match When Using Octopress-tagcloud</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将Emacs配置成一个C/C++的IDE编程环境]]></title>
    <link href="http://txgcwm.github.io/blog/2013/07/20/jiang-emacspei-zhi-cheng-%5B%3F%5D-ge-c-slash-c-plus-plus-de-idebian-cheng-huan-jing/"/>
    <updated>2013-07-20T14:47:00+08:00</updated>
    <id>http://txgcwm.github.io/blog/2013/07/20/jiang-emacspei-zhi-cheng-[?]-ge-c-slash-c-plus-plus-de-idebian-cheng-huan-jing</id>
    <content type="html"><![CDATA[<p>在Linux环境下编程，首先要选择开发工具，大部分程序员都是使用VIM和EMACS这两大神器。虽说它们只是编辑器，但由于其超强的可定制性，已成为广大linux工作者的首选。使用<code>sudo apt-get install emacs</code>来安装Emaces。</p>

<h1>Emacs的基本操作和组合键</h1>

<h2>模式键定义</h2>

<p>四个模式键：C&mdash;-Ctrl；M&mdash;-Alt；s&mdash;-Super(Win)；S&mdash;-Shift</p>

<p>比如：</p>

<p>C-x：表示按下ctrl键，然后按下x键。</p>

<p>C-x c C-c：表示按下ctrl，然后按下x键，松开后再按下c键。</p>

<p>C-x k：表示按下ctrl，同时按下x和k键。</p>

<!--more-->


<h2>基本组合键</h2>

<p>C-x C-c：退出Emacs。</p>

<p>C-x C-s：保存当前buffer。</p>

<p>C-x C-f：打开和新建文件。</p>

<p>C-n：光标移到下一行。</p>

<p>C-p：光标移到上一行。</p>

<p>C-k：删除一行。</p>

<p>M-x：执行命令。</p>

<h1>启动时的大小和屏幕中的位置</h1>

<p>关于修改Emacs启动大小和屏幕中的位置有两种方法：1、修该~/.Xdefault文件，然后运行<code>xrdb ~/.Xdefault</code>；2、在~/.emacs文件中进行修改。按照第二种方法作如下设置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;设置启动的大小和屏幕中的位置
</span><span class='line'>(setq default-frame-alist
</span><span class='line'>  '((height . 35)(width . 100)(menubar-lines . 20)(tool-bar-lines . 0)))</span></code></pre></td></tr></table></div></figure>


<p>以上语句表示Emacs在启动后其高度为35，宽度为100，显示在屏幕的x=20，y=0处。</p>

<h1>Emacs的基本常规设定</h1>

<p>按照一般的习惯，.emacs文件中一般不会放太多的设置信息，一般放一些emacs的搜索路径信息。这里将emacs的配置文件（即lisp脚本）都放在~/.emacs.d/emacs的文件夹中。因此首先添加一个emacs的搜索路径：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;;; 添加Emacs搜索路径
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/ecb-2.40")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/codepilot")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/emacs-eclim")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/icicles")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/gnuserv")</span></code></pre></td></tr></table></div></figure>


<p>然后加载我们对emacs的设置脚本，在.emacs中添加如下语句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;;;读取脚本
</span><span class='line'>(load "base.el")
</span><span class='line'>(load "cyexpand.el")
</span><span class='line'>(load "cykbd.el")
</span><span class='line'>(load "addon.el")
</span><span class='line'>
</span><span class='line'>;;编程的配置
</span><span class='line'>(load "cycode.el")</span></code></pre></td></tr></table></div></figure>


<p>对emacs的基本设置，即base.el文件（在~/.emacs.d/emacs中），base.el文件中的部分内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;显示时间
</span><span class='line'>;;(display-time)
</span><span class='line'>(display-time-mode 1);;启用时间显示设置，在minibuffer上面的那个杠上
</span><span class='line'>(setq display-time-24hr-format t);;时间使用24小时制
</span><span class='line'>(setq display-time-day-and-date t);;时间显示包括日期和具体时间
</span><span class='line'>;;(setq display-time-use-mail-icon t);;时间栏旁边启用邮件设置
</span><span class='line'>;;(setq display-time-interval 10);;时间的变化频率，单位多少来着？
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>;;显示列号
</span><span class='line'>(setq column-number-mode t)
</span><span class='line'>;;没列左边显示行号,按f3显示/隐藏行号
</span><span class='line'>(require 'setnu)
</span><span class='line'>(setnu-mode t)
</span><span class='line'>;;(global-set-key[f3] (quote setnu-mode))
</span><span class='line'>
</span><span class='line'>;;显示标题栏 %f 缓冲区完整路径 %p 页面百分数 %l 行号
</span><span class='line'>(setq frame-title-format "%f")
</span><span class='line'>
</span><span class='line'>;;=======================================================================
</span><span class='line'>;;缓冲区
</span><span class='line'>;;=====================================================================
</span><span class='line'>;;设定行距
</span><span class='line'>(setq default-line-spaceing 4)
</span><span class='line'>;;页宽
</span><span class='line'>(setq default-fill-column 60)
</span><span class='line'>;;缺省模式 text-mode
</span><span class='line'>;;(setq default-major-mode 'text-mode)
</span><span class='line'>;;设置删除记录
</span><span class='line'>(setq kill-ring-max 200)
</span><span class='line'>;;以空行结束
</span><span class='line'>;;(setq require-final-newline t)
</span><span class='line'>;;开启语法高亮。
</span><span class='line'>(global-font-lock-mode 1)
</span><span class='line'>;;高亮显示区域选择
</span><span class='line'>(transient-mark-mode t)
</span><span class='line'>;;页面平滑滚动,scroll-margin 3 靠近屏幕边沿3行开始滚动，正好可以看到上下文
</span><span class='line'>;;(setq scroll-margin 3 scroll-consrvatively 10000)
</span><span class='line'>;;高亮显示成对括号
</span><span class='line'>(show-paren-mode t)
</span><span class='line'>(setq show-paren-style 'parentheses)
</span><span class='line'>;;鼠标指针避光标
</span><span class='line'>(mouse-avoidance-mode 'animate)
</span><span class='line'>;;粘贴于光标处,而不是鼠标指针处
</span><span class='line'>(setq mouse-yank-at-point t)</span></code></pre></td></tr></table></div></figure>


<p>设置默认工作目录，即启动emacs后所在的目录，在base.el中加上下面一句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;设置默认工作目录
</span><span class='line'>(setq default-directory "/srv") </span></code></pre></td></tr></table></div></figure>


<h1>C/C++的配置</h1>

<p>C/C++的配置主要是cycode.el文件。开发时很重要的一步就是调试，所以首先就是增加图形化调试界面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;==============================================================
</span><span class='line'>;;gdb-UI配置
</span><span class='line'>;;==============================================================
</span><span class='line'>(setq gdb-many-windows t)
</span><span class='line'>(load-library "multi-gud.el")
</span><span class='line'>(load-library "multi-gdb-ui.el")</span></code></pre></td></tr></table></div></figure>


<p>上面加载了两个lisp的脚本文件，这两个文件是直接在网上下载的图形化调试文件。</p>

<p>为了能高效的浏览和编辑代码，需要安装cedet插件。从官网下载cedet后，在~/.emacs.d/emacs目录中解压，根据解压出来文件夹中的INSTALL文件说明的方法安装cedet即可。有一点需要注意就是安装完成后不能删除安装后的文件，也就是需要保留解压后的文件夹。安装完成后，用下面的语句将我们需要的一些东西包含进来。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;==================================================
</span><span class='line'>;;cedet插件设置
</span><span class='line'>;;==================================================
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/cedet-1.1/speedbar")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/cedet-1.1/eieio")
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/emacs/cedet-1.1/semantic")</span></code></pre></td></tr></table></div></figure>


<p>然后就可进行有关cedet的设置，这里仅以一个代码折叠和展开为例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;代码折叠
</span><span class='line'>;;(require 'semantic-tag-folding nil 'noerror)
</span><span class='line'>(global-semantic-tag-folding-mode 1)
</span><span class='line'>;;折叠和打开整个buffer的所有代码
</span><span class='line'>(define-key semantic-tag-folding-mode-map (kbd "C--") 'semantic-tag-folding-fold-all)
</span><span class='line'>(define-key semantic-tag-folding-mode-map (kbd "C-=") 'semantic-tag-folding-show-all)
</span><span class='line'>;;折叠和打开单个buffer的所有代码
</span><span class='line'>(define-key semantic-tag-folding-mode-map (kbd "C-_") 'semantic-tag-folding-fold-block)
</span><span class='line'>(define-key semantic-tag-folding-mode-map (kbd "C-+") 'semantic-tag-folding-show-block)</span></code></pre></td></tr></table></div></figure>


<p>为了使用更方便（即对上面cedet插件的一个补充），需要再安装一个ecb插件。下载ecb后解压到~/.emacs.d/emacs目录中即可，然后加上下面两句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;==============================================================
</span><span class='line'>;;ecb配置
</span><span class='line'>;;==============================================================
</span><span class='line'>;;(require 'ecb)
</span><span class='line'>;;开启ecb用,M-x:ecb-activate
</span><span class='line'>(require 'ecb-autoloads)
</span><span class='line'>;;自动启动ecb并且不显示每日提示
</span><span class='line'>;;(require 'ecb)
</span><span class='line'>;;(setq ecb-auto-activate t)
</span><span class='line'>(setq ecb-tip-of-the-day nil)</span></code></pre></td></tr></table></div></figure>


<p>为了实现自动补全功能，需要安装auto-complete和yasnippet这两个插件。auto-complete下载后放到~/.emacs.d/emacs目录中解压，然后进入解压后的目录输入make命令即可；yasnippet下载后解压到~/.emacs.d/emacs目录中即可。下面是关于这两个插件的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;==========================================================
</span><span class='line'>;;YASnippet的配置
</span><span class='line'>;;==========================================================
</span><span class='line'>(require 'yasnippet)    ;;not yasnippet-bundle
</span><span class='line'>(yas/initialize)
</span><span class='line'>(yas/load-directory "~/.emacs.d/emacs/yasnippet-0.6.1c/snippets")</span></code></pre></td></tr></table></div></figure>


<p>装完插件后，作一些综合的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;配置Semantic搜索范围
</span><span class='line'>(setq semanticdb-project-roots
</span><span class='line'>    (list
</span><span class='line'>     (expand-file-name "/")))
</span><span class='line'>;;自定义补全命令，如果单词在中间就补全，否则就tab
</span><span class='line'>(defun my-indent-or-complete()
</span><span class='line'>  (interactive)
</span><span class='line'>  (if (looking-at "\\&gt;")
</span><span class='line'>    (hippie-expand nil)
</span><span class='line'>    (indent-for-tab-command))
</span><span class='line'>  )
</span><span class='line'>;;补全快捷键，ctrl+tab用senator补全，不显示列表
</span><span class='line'>;;alt+/补全，显示列表让选择
</span><span class='line'>(global-set-key [(control tab)] 'my-indent-or-complete)
</span><span class='line'>(define-key c-mode-base-map [(meta ?/)] 'semantic-ia-complete-symbol-menu)
</span><span class='line'>(autoload 'senator-try-expand-semantic "senator")
</span><span class='line'>(setq hippie-expand-try-functions-list
</span><span class='line'>    '(
</span><span class='line'>      senator-try-expand-semantic
</span><span class='line'>      try-expand-dabbrev
</span><span class='line'>      try-expand-dabbrev-visible
</span><span class='line'>      try-expand-dabbrev-all-buffers
</span><span class='line'>      try-expand-dabbrev-from-kill
</span><span class='line'>      try-expand-list
</span><span class='line'>      try-expand-list-all-buffers
</span><span class='line'>      try-expand-line
</span><span class='line'>      try-expand-line-all-buffers
</span><span class='line'>      try-complete-file-name-partially
</span><span class='line'>      try-complete-file-name
</span><span class='line'>      try-expand-whole-kill
</span><span class='line'>      )
</span><span class='line'>    )</span></code></pre></td></tr></table></div></figure>


<h1>键绑定</h1>

<p>为了使用emacs更方便，需要一些键绑定（即自己定义一些组合键），这也是emacs配置中必不可少的一步。自定义组合键放在cykbd.el文件中。根据一般的习惯用f1来表示帮助，即man命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(global-set-key [f1] 'manual-entry)
</span><span class='line'>(global-set-key [C-f1] 'info )</span></code></pre></td></tr></table></div></figure>


<p>f3-f5的一些绑定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;f3为查找字符串,alt+f3关闭当前缓冲区
</span><span class='line'>(global-set-key [f3] 'grep-find)
</span><span class='line'>(global-set-key [M-f3] 'kill-this-buffer)
</span><span class='line'>
</span><span class='line'>;;.emacs中设一个speedbar的快捷键
</span><span class='line'>(global-set-key [(f4)] 'speedbar-get-focus)
</span><span class='line'>;;ctrl-f4,激活,ecb
</span><span class='line'>(global-set-key [C-f4] 'ecb-activate)
</span><span class='line'>
</span><span class='line'>;;F5显示/隐藏工具栏 方便调试
</span><span class='line'>(global-set-key [f5] 'tool-bar-mode)
</span><span class='line'>;;ctrl-F5显示/隐藏菜单栏 ;; M-x menu-bar-open
</span><span class='line'>(global-set-key [C-f5] 'menu-bar-mode)</span></code></pre></td></tr></table></div></figure>


<p>f6为gdb调试，f7调用make来对原文件进行编译：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(global-set-key [f6] 'gdb)
</span><span class='line'>
</span><span class='line'>;;  C-f7, 设置编译命令; f7, 保存所有文件然后编译当前窗口文件
</span><span class='line'>(defun du-onekey-compile ()
</span><span class='line'>  "Save buffers and start compile"
</span><span class='line'>  (interactive)
</span><span class='line'>  (save-some-buffers t)
</span><span class='line'>  (switch-to-buffer-other-window "*compilation*")
</span><span class='line'>  (compile compile-command))
</span><span class='line'>  
</span><span class='line'>(setq-default compile-command "make")    
</span><span class='line'>(global-set-key [C-f7] 'compile)
</span><span class='line'> (global-set-key [f7] 'du-onekey-compile)</span></code></pre></td></tr></table></div></figure>


<p>将f8为对buffer的一些常用操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;目的是开一个shell的小buffer，用于更方便地测试程序(也就是运行程序了)，我经常会用到。
</span><span class='line'>;;f8就是另开一个buffer然后打开shell，C-f8则是在当前的buffer打开shell,shift+f8清空eshell
</span><span class='line'>(defun open-eshell-other-buffer ()
</span><span class='line'>  "Open eshell in other buffer"
</span><span class='line'>  (interactive)
</span><span class='line'>  (split-window-vertically)
</span><span class='line'>  (eshell))
</span><span class='line'>(defun my-eshell-clear-buffer ()
</span><span class='line'>  "Eshell clear buffer."
</span><span class='line'>  (interactive)
</span><span class='line'>  (let ((eshell-buffer-maximum-lines 0))
</span><span class='line'>    (eshell-truncate-buffer)))
</span><span class='line'>(global-set-key [(f8)] 'open-eshell-other-buffer)
</span><span class='line'>(global-set-key [C-f8] 'eshell)
</span><span class='line'>(global-set-key [S-f8] 'my-eshell-clear-buffer)</span></code></pre></td></tr></table></div></figure>


<p>f9-f11的一些绑定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;设置[C-f9]为调用dired命令
</span><span class='line'>(global-set-key [C-f9] 'dired)
</span><span class='line'>(global-set-key [f9] 'other-window);f9在其他窗口之间旋转
</span><span class='line'>
</span><span class='line'>;;设置F10为撤销
</span><span class='line'>(global-set-key [C-f10] 'undo)
</span><span class='line'>
</span><span class='line'>;;设置F11快捷键指定Emacs 的日历系统
</span><span class='line'>(global-set-key [C-f11] 'calendar) </span></code></pre></td></tr></table></div></figure>


<p>用f12查看函数定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;设置C-F12 快速察看日程安排
</span><span class='line'>;;F12调到函数定义
</span><span class='line'>(global-set-key [f12] 'semantic-ia-fast-jump)
</span><span class='line'>(global-set-key [C-f12] 'list-bookmarks)
</span><span class='line'>;;shift-f12跳回去
</span><span class='line'>(global-set-key [S-f12]
</span><span class='line'>  (lambda ()
</span><span class='line'>  (interactive)
</span><span class='line'>  (if (ring-empty-p (oref semantic-mru-bookmark-ring ring))
</span><span class='line'>  (error "Semantic Bookmark ring is currently empty"))
</span><span class='line'>  (let* ((ring (oref semantic-mru-bookmark-ring ring))
</span><span class='line'>  (alist (semantic-mrub-ring-to-assoc-list ring))
</span><span class='line'>  (first (cdr (car alist))))
</span><span class='line'>  (if (semantic-equivalent-tag-p (oref first tag)
</span><span class='line'>  (semantic-current-tag))
</span><span class='line'>  (setq frist (cdr (car (cdr alist)))))
</span><span class='line'>  (semantic-mrub-switch-tags first))))</span></code></pre></td></tr></table></div></figure>


<p>对ecb的键绑定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;==================ecb的配置=================================
</span><span class='line'>;;为了ecb窗口的切换
</span><span class='line'>(global-set-key [M-left] 'windmove-left)
</span><span class='line'>(global-set-key [M-right] 'windmove-right)
</span><span class='line'>(global-set-key [M-up] 'windmove-up)
</span><span class='line'>(global-set-key [M-down] 'windmove-down)
</span><span class='line'>;;隐藏和显示ecb窗口
</span><span class='line'>(global-set-key [f11] 'ecb-hide-ecb-windows)
</span><span class='line'>(global-set-key [S-f11] 'ecb-show-ecb-windows)</span></code></pre></td></tr></table></div></figure>


<p>对窗口的一些键绑定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;关闭当前窗口,alt+4
</span><span class='line'>(global-set-key (kbd "M-4") 'delete-window)
</span><span class='line'>;;(global-set-key (kbd "M-4") 'kill-this-buffer)
</span><span class='line'>;;关闭其他窗口,alt+1
</span><span class='line'>(global-set-key (kbd "M-1") 'delete-other-windows)
</span><span class='line'>;;水平分割窗口,alt+2
</span><span class='line'>(global-set-key (kbd "M-2") 'split-window-vertically)
</span><span class='line'>;;垂直分割窗口,alt+3
</span><span class='line'>(global-set-key (kbd "M-3") 'split-window-horizontally)
</span><span class='line'>;;切换到其他窗口，alt+0
</span><span class='line'>(global-set-key (kbd "M-0") 'other-window)
</span><span class='line'>;;显示缓冲区完整名称
</span><span class='line'>(global-set-key (kbd "M-5") 'display-buffer-name)</span></code></pre></td></tr></table></div></figure>


<h1>Emacs的扩展配置</h1>

<p>为了使emacs更符合个人的习惯，增加了一个cyexpand.el配置文件，其部分设置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; 编码设置
</span><span class='line'>(require 'coding-settings)
</span><span class='line'>
</span><span class='line'>;; `mode-line'显示格式
</span><span class='line'>(require 'mode-line-settings)
</span><span class='line'>
</span><span class='line'>;; 各种语言开发方面的设置,这个设置牵涉到太多配置....
</span><span class='line'>(require 'dev-settings)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>;; 显示行号
</span><span class='line'>(require 'linum-settings)
</span><span class='line'>
</span><span class='line'>;; color theme Emacs主题,很多face文件
</span><span class='line'>(require 'color-theme-settings)
</span><span class='line'>
</span><span class='line'>(require 'ahei-face)
</span><span class='line'>(require 'color-theme-ahei)
</span><span class='line'>(require 'face-settings)
</span><span class='line'>
</span><span class='line'>;; 高亮当前行
</span><span class='line'>(require 'hl-line-settings)
</span><span class='line'>
</span><span class='line'>;; 字体配置
</span><span class='line'>(require 'font-settings)
</span><span class='line'>;; diff
</span><span class='line'>(require 'diff-settings)
</span><span class='line'>;; Emacs的diff: ediff,有个my-fontest-win的文件很关键
</span><span class='line'>(require 'ediff-settings)
</span><span class='line'>
</span><span class='line'>;; 在buffer中方便的查找字符串: color-moccur
</span><span class='line'>(require 'moccur-settings)
</span><span class='line'>;; Emacs超强的增量搜索Isearch配置
</span><span class='line'>(require 'isearch-settings)
</span><span class='line'>
</span><span class='line'>;; 增加更丰富的高亮
</span><span class='line'>(require 'generic-x)
</span><span class='line'>
</span><span class='line'>;; spell check
</span><span class='line'>(setq-default ispell-program-name "aspell")
</span><span class='line'>
</span><span class='line'>;; Emacs中的包管理器
</span><span class='line'>(require 'package)
</span><span class='line'>(package-initialize)
</span><span class='line'>
</span><span class='line'>;; 在Emacs里面使用shell
</span><span class='line'>(require 'term-settings)
</span><span class='line'>(require 'multi-term-settings)
</span><span class='line'>
</span><span class='line'>;; 可以把光标由方块变成一个小长条
</span><span class='line'>(require 'bar-cursor)</span></code></pre></td></tr></table></div></figure>


<p>到此为止，已经将emacs打造成了开发C/C++的简易IDE。在使用过程中只需要会配置base.el、cycode.el、cykbd.el、cyexpand.el这四个文件即可，相关配置文件和插件可以到 <a href="https://github.com/txgcwm/emacs.d">这里</a> 下载。</p>
]]></content>
  </entry>
  
</feed>
